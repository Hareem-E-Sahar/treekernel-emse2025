(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:process)(SingleVariableDeclaration(MarkerAnnotation(SimpleName:NotNull))(SimpleType(SimpleName:Template))(SimpleName:tpl))(SingleVariableDeclaration(MarkerAnnotation(SimpleName:NotNull))(SimpleType(SimpleName:Document))(SimpleName:model))(SingleVariableDeclaration(MarkerAnnotation(SimpleName:NotNull))(SimpleType(SimpleName:String))(SimpleName:packageName))(SingleVariableDeclaration(MarkerAnnotation(SimpleName:NotNull))(SimpleType(SimpleName:String))(SimpleName:outFileName))(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:String))(SimpleType(SimpleName:String)))(SimpleName:xsltParam))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:artifact))(SimpleType(SimpleName:ModelGenerationException))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:print)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:destinationPath)))(SwitchStatement(QualifiedName:tpl.destination)(SwitchCase(SimpleName:target))(IfStatement(InfixExpression(QualifiedName:tpl.path)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:=)(InfixExpression(QualifiedName:where.buildDir)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:separatorChar)(StringLiteral:<STR>)(SimpleName:separatorChar)(SimpleName:GENERATION_TARGET)))))(Block(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:=)(QualifiedName:where.buildDir)))))(BreakStatement)(SwitchCase(SimpleName:source))(IfStatement(InfixExpression(QualifiedName:tpl.path)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:=)(QualifiedName:where.sourceDir))))(Block(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>)))))(BreakStatement)(SwitchCase(SimpleName:redora))(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:=)(QualifiedName:where.redoraDir)))(BreakStatement)(SwitchCase)(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:tpl.destination)))))(IfStatement(InfixExpression(QualifiedName:tpl.path)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(IfStatement(InfixExpression(QualifiedName:tpl.destination)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Destination.redora))(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:separator)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:artifact))))(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:separator)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:packageName))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)(SimpleName:separatorChar))))))))(Block(ExpressionStatement(Assignment(SimpleName:destinationPath)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:separator)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:tpl.path))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)(SimpleName:separatorChar))))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)(SimpleName:separatorChar))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:destinationPath)(StringLiteral:<STR>)(SimpleName:outFileName)))))(IfStatement(InfixExpression(QualifiedName:tpl.destination)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Destination.source))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:destinationPath)(SimpleName:outFileName)))(SimpleName:exists))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:outFileName)(StringLiteral:<STR>)))))(ReturnStatement)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:destinationPath)))(SimpleName:mkdirs)))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:Writer))(VariableDeclarationFragment(SimpleName:out)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileWriter))(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:destinationPath)(SimpleName:outFileName))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:destinationPath)(SimpleName:separatorChar)(SimpleName:outFileName))(SimpleName:e))))))(SwitchStatement(QualifiedName:tpl.type)(SwitchCase(SimpleName:freemarker))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:String))(SimpleType(SimpleName:NodeModel)))(VariableDeclarationFragment(SimpleName:root)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:HashMap))(SimpleType(SimpleName:String))(SimpleType(SimpleName:NodeModel))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:root))(SimpleName:put)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:NodeModel))(SimpleName:wrap)(METHOD_INVOCATION_ARGUMENTS(SimpleName:model))))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(QualifiedName:freemarker.template.Template))(VariableDeclarationFragment(SimpleName:template)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:freemarkerConf))(SimpleName:getTemplate)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tpl))(SimpleName:getTemplateFileName))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:template))(SimpleName:process)(METHOD_INVOCATION_ARGUMENTS(SimpleName:root)(SimpleName:out)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:ParseException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)(StringLiteral:<STR>)(SimpleName:outFileName))(SimpleName:e)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)(StringLiteral:<STR>)(SimpleName:outFileName))(SimpleName:e)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:TemplateException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)(StringLiteral:<STR>)(SimpleName:outFileName))(SimpleName:e)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:RuntimeException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)(StringLiteral:<STR>)(SimpleName:outFileName))(SimpleName:e))))))(BreakStatement)(SwitchCase(SimpleName:xslt))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tpl))(SimpleName:getAbsolutePath)))))(ExpressionStatement(MethodInvocation(SimpleName:xsltTransform)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:model))(SimpleName:getFirstChild))(SimpleName:in)(SimpleName:out)(SimpleName:xsltParam)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:FileNotFoundException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl))(SimpleName:e)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:TransformerException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:tpl)(StringLiteral:<STR>)(SimpleName:outFileName))(SimpleName:e)))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:closeQuietly)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in))))))(BreakStatement)(SwitchCase(SimpleName:copy))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tpl))(SimpleName:getAbsolutePath)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:copy)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)(SimpleName:out)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ModelGenerationException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tpl))(SimpleName:getTemplateFileName)))(SimpleName:e)))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:closeQuietly)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:closeQuietly)(METHOD_INVOCATION_ARGUMENTS(SimpleName:out))))))))