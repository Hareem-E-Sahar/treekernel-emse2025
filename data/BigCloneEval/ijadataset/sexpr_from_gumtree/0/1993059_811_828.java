(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:synchronized)(PrimitiveType:boolean)(SimpleName:tryLock)(SimpleType(SimpleName:OverlappingFileLockException))(Block(IfStatement(InfixExpression(SimpleName:lock)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:OverlappingFileLockException))))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:lockFile)(MethodInvocation(SimpleName:getLockFile))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lockFile))(SimpleName:getParentFile)))(SimpleName:mkdirs)))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:RandomAccessFile))(VariableDeclarationFragment(SimpleName:raf)(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(SimpleName:lockFile)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:FileLock))(VariableDeclarationFragment(SimpleName:l)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:raf))(SimpleName:getChannel)))(SimpleName:tryLock))))(IfStatement(InfixExpression(SimpleName:l)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:lock)(ASSIGNMENT_OPERATOR:=)(SimpleName:l)))(ReturnStatement(BooleanLiteral:true)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:ioe))(Block(ExpressionStatement(Assignment(SimpleName:lock)(ASSIGNMENT_OPERATOR:=)(NullLiteral))))))(ReturnStatement(BooleanLiteral:false))))))