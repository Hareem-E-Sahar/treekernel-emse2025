(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Test))(Modifier:public)(PrimitiveType:void)(SimpleName:testDigestedPeptideAmbiguity)(Block(VariableDeclarationStatement(SimpleType(SimpleName:Peptide))(VariableDeclarationFragment(SimpleName:protein)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(QualifiedName:Peptide.Builder))(StringLiteral:<STR>)))(SimpleName:ambiguityEnabled)))(SimpleName:cterm)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:CTerminus.PROT_C))))(SimpleName:nterm)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:NTerminus.PROT_N))))(SimpleName:build))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:digester))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(SimpleName:protein))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Assert))(SimpleName:assertTrue)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:protein))(SimpleName:isAmbiguous)))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Iterator))(SimpleType(SimpleName:DigestedPeptide)))(VariableDeclarationFragment(SimpleName:iter)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:digester))(SimpleName:getDigests)))(SimpleName:iterator))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:isAmb)(BooleanLiteral:false)))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iter))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:DigestedPeptide))(VariableDeclarationFragment(SimpleName:digest)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iter))(SimpleName:next))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:digest))(SimpleName:isAmbiguous))(Block(ExpressionStatement(Assignment(SimpleName:isAmb)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Assert))(SimpleName:assertTrue)(METHOD_INVOCATION_ARGUMENTS(SimpleName:isAmb))))))))