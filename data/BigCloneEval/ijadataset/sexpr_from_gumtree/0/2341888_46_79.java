(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:void)(SimpleName:addToZip)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:path))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:srcFile))(SingleVariableDeclaration(SimpleType(SimpleName:ZipOutputStream))(SimpleName:zip))(SimpleType(SimpleName:ImportExportException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:file)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:srcFile))))(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:exists)))(INFIX_EXPRESSION_OPERATOR:||)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:isDirectory)))(Block(ReturnStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:zipPath)))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:path))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:File.separator))))(Block(ExpressionStatement(Assignment(SimpleName:zipPath)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:path)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:File.separator)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getName))))))(Block(ExpressionStatement(Assignment(SimpleName:zipPath)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:path)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getName)))))))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:buf)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(NumberLiteral:2048))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:len)))(VariableDeclarationStatement(SimpleType(SimpleName:FileInputStream))(VariableDeclarationFragment(SimpleName:in)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:file))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:objEntry)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(SimpleName:zipPath))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:objEntry))))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:len)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buf)))))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buf)(NumberLiteral:0)(SimpleName:len)))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(VariableDeclarationStatement(SimpleType(SimpleName:ImportExportException))(VariableDeclarationFragment(SimpleName:ieo)(ClassInstanceCreation(SimpleType(SimpleName:ImportExportException))(QualifiedName:ImportExportFault.UNZIP_STREAM_FAILURE)(SimpleName:e))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:throwing)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(TypeLiteral(SimpleType(SimpleName:ZipUtils))))(SimpleName:getName))(StringLiteral:<STR>)(SimpleName:ieo))))(ThrowStatement(SimpleName:ieo))))(Block(IfStatement(InfixExpression(SimpleName:in)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:noop))(Block)))))))))))