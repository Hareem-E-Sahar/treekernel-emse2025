(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:repackageNonJavaFile)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:sourceName))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:targetName))(SimpleType(SimpleName:IOException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:sourceFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:_sourceBase)(SimpleName:sourceName))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:targetFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:_targetBase)(SimpleName:targetName))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:lastModified))(INFIX_EXPRESSION_OPERATOR:<)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:targetFile))(SimpleName:lastModified)))(ExpressionStatement(Assignment(SimpleName:_skippedFiles)(ASSIGNMENT_OPERATOR:+=)(NumberLiteral:1)))(ExpressionStatement(MethodInvocation(SimpleName:writeFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:targetFile)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:_repackager))(SimpleName:repackage)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:readFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:sourceFile)))))))))))))