(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(Modifier:synchronized)(PrimitiveType:void)(SimpleName:openFile)(SingleVariableDeclaration(PrimitiveType:long)(SimpleName:logId))(SimpleType(SimpleName:IOException))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:file)(MethodInvocation(SimpleName:fileFor)(METHOD_INVOCATION_ARGUMENTS(SimpleName:logId)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:exists))(Block(IfStatement(SimpleName:mReplayMode)(Block(ExpressionStatement(Assignment(SimpleName:mLogId)(ASSIGNMENT_OPERATOR:=)(SimpleName:logId)))(ReturnStatement)))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:FileNotFoundException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getPath)))))))(ExpressionStatement(Assignment(SimpleName:mReplayMode)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:FileOutputStream))(VariableDeclarationFragment(SimpleName:oldOut)(SimpleName:mOut)))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:FileOutputStream))(VariableDeclarationFragment(SimpleName:out)(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:file))))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:mOut)(ASSIGNMENT_OPERATOR:=)(SimpleName:out)))(ExpressionStatement(Assignment(SimpleName:mChannel)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:getChannel))))(ExpressionStatement(MethodInvocation(SimpleName:writeLong)(METHOD_INVOCATION_ARGUMENTS(SimpleName:MAGIC_NUMBER))))(ExpressionStatement(MethodInvocation(SimpleName:writeInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ENCODING_VERSION))))(ExpressionStatement(MethodInvocation(SimpleName:writeLong)(METHOD_INVOCATION_ARGUMENTS(SimpleName:logId))))(ExpressionStatement(MethodInvocation(SimpleName:timestamp)))(ExpressionStatement(MethodInvocation(SimpleName:doFlush))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(Assignment(SimpleName:mChannel)(ASSIGNMENT_OPERATOR:=)(ConditionalExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:mOut)(ASSIGNMENT_OPERATOR:=)(SimpleName:oldOut)))(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral)))(NullLiteral)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:oldOut))(SimpleName:getChannel)))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e2))(Block)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:delete)))(ThrowStatement(SimpleName:e)))))(IfStatement(InfixExpression(SimpleName:oldOut)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:oldOut))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block)))))(ExpressionStatement(Assignment(SimpleName:mLogId)(ASSIGNMENT_OPERATOR:=)(SimpleName:logId)))))))