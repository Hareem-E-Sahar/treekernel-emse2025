(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:writeClassFile)(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:zipFile))(SingleVariableDeclaration(SimpleType(SimpleName:ZipOutputStream))(SimpleName:out))(SingleVariableDeclaration(SimpleType(SimpleName:JAssembler))(SimpleName:asm))(Block(VariableDeclarationStatement(SimpleType(SimpleName:ClassDef))(VariableDeclarationFragment(SimpleName:def)(QualifiedName:asm.def)))(VariableDeclarationStatement(SimpleType(SimpleName:Box))(VariableDeclarationFragment(SimpleName:box)(QualifiedName:asm.classFile)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:path)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:def.ns))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)(CharacterLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:+)(CharacterLiteral:<STR>)(QualifiedName:def.name)(StringLiteral:<STR>))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(SimpleName:path)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:box.buf)(NumberLiteral:0)(QualifiedName:box.len))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:closeEntry))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(MethodInvocation(SimpleName:err)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:path))(SimpleName:zipFile)))))))))))