(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:checkForExtraLibraries)(SimpleType(SimpleName:Exception))(Block(VariableDeclarationStatement(SimpleType(SimpleName:StringTokenizer))(VariableDeclarationFragment(SimpleName:tokenizer)(ClassInstanceCreation(SimpleType(SimpleName:StringTokenizer))(SimpleName:extraResource)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:plugin_lib_dir)(InfixExpression(QualifiedName:XProjectConstants.PLUGINS_DIR)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:name)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:extra_resource_urls)(StringLiteral:<STR>)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:temp_rsrc)))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:is)))(VariableDeclarationStatement(SimpleType(SimpleName:OutputStream))(VariableDeclarationFragment(SimpleName:os)))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:file)))(VariableDeclarationStatement(SimpleType(SimpleName:URL))(VariableDeclarationFragment(SimpleName:url)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:b)))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tokenizer))(SimpleName:hasMoreTokens))(Block(ExpressionStatement(Assignment(SimpleName:temp_rsrc)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tokenizer))(SimpleName:nextToken))))(ExpressionStatement(Assignment(SimpleName:file)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:File))(InfixExpression(SimpleName:plugin_lib_dir)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:temp_rsrc)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:exists)))(Block(ExpressionStatement(Assignment(SimpleName:url)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pluginClassLoader))(SimpleName:getResource)(METHOD_INVOCATION_ARGUMENTS(SimpleName:temp_rsrc)))))(ExpressionStatement(Assignment(SimpleName:is)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getParentFile)))(SimpleName:mkdirs)))(ExpressionStatement(Assignment(SimpleName:os)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:file))))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:b)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:is))(SimpleName:read))))(INFIX_EXPRESSION_OPERATOR:!=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:os))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:is))(SimpleName:close)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:os))(SimpleName:close)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:extra_resource_urls))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:extra_resource_urls)(ASSIGNMENT_OPERATOR:+=)(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:extra_resource_urls)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:plugin_lib_dir)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:temp_rsrc))))))(ExpressionStatement(Assignment(SimpleName:pluginClassLoader)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:XRepository))(SimpleName:getResourceManager)))(SimpleName:createBuiltInClassLoader)(METHOD_INVOCATION_ARGUMENTS(SimpleName:extra_resource_urls)(SimpleName:pluginClassLoader)))))))))