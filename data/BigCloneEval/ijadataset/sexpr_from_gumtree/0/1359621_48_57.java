(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(ArrayType(PrimitiveType:byte)(Dimension))(SimpleName:produceHash)(SingleVariableDeclaration(ArrayType(PrimitiveType:byte)(Dimension))(SimpleName:inputData))(SimpleType(SimpleName:ChainedException))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:myName)(InfixExpression(SimpleName:thisClass)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))(IfStatement(InfixExpression(QualifiedName:inputData.length)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(SimpleName:myName)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logCat))(SimpleName:isDebugEnabled))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logCat))(SimpleName:debug)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ClassInstanceCreation(SimpleType(SimpleName:String))(SimpleName:inputData))))))))(ReturnStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sha))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputData))))))))