(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:doMenuCloneIt)(Block(VariableDeclarationStatement(SimpleType(SimpleName:SubCloning))(VariableDeclarationFragment(SimpleName:prog)(ClassInstanceCreation(SimpleType(SimpleName:SubCloning)))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:2))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:i))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(QualifiedName:prog.plasmids)(SimpleName:i)))(SimpleName:setSequence)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(FieldAccess(ThisExpression)(SimpleName:seqArea))(SimpleName:i)))(SimpleName:getText)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(QualifiedName:prog.plasmids)(SimpleName:i)))(SimpleName:setName)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(FieldAccess(ThisExpression)(SimpleName:seqName))(SimpleName:i)))(SimpleName:getText)))(SimpleName:trim)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(QualifiedName:prog.plasmids)(SimpleName:i)))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getEnzymeList))(ClassInstanceCreation(SimpleType(SimpleName:EnzymeSelector))(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(PrimitiveType:boolean)(SimpleName:accept)(SingleVariableDeclaration(SimpleType(SimpleName:Enzyme))(SimpleName:e))(Block(ReturnStatement(BooleanLiteral:true)))))))))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:fillInsertData)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:prog.insert))))(ReturnStatement))(VariableDeclarationStatement(SimpleType(SimpleName:Thread))(VariableDeclarationFragment(SimpleName:t)(ClassInstanceCreation(SimpleType(SimpleName:Thread))(SimpleName:prog))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:t))(SimpleName:start)))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:t))(SimpleName:join))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:e))(Block)))))))