(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:computeOverlaps)(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:start0))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:end0))(SingleVariableDeclaration(SimpleType(SimpleName:MonotoneChain))(SimpleName:mc))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:start1))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:end1))(SingleVariableDeclaration(SimpleType(SimpleName:MonotoneChainOverlapAction))(SimpleName:mco))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Coordinate))(VariableDeclarationFragment(SimpleName:p00)(ArrayAccess(SimpleName:pts)(SimpleName:start0))))(VariableDeclarationStatement(SimpleType(SimpleName:Coordinate))(VariableDeclarationFragment(SimpleName:p01)(ArrayAccess(SimpleName:pts)(SimpleName:end0))))(VariableDeclarationStatement(SimpleType(SimpleName:Coordinate))(VariableDeclarationFragment(SimpleName:p10)(ArrayAccess(QualifiedName:mc.pts)(SimpleName:start1))))(VariableDeclarationStatement(SimpleType(SimpleName:Coordinate))(VariableDeclarationFragment(SimpleName:p11)(ArrayAccess(QualifiedName:mc.pts)(SimpleName:end1))))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:end0)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:start0))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:1))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(InfixExpression(SimpleName:end1)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:start1))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:1)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mco))(SimpleName:overlap)(METHOD_INVOCATION_ARGUMENTS(ThisExpression)(SimpleName:start0)(SimpleName:mc)(SimpleName:start1))))(ReturnStatement)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:mco.tempEnv1))(SimpleName:init)(METHOD_INVOCATION_ARGUMENTS(SimpleName:p00)(SimpleName:p01))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:mco.tempEnv2))(SimpleName:init)(METHOD_INVOCATION_ARGUMENTS(SimpleName:p10)(SimpleName:p11))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:mco.tempEnv1))(SimpleName:intersects)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:mco.tempEnv2))))(ReturnStatement))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:mid0)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:start0)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:end0)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:mid1)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:start1)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:end1)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(IfStatement(InfixExpression(SimpleName:start0)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:mid0))(Block(IfStatement(InfixExpression(SimpleName:start1)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:mid1))(ExpressionStatement(MethodInvocation(SimpleName:computeOverlaps)(METHOD_INVOCATION_ARGUMENTS(SimpleName:start0)(SimpleName:mid0)(SimpleName:mc)(SimpleName:start1)(SimpleName:mid1)(SimpleName:mco)))))(IfStatement(InfixExpression(SimpleName:mid1)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:end1))(ExpressionStatement(MethodInvocation(SimpleName:computeOverlaps)(METHOD_INVOCATION_ARGUMENTS(SimpleName:start0)(SimpleName:mid0)(SimpleName:mc)(SimpleName:mid1)(SimpleName:end1)(SimpleName:mco)))))))(IfStatement(InfixExpression(SimpleName:mid0)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:end0))(Block(IfStatement(InfixExpression(SimpleName:start1)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:mid1))(ExpressionStatement(MethodInvocation(SimpleName:computeOverlaps)(METHOD_INVOCATION_ARGUMENTS(SimpleName:mid0)(SimpleName:end0)(SimpleName:mc)(SimpleName:start1)(SimpleName:mid1)(SimpleName:mco)))))(IfStatement(InfixExpression(SimpleName:mid1)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:end1))(ExpressionStatement(MethodInvocation(SimpleName:computeOverlaps)(METHOD_INVOCATION_ARGUMENTS(SimpleName:mid0)(SimpleName:end0)(SimpleName:mc)(SimpleName:mid1)(SimpleName:end1)(SimpleName:mco)))))))))))