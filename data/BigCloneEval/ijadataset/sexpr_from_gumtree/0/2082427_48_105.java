(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(PrimitiveType:void)(SimpleName:openImpl)(SimpleType(SimpleName:FileIOException))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:tryCount)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:done)(BooleanLiteral:false)))(WhileStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:done))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:randomAccessFile)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(SimpleName:file)(SimpleName:MODE_RWS))))(ExpressionStatement(Assignment(SimpleName:done)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:exception))(Block(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:tryCount))(INFIX_EXPRESSION_OPERATOR:>=)(SimpleName:maxRetry))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:message)(InfixExpression(SimpleName:FAILED_OPEN)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message))))(ThrowStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:HELPER_FILE_UTIL))(SimpleName:fileIOException)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message)(SimpleName:file)(SimpleName:exception))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:warn)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:FAILED_OPEN)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Thread))(SimpleName:sleep)(METHOD_INVOCATION_ARGUMENTS(SimpleName:retryMsDelay)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:exception2))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:message)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message))))(ThrowStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:HELPER_FILE_UTIL))(SimpleName:fileIOException)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message)(SimpleName:file)(SimpleName:exception))))))))))))(ExpressionStatement(Assignment(SimpleName:tryCount)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:done)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(WhileStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:done))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:fileLock)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:randomAccessFile))(SimpleName:getChannel)))(SimpleName:lock))))(IfStatement(InfixExpression(SimpleName:fileLock)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(StringLiteral:<STR>))))(Block(ExpressionStatement(Assignment(SimpleName:done)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:exception))(Block(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:tryCount))(INFIX_EXPRESSION_OPERATOR:>=)(SimpleName:maxRetry))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:randomAccessFile))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:exception2))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:warn)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(SimpleName:exception2)))))))(ExpressionStatement(Assignment(SimpleName:randomAccessFile)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(ThrowStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:HELPER_FILE_UTIL))(SimpleName:fileIOException)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)(StringLiteral:<STR>))(SimpleName:file)(SimpleName:exception))))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Thread))(SimpleName:sleep)(METHOD_INVOCATION_ARGUMENTS(SimpleName:retryMsDelay)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:exception2))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:message)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message)(SimpleName:exception2))))(ThrowStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:HELPER_FILE_UTIL))(SimpleName:fileIOException)(METHOD_INVOCATION_ARGUMENTS(SimpleName:message)(SimpleName:file)(SimpleName:exception))))))))))))(ExpressionStatement(Assignment(SimpleName:currentPositionInFile)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(IfStatement(QualifiedName:logger.debugEnabled)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:debug)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)))))))))))