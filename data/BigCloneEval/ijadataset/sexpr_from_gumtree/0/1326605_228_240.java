(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(Modifier:static)(PrimitiveType:void)(SimpleName:makeBinaryBalancedTree)(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:PhyloTreeNode))(SimpleType(SimpleName:Integer)))(SimpleName:root))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:begin))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:end))(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:begin)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:end))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:root))(SimpleName:setName)(METHOD_INVOCATION_ARGUMENTS(SimpleName:begin))))(ReturnStatement)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:mid)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:begin)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:end)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(IfStatement(InfixExpression(SimpleName:mid)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:begin))(Block(ExpressionStatement(MethodInvocation(SimpleName:makeBinaryBalancedTree)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:root))(SimpleName:addChild))(SimpleName:begin)(SimpleName:mid))))))(IfStatement(InfixExpression(SimpleName:end)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:mid))(Block(ExpressionStatement(MethodInvocation(SimpleName:makeBinaryBalancedTree)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:root))(SimpleName:addChild))(SimpleName:mid)(SimpleName:end))))))))))