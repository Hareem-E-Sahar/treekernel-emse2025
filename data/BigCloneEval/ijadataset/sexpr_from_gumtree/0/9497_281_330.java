(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:protected)(Modifier:synchronized)(PrimitiveType:boolean)(SimpleName:load)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:URL))(SimpleName:url))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:fMustLoad))(ReturnStatement(SimpleName:fLoaded)))(IfStatement(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:stream)(NullLiteral)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:line)(NumberLiteral:0)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:stream)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(IfStatement(InfixExpression(SimpleName:stream)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:word)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:CharsetDecoder))(VariableDeclarationFragment(SimpleName:decoder)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Charset))(SimpleName:forName)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:getProperty)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))))(SimpleName:newDecoder))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:replaceWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:onMalformedInput)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:CodingErrorAction.REPORT))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:onUnmappableCharacter)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:CodingErrorAction.REPORT))))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:BufferedReader))(VariableDeclarationFragment(SimpleName:reader)(ClassInstanceCreation(SimpleType(SimpleName:BufferedReader))(ClassInstanceCreation(SimpleType(SimpleName:InputStreamReader))(SimpleName:stream)(SimpleName:decoder)))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:doRead)(BooleanLiteral:true)))(WhileStatement(SimpleName:doRead)(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:word)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reader))(SimpleName:readLine)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:MalformedInputException))(SimpleName:ex))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:onMalformedInput)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:CodingErrorAction.REPLACE))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:reset)))(ExpressionStatement(Assignment(SimpleName:word)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reader))(SimpleName:readLine))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:onMalformedInput)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:CodingErrorAction.REPORT))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:message)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Messages))(SimpleName:format)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:RubyUIMessages.AbstractSpellingDictionary_encodingError)(ArrayCreation(ArrayType(SimpleType(SimpleName:String))(Dimension))(ArrayInitializer(SimpleName:word)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:decoder))(SimpleName:replacement))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:toString))))))))(VariableDeclarationStatement(SimpleType(SimpleName:IStatus))(VariableDeclarationFragment(SimpleName:status)(ClassInstanceCreation(SimpleType(SimpleName:Status))(QualifiedName:IStatus.ERROR)(QualifiedName:RubyUI.ID_PLUGIN)(QualifiedName:IStatus.OK)(SimpleName:message)(SimpleName:ex))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:RubyPlugin))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(SimpleName:status))))(ExpressionStatement(Assignment(SimpleName:doRead)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:word)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))))(ContinueStatement))))(ExpressionStatement(Assignment(SimpleName:doRead)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:word)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))))(IfStatement(SimpleName:doRead)(ExpressionStatement(MethodInvocation(SimpleName:hashWord)(METHOD_INVOCATION_ARGUMENTS(SimpleName:word)))))))(ReturnStatement(BooleanLiteral:true)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:exception))(Block(IfStatement(InfixExpression(SimpleName:line)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:message)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Messages))(SimpleName:format)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:RubyUIMessages.AbstractSpellingDictionary_encodingError)(ArrayCreation(ArrayType(SimpleType(SimpleName:Object))(Dimension))(ArrayInitializer(ClassInstanceCreation(SimpleType(SimpleName:Integer))(SimpleName:line))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:toString))))))))(VariableDeclarationStatement(SimpleType(SimpleName:IStatus))(VariableDeclarationFragment(SimpleName:status)(ClassInstanceCreation(SimpleType(SimpleName:Status))(QualifiedName:IStatus.ERROR)(QualifiedName:RubyUI.ID_PLUGIN)(QualifiedName:IStatus.OK)(SimpleName:message)(SimpleName:exception))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:RubyPlugin))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(SimpleName:status)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:RubyPlugin))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(SimpleName:exception)))))))(Block(ExpressionStatement(Assignment(SimpleName:fMustLoad)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(TryStatement(Block(IfStatement(InfixExpression(SimpleName:stream)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stream))(SimpleName:close)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:x))(Block)))))))(ReturnStatement(BooleanLiteral:false))))))