(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(Modifier:static)(SimpleType(SimpleName:String))(SimpleName:computeKey)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:applicationId))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:owner))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:MessageDigest))(VariableDeclarationFragment(SimpleName:md)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:MessageDigest))(SimpleName:getInstance)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:digest1)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:md))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:applicationId))(SimpleName:getBytes))))))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:digest2)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:md))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:owner))(SimpleName:getBytes))))))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:license)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(NumberLiteral:12))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:license.length))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:i))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:license)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(InfixExpression(ArrayAccess(SimpleName:digest1)(SimpleName:i))(INFIX_EXPRESSION_OPERATOR:^)(ArrayAccess(SimpleName:digest2)(SimpleName:i)))))))(ReturnStatement(MethodInvocation(SimpleName:bytesToHexString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:license)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:NoSuchAlgorithmException))(SimpleName:ex))(Block(ReturnStatement(NullLiteral)))))))))