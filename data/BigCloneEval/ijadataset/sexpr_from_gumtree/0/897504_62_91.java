(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:protected)(PrimitiveType:void)(SimpleName:read)(Block(VariableDeclarationStatement(SimpleType(SimpleName:FileOutputStream))(VariableDeclarationFragment(SimpleName:out)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(NullLiteral)))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:name)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipPlugin))(SimpleName:getRootFolder))(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:File.separator)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:getPath)))(SimpleName:lastSegment)))))(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:name))))(VariableDeclarationStatement(SimpleType(SimpleName:ArchiveFile))(VariableDeclarationFragment(SimpleName:f)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Archive))(MethodInvocation(SimpleName:getParent)))))(SimpleName:getArchiveFile))))(VariableDeclarationStatement(SimpleType(SimpleName:Object))(VariableDeclarationFragment(SimpleName:archiveFile)(QualifiedName:f.file)))(IfStatement(InstanceofExpression(SimpleName:archiveFile)(SimpleType(SimpleName:ZipFile)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:ZipFile))(VariableDeclarationFragment(SimpleName:zipFile)(CastExpression(SimpleType(SimpleName:ZipFile))(SimpleName:archiveFile))))(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getInputStream)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:ZipEntry))(SimpleName:entry)))))))(IfStatement(InstanceofExpression(SimpleName:archiveFile)(SimpleType(SimpleName:TarFile)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:TarFile))(VariableDeclarationFragment(SimpleName:tarFile)(CastExpression(SimpleType(SimpleName:TarFile))(SimpleName:archiveFile))))(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tarFile))(SimpleName:getInputStream)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:TarEntry))(SimpleName:entry)))))))))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:buffer)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(NumberLiteral:4096))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:read)(NumberLiteral:0)))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:read)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buffer)))))(INFIX_EXPRESSION_OPERATOR:!=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buffer)(NumberLiteral:0)(SimpleName:read)))))(ExpressionStatement(Assignment(SimpleName:file)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipPlugin))(SimpleName:createArchive)(METHOD_INVOCATION_ARGUMENTS(SimpleName:name)))))(ExpressionStatement(SuperMethodInvocation(SimpleName:read))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipPlugin))(SimpleName:logError)(METHOD_INVOCATION_ARGUMENTS(SimpleName:e))))))(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName:in)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:close))))(IfStatement(InfixExpression(SimpleName:out)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:close)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block)))))))))