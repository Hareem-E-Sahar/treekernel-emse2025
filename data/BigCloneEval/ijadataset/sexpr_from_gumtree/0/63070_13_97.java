(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:void)(SimpleName:main)(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:String))(Dimension))(SimpleName:args))(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:uGrenze)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:oGrenze)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:ergebnis)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:koeffizientenEinlesung)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:exponent)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:gleicheGrenzen)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:eingabeEnde)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:falscheEingabe)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:sofortEnde)(BooleanLiteral:false)))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:koeffizientToExponent)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(SimpleName:MAX_EXPONENTEN)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:MAX_EXPONENTEN))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:koeffizientToExponent)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))))(TryStatement(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:grenze1)(MethodInvocation(SimpleName:readFloat))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:grenze2)(MethodInvocation(SimpleName:readFloat))))(IfStatement(InfixExpression(SimpleName:grenze1)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:grenze2))(Block(ExpressionStatement(Assignment(SimpleName:oGrenze)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:max)(METHOD_INVOCATION_ARGUMENTS(SimpleName:grenze1)(SimpleName:grenze2)))))(ExpressionStatement(Assignment(SimpleName:uGrenze)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:min)(METHOD_INVOCATION_ARGUMENTS(SimpleName:grenze1)(SimpleName:grenze2))))))(Block(ExpressionStatement(Assignment(SimpleName:gleicheGrenzen)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(ExpressionStatement(Assignment(SimpleName:koeffizientenEinlesung)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:readInt))))(IfStatement(InfixExpression(SimpleName:koeffizientenEinlesung)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:ENDZEICHEN))(Block(ExpressionStatement(Assignment(SimpleName:sofortEnde)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(Block(WhileStatement(InfixExpression(SimpleName:eingabeEnde)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false))(Block(ExpressionStatement(Assignment(SimpleName:exponent)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:readInt))))(IfStatement(InfixExpression(SimpleName:exponent)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:ENDZEICHEN))(Block(ExpressionStatement(Assignment(SimpleName:eingabeEnde)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:falscheEingabe)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:exponent)(INFIX_EXPRESSION_OPERATOR:>=)(SimpleName:MIN_EXPONENTEN))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:exponent)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:MAX_EXPONENTEN)))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(ArrayAccess(SimpleName:koeffizientToExponent)(SimpleName:exponent))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0)))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:koeffizientToExponent)(SimpleName:exponent))(ASSIGNMENT_OPERATOR:=)(SimpleName:koeffizientenEinlesung))))(Block(ExpressionStatement(Assignment(SimpleName:falscheEingabe)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))))(IfStatement(InfixExpression(SimpleName:exponent)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:ENDZEICHEN))(Block(ExpressionStatement(Assignment(SimpleName:koeffizientenEinlesung)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:readInt))))(IfStatement(InfixExpression(SimpleName:koeffizientenEinlesung)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:ENDZEICHEN))(Block(ExpressionStatement(Assignment(SimpleName:eingabeEnde)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:falscheEingabe)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:true))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:sofortEnde)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:true)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:EprogIO))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(Block(IfStatement(InfixExpression(SimpleName:gleicheGrenzen)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:true))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:EprogIO))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(Block(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:n)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:grenzenDifferenz)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:xk)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:xk_minus_1)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:xk_zwischenWert)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:teilSumme)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:gesamtSumme)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:grenzenDifferenz)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:oGrenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:uGrenze))))(IfStatement(InfixExpression(SimpleName:grenzenDifferenz)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:TEILINTERVALLBREITE))(Block(ExpressionStatement(Assignment(SimpleName:n)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:1))))(Block(ExpressionStatement(Assignment(SimpleName:n)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:round)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:grenzenDifferenz)(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:TEILINTERVALLBREITE))))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:k)(NumberLiteral:1)))(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:n))(PostfixExpression(SimpleName:k)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(SimpleName:xk_minus_1)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:uGrenze)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:oGrenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:uGrenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n)))(INFIX_EXPRESSION_OPERATOR:*)(ParenthesizedExpression(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))))(ExpressionStatement(Assignment(SimpleName:xk)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:uGrenze)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:oGrenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:uGrenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n)))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:k))))))(ExpressionStatement(Assignment(SimpleName:xk_zwischenWert)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:xk_minus_1)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:xk)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(ExpressionStatement(Assignment(SimpleName:teilSumme)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:exp)(SimpleName:MIN_EXPONENTEN)))(InfixExpression(SimpleName:exp)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:MAX_EXPONENTEN))(PostfixExpression(SimpleName:exp)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:blub)(InfixExpression(SimpleName:exp)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:pow)(METHOD_INVOCATION_ARGUMENTS(SimpleName:xk_zwischenWert)(SimpleName:exp))))))(ExpressionStatement(Assignment(SimpleName:teilSumme)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(ArrayAccess(SimpleName:koeffizientToExponent)(SimpleName:exp))(INFIX_EXPRESSION_OPERATOR:*)(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:pow)(METHOD_INVOCATION_ARGUMENTS(SimpleName:xk_zwischenWert)(SimpleName:exp)))))))))(ExpressionStatement(Assignment(SimpleName:gesamtSumme)(ASSIGNMENT_OPERATOR:+=)(SimpleName:teilSumme)))))(ExpressionStatement(Assignment(SimpleName:ergebnis)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:oGrenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:uGrenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:gesamtSumme))))(ExpressionStatement(MethodInvocation(SimpleName:printFixedln)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ergebnis)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:EprogException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:EprogIO))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))))))))