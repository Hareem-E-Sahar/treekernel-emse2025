(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:Connection))(SimpleName:createConnection)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:serviceName))(SimpleType(SimpleName:VCHException))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:HttpRequest))(VariableDeclarationFragment(SimpleName:request)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:httpClient))(SimpleName:createRequest)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:HttpRequest.Method.POST)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:serviceName))))))(VariableDeclarationStatement(SimpleType(SimpleName:HttpResponse))(VariableDeclarationFragment(SimpleName:response)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:request))(SimpleName:execute))))(SwitchStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:response))(SimpleName:getStatusCode))(SwitchCase(QualifiedName:HttpConstants.StatusCodes.CREATED))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:location)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Util))(SimpleName:getRequiredHeader)(METHOD_INVOCATION_ARGUMENTS(SimpleName:response)(QualifiedName:HttpConstants.Headers.LOCATION)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:path)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:httpClient))(SimpleName:getPath)(METHOD_INVOCATION_ARGUMENTS(SimpleName:location)))))(IfStatement(InfixExpression(SimpleName:path)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:VCHProtocolException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:location)(StringLiteral:<STR>))))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:path))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:VCHProtocolException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:location)(StringLiteral:<STR>))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:connectionId)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:path))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:13)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:isValidConnectionId)(METHOD_INVOCATION_ARGUMENTS(SimpleName:connectionId))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:VCHProtocolException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:connectionId)(StringLiteral:<STR>))))))(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName:ConnectionImpl))(SimpleName:httpClient)(SimpleName:connectionId)))(SwitchCase(QualifiedName:HttpConstants.StatusCodes.NOT_FOUND))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:NoSuchServiceException))(SimpleName:serviceName)))(SwitchCase)(ThrowStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Util))(SimpleName:createException)(METHOD_INVOCATION_ARGUMENTS(SimpleName:response))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:HttpException))(SimpleName:ex))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:VCHConnectionException))(SimpleName:ex))))))))))