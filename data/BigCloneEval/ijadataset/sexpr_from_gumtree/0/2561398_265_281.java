(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:boolean)(SimpleName:initializeLockFile)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:Language))(SimpleName:language))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileAccess))(SimpleName:writeFile)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(SimpleName:runLockFile))))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:lockChannel)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(SimpleName:runLockFile)(StringLiteral:<STR>)))(SimpleName:getChannel))))(ExpressionStatement(Assignment(SimpleName:fileLock)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:fileLock)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lockChannel))(SimpleName:tryLock)))))(CatchClause(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:OverlappingFileLockException))(SimpleName:e))(Block))))(CatchClause(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:Exception))(SimpleName:e))(Block)))(IfStatement(InfixExpression(SimpleName:fileLock)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:MiscToolkit))(SimpleName:showMessage)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:language))(SimpleName:getString)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:runLockFile))(SimpleName:getAbsolutePath))(StringLiteral:<STR>))(QualifiedName:JOptionPane.ERROR_MESSAGE)(StringLiteral:<STR>))))(ReturnStatement(BooleanLiteral:false))))(ReturnStatement(BooleanLiteral:true))))))