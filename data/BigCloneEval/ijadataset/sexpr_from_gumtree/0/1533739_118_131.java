(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:long)(SimpleName:sum)(SingleVariableDeclaration(PrimitiveType:long)(SimpleName:number))(Block(IfStatement(InfixExpression(SimpleName:number)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(ReturnStatement(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:prod)(NumberLiteral:1)))(ForStatement(VariableDeclarationExpression(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:k)(NumberLiteral:2)))(InfixExpression(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:k))(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:number))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:k))(Block(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:p)(NumberLiteral:1)))(WhileStatement(InfixExpression(InfixExpression(SimpleName:number)(INFIX_EXPRESSION_OPERATOR:%)(SimpleName:k))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:p)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(SimpleName:p)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:k))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:number)(ASSIGNMENT_OPERATOR:/=)(SimpleName:k)))))(ExpressionStatement(Assignment(SimpleName:prod)(ASSIGNMENT_OPERATOR:*=)(SimpleName:p)))))(IfStatement(InfixExpression(SimpleName:number)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:1))(ExpressionStatement(Assignment(SimpleName:prod)(ASSIGNMENT_OPERATOR:*=)(InfixExpression(NumberLiteral:1)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:number)))))(ReturnStatement(SimpleName:prod))))))