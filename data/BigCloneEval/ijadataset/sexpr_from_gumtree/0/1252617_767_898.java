(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(Modifier:final)(SimpleType(SimpleName:LispObject))(SimpleName:loadCompiledFunction)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:String))(SimpleName:namestring))(SimpleType(SimpleName:ConditionThrowable))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:LispThread))(VariableDeclarationFragment(SimpleName:thread)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LispThread))(SimpleName:currentThread))))(VariableDeclarationStatement(Modifier:final)(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:absolute)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Utilities))(SimpleName:isFilenameAbsolute)(METHOD_INVOCATION_ARGUMENTS(SimpleName:namestring)))))(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:device)(SimpleName:NIL)))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:Pathname))(VariableDeclarationFragment(SimpleName:defaultPathname)))(IfStatement(SimpleName:absolute)(Block(ExpressionStatement(Assignment(SimpleName:defaultPathname)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:coerceToPathname)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:SymbolConstants.DEFAULT_PATHNAME_DEFAULTS))(SimpleName:symbolValue)(METHOD_INVOCATION_ARGUMENTS(SimpleName:thread))))))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:loadTruename)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:SymbolConstants.LOAD_TRUENAME))(SimpleName:symbolValue)(METHOD_INVOCATION_ARGUMENTS(SimpleName:thread)))))(IfStatement(InstanceofExpression(SimpleName:loadTruename)(SimpleType(SimpleName:Pathname)))(Block(ExpressionStatement(Assignment(SimpleName:defaultPathname)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:Pathname))(SimpleName:loadTruename))))(ExpressionStatement(Assignment(SimpleName:device)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Pathname))(SimpleName:loadTruename))))(SimpleName:getDevice)))))(Block(ExpressionStatement(Assignment(SimpleName:defaultPathname)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:coerceToPathname)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:SymbolConstants.DEFAULT_PATHNAME_DEFAULTS))(SimpleName:symbolValue)(METHOD_INVOCATION_ARGUMENTS(SimpleName:thread)))))))))))(IfStatement(InstanceofExpression(SimpleName:device)(SimpleType(SimpleName:Pathname)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:URL))(VariableDeclarationFragment(SimpleName:url)(MethodInvocation(METHOD_INVOCATION_RECEIVER(TypeLiteral(SimpleType(SimpleName:Lisp))))(SimpleName:getResource)(METHOD_INVOCATION_ARGUMENTS(SimpleName:namestring)))))(IfStatement(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:jarFile)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Pathname))(SimpleName:device))))(SimpleName:getNamestring))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:jarFile))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:url)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:URL))(InfixExpression(SimpleName:jarFile)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:namestring))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:MalformedURLException))(SimpleName:ex))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ex)))))))))))(IfStatement(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:s)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:toString))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:zipFileName)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:entryName)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:s)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:9)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:index)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:lastIndexOf)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))))(IfStatement(InfixExpression(SimpleName:index)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:zipFileName)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)(SimpleName:index)))))(ExpressionStatement(Assignment(SimpleName:entryName)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:index)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))(IfStatement(InfixExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entryName))(SimpleName:length))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entryName))(SimpleName:charAt)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)))(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(ExpressionStatement(Assignment(SimpleName:entryName)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entryName))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1))))))(IfStatement(QualifiedName:Utilities.isPlatformWindows)(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFileName))(SimpleName:length))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFileName))(SimpleName:charAt)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)))(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(ExpressionStatement(Assignment(SimpleName:zipFileName)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFileName))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1))))))))(ExpressionStatement(Assignment(SimpleName:zipFileName)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:URLDecoder))(SimpleName:decode)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zipFileName)(StringLiteral:<STR>)))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipFile))(VariableDeclarationFragment(SimpleName:zipFile)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipCache))(SimpleName:getZip)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zipFileName)))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:entry)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:entryName)))))(IfStatement(InfixExpression(SimpleName:entry)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:size)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getSize))))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getInputStream)(METHOD_INVOCATION_ARGUMENTS(SimpleName:entry)))))(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)(CastExpression(PrimitiveType:int)(SimpleName:size))))))(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName:obj)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(SimpleName:obj)(SimpleName:NIL))))(Block(ExpressionStatement(Assignment(SimpleName:entryName)(ASSIGNMENT_OPERATOR:=)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:defaultPathname.name))(SimpleName:getStringValue))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>))))(VariableDeclarationStatement(PrimitiveType:byte)(VariableDeclarationFragment(SimpleName:in)(Dimension)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Utilities))(SimpleName:getZippedZipEntryAsByteArray)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zipFile)(SimpleName:entryName)(SimpleName:namestring)))))(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:o)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)))))(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName:o)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(SimpleName:o)(SimpleName:NIL))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipCache))(SimpleName:removeZip)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getName)))))))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:bytesAvailable)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:available))))(VariableDeclarationStatement(SimpleType(SimpleName:ByteArrayOutputStream))(VariableDeclarationFragment(SimpleName:buf)(ClassInstanceCreation(SimpleType(SimpleName:ByteArrayOutputStream)))))(WhileStatement(InfixExpression(SimpleName:bytesAvailable)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:b)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(SimpleName:bytesAvailable))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b))))(ExpressionStatement(Assignment(SimpleName:bytesAvailable)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:available))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:buf))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b))))))(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:buf))(SimpleName:toByteArray))))))(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName:obj)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(SimpleName:obj)(SimpleName:NIL))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:VerifyError))(SimpleName:e))(Block(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:e))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:t))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:t)))))))))(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IkvmSite))(SimpleName:isIKVMDll))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:namestring))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:className)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:namestring))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:namestring))(SimpleName:length))(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:6))))))(VariableDeclarationStatement(SimpleType(SimpleName:Class))(VariableDeclarationFragment(SimpleName:c)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Class))(SimpleName:forName)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(TypeLiteral(SimpleType(SimpleName:Lisp))))(SimpleName:getPackage)))(SimpleName:getName))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:className))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(StringLiteral:<STR>))))))))(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)))))(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName:obj)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(SimpleName:obj)(SimpleName:NIL))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:cnf))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cnf))(SimpleName:printStackTrace))))))(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:namestring))))))))(VariableDeclarationStatement(SimpleType(SimpleName:Pathname))(VariableDeclarationFragment(SimpleName:pathname)(ClassInstanceCreation(SimpleType(SimpleName:Pathname))(SimpleName:namestring))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:file)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Utilities))(SimpleName:getFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pathname)(SimpleName:defaultPathname)))))(IfStatement(InfixExpression(InfixExpression(SimpleName:file)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:isFile))))(Block(ExpressionStatement(Assignment(SimpleName:file)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IkvmSite))(SimpleName:ikvmFileSafe)(METHOD_INVOCATION_ARGUMENTS(SimpleName:file)))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:file)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:isFile)))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:file))(CastExpression(PrimitiveType:int)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:length)))))))(IfStatement(InfixExpression(SimpleName:obj)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ReturnStatement(SimpleName:obj))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:VerifyError))(SimpleName:e))(Block(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:t))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:t)))))))(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pathname))(SimpleName:writeToString)))))))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:loadTruename)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:SymbolConstants.LOAD_TRUENAME))(SimpleName:symbolValue)(METHOD_INVOCATION_ARGUMENTS(SimpleName:thread)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:zipFileName)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Pathname))(SimpleName:loadTruename))))(SimpleName:getNamestring))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipFile))(VariableDeclarationFragment(SimpleName:zipFile)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipCache))(SimpleName:getZip)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zipFileName)))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:entry)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:namestring)))))(IfStatement(InfixExpression(SimpleName:entry)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:LispObject))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(SimpleName:loadCompiledFunction)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getInputStream)(METHOD_INVOCATION_ARGUMENTS(SimpleName:entry)))(CastExpression(PrimitiveType:int)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getSize)))))))(IfStatement(InfixExpression(SimpleName:obj)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ReturnStatement(SimpleName:obj)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:namestring)))))(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:namestring)))))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ZipCache))(SimpleName:removeZip)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:getName))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:t))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Debug))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:t)))))))(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:FileError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:namestring))(ClassInstanceCreation(SimpleType(SimpleName:Pathname))(SimpleName:namestring))))))))))