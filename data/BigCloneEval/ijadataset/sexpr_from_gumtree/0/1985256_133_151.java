(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(ParameterizedType(SimpleType(SimpleName:TObjectIntHashMap))(SimpleType(SimpleName:Vertex)))(SimpleName:generateDegreeSequence)(SingleVariableDeclaration(SimpleType(SimpleName:Graph))(SimpleName:graph))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:maxDegree))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:TObjectIntHashMap))(SimpleType(SimpleName:Vertex)))(VariableDeclarationFragment(SimpleName:kMap)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:TObjectIntHashMap))(SimpleType(SimpleName:Vertex))))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Vertex))(SimpleName:vertex))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:graph))(SimpleName:getVertices))(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:accept)(BooleanLiteral:false)))(WhileStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:accept))(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:k)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:random))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:maxDegree)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:p)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:degreeDistribution))(SimpleName:value)(METHOD_INVOCATION_ARGUMENTS(SimpleName:k)))))(IfStatement(InfixExpression(SimpleName:p)(INFIX_EXPRESSION_OPERATOR:>=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:random))(SimpleName:nextDouble)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:kMap))(SimpleName:put)(METHOD_INVOCATION_ARGUMENTS(SimpleName:vertex)(SimpleName:k))))(ExpressionStatement(Assignment(SimpleName:accept)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:FunctionEvaluationException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:printStackTrace))))))))))(ReturnStatement(SimpleName:kMap))))))