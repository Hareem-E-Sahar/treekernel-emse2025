(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(Modifier:static)(PrimitiveType:void)(SimpleName:copyDefaultLicense)(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:pathToDefaultLicense)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:getDefault)))(SimpleName:getPluginLocation))(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:File.separator)(StringLiteral:<STR>)(QualifiedName:File.separator)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:defaultLicenseFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:pathToDefaultLicense))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:defaultLicenseFile))(SimpleName:exists))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:licenseFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:getLicencePath)))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:copyFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:defaultLicenseFile)(SimpleName:licenseFile)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(QualifiedName:IStatus.ERROR)(NullLiteral))))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:defaultLicenseFile))(QualifiedName:IStatus.ERROR)(NullLiteral))))))))))