(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:readData)(SingleVariableDeclaration(SimpleType(SimpleName:MultipartFormField))(SimpleName:field))(SingleVariableDeclaration(SimpleType(SimpleName:DelimitedBufferedInputStream))(SimpleName:in))(SingleVariableDeclaration(ArrayType(PrimitiveType:byte)(Dimension))(SimpleName:delim))(SimpleType(SimpleName:IOException))(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:field))(ASSIGNMENT_OPERATOR:=)(SimpleName:field)))(VariableDeclarationStatement(SimpleType(SimpleName:OutputStream))(VariableDeclarationFragment(SimpleName:out)(NullLiteral)))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:buff)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(SimpleName:BUFSIZE))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:count)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:BufferedOutputStream))(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(MethodInvocation(SimpleName:getFile))))))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:count)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:readToDelimiter)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buff)(NumberLiteral:0)(QualifiedName:buff.length)(SimpleName:delim)))))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buff)(NumberLiteral:0)(SimpleName:count)))))(IfStatement(InfixExpression(SimpleName:count)(INFIX_EXPRESSION_OPERATOR:==)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(StringLiteral:<STR>)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(SimpleName:e))))(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName:out)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:close)))(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(NullLiteral))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(EmptyStatement))))))))))