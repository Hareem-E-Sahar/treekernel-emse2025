(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:static)(SimpleType(SimpleName:AbstractWrapper))(SimpleName:requestFor)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:name))(SingleVariableDeclaration(SimpleType(SimpleName:Class))(SimpleName:wclazz))(SingleVariableDeclaration(SimpleType(SimpleName:LoggerImpl))(SimpleName:ref))(Block(VariableDeclarationStatement(SimpleType(SimpleName:AbstractWrapper))(VariableDeclarationFragment(SimpleName:wrapper)))(VariableDeclarationStatement(SimpleType(SimpleName:AbstractWrapper))(VariableDeclarationFragment(SimpleName:cached)))(VariableDeclarationStatement(SimpleType(SimpleName:Iterator))(VariableDeclarationFragment(SimpleName:i)))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:name)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:wclazz)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral)))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:ref)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:LoggingException))(StringLiteral:<STR>)))))(ExpressionStatement(Assignment(SimpleName:wrapper)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(SynchronizedStatement(SimpleName:cache_)(Block(ForStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cache_))(SimpleName:iterator)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(Block(ExpressionStatement(Assignment(SimpleName:cached)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:AbstractWrapper))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:next)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:wclazz))(SimpleName:isInstance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:cached)))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:cached.name_))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:name))))(Block(ExpressionStatement(Assignment(SimpleName:wrapper)(ASSIGNMENT_OPERATOR:=)(SimpleName:cached)))(BreakStatement)))))(IfStatement(InfixExpression(SimpleName:wrapper)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:wrapper)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:AbstractWrapper))(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:wclazz))(SimpleName:getConstructor)(METHOD_INVOCATION_ARGUMENTS(ArrayCreation(ArrayType(SimpleType(SimpleName:Class))(Dimension))(ArrayInitializer(TypeLiteral(SimpleType(SimpleName:String)))(TypeLiteral(SimpleType(SimpleName:LoggerImpl))))))))(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(ArrayCreation(ArrayType(SimpleType(SimpleName:Object))(Dimension))(ArrayInitializer(SimpleName:name)(SimpleName:ref)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:t))(Block(IfStatement(InstanceofExpression(SimpleName:t)(SimpleType(SimpleName:InvocationTargetException)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:LoggingException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:wclazz)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:InvocationTargetException))(SimpleName:t))))(SimpleName:getTargetException)))(SimpleName:getMessage)))))))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:LoggingException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:wclazz)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:t))(SimpleName:getMessage))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cache_))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:wrapper)))))(Block(ExpressionStatement(Assignment(QualifiedName:wrapper.cnt_)(ASSIGNMENT_OPERATOR:+=)(NumberLiteral:1)))))))(ReturnStatement(SimpleName:wrapper))))))