(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:double)(SimpleName:getLogEmissionProbability)(SingleVariableDeclaration(SimpleType(SimpleName:Exon))(SimpleName:exon))(SingleVariableDeclaration(SimpleType(SimpleName:Exon))(SimpleName:expected))(SingleVariableDeclaration(SimpleType(SimpleName:Exon))(SimpleName:stdDev))(SingleVariableDeclaration(SimpleType(SimpleName:State))(SimpleName:s))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:nSamples))(SingleVariableDeclaration(SimpleType(SimpleName:Gamma))(SimpleName:gamma))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:gammaK))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:gammaTheta))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:gammaSNPsK))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:gammaSNPsTheta))(Block(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:observedSNPs)(QualifiedName:exon.SNPs)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:expectedSNPs)(QualifiedName:expected.SNPs)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:observedFPKM)(QualifiedName:exon.FPKM)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:expectedFPKM)(QualifiedName:expected.FPKM)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:a)(NumberLiteral:.05))(VariableDeclarationFragment(SimpleName:b)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:lambdaSNPs)(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(QualifiedName:s.snpRatio)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:nSamples)(SimpleName:expectedSNPs))(INFIX_EXPRESSION_OPERATOR:+)(InfixExpression(SimpleName:a)(INFIX_EXPRESSION_OPERATOR:*)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:exon))(SimpleName:length)))))(INFIX_EXPRESSION_OPERATOR:/)(ParenthesizedExpression(InfixExpression(SimpleName:nSamples)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:b))))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:logProbSNPs)(MethodInvocation(SimpleName:logPoisson)(METHOD_INVOCATION_ARGUMENTS(SimpleName:observedSNPs)(SimpleName:lambdaSNPs)))))(ExpressionStatement(Assignment(SimpleName:a)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:100)))(ExpressionStatement(Assignment(SimpleName:b)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:2)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:lambdaFPKM)(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(QualifiedName:s.rpkmRatio)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:nSamples)(SimpleName:expectedFPKM))(INFIX_EXPRESSION_OPERATOR:+)(InfixExpression(SimpleName:a)(INFIX_EXPRESSION_OPERATOR:*)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:exon))(SimpleName:length)))))(INFIX_EXPRESSION_OPERATOR:/)(ParenthesizedExpression(InfixExpression(SimpleName:nSamples)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:b))))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:logProbFPKM)(MethodInvocation(SimpleName:logPoisson)(METHOD_INVOCATION_ARGUMENTS(SimpleName:observedFPKM)(SimpleName:lambdaFPKM)))))(IfStatement(InfixExpression(SimpleName:lambdaFPKM)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0.0))(IfStatement(InfixExpression(SimpleName:observedFPKM)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0.0))(ExpressionStatement(Assignment(SimpleName:logProbFPKM)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:logProbFPKM)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Double.NEGATIVE_INFINITY)))))(IfStatement(InfixExpression(SimpleName:lambdaSNPs)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0.0))(IfStatement(InfixExpression(SimpleName:observedSNPs)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0.0))(ExpressionStatement(Assignment(SimpleName:logProbSNPs)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:logProbSNPs)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Double.NEGATIVE_INFINITY)))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:newGammaK)(MethodInvocation(SimpleName:updateGammaK)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:s.rpkmRatio)(SimpleName:nSamples)(SimpleName:gammaK)(SimpleName:expectedFPKM)))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:newGammaTheta)(MethodInvocation(SimpleName:updateGammaTheta)(METHOD_INVOCATION_ARGUMENTS(SimpleName:nSamples)(SimpleName:gammaTheta)))))(ExpressionStatement(Assignment(SimpleName:gamma)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:Gamma))(SimpleName:newGammaK)(SimpleName:newGammaTheta)(NullLiteral))))(ExpressionStatement(Assignment(SimpleName:logProbFPKM)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Double.NEGATIVE_INFINITY)))(VariableDeclarationStatement(SimpleType(QualifiedName:jsc.distributions.Gamma))(VariableDeclarationFragment(SimpleName:gammaDist)(ClassInstanceCreation(SimpleType(QualifiedName:jsc.distributions.Gamma))(SimpleName:newGammaK)(SimpleName:newGammaTheta))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:prevx)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:p)(NumberLiteral:0.1)))(InfixExpression(SimpleName:p)(INFIX_EXPRESSION_OPERATOR:<=)(NumberLiteral:0.9))(Assignment(SimpleName:p)(ASSIGNMENT_OPERATOR:+=)(NumberLiteral:0.1))(Block(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:x)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:gammaDist))(SimpleName:inverseCdf)(METHOD_INVOCATION_ARGUMENTS(SimpleName:p)))))(IfStatement(InfixExpression(SimpleName:prevx)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(ExpressionStatement(Assignment(SimpleName:prevx)(ASSIGNMENT_OPERATOR:=)(SimpleName:x))))(ExpressionStatement(Assignment(SimpleName:x)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:x)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:prevx)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(ExpressionStatement(Assignment(SimpleName:logProbFPKM)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Probability))(SimpleName:logSum)(METHOD_INVOCATION_ARGUMENTS(SimpleName:logProbFPKM)(InfixExpression(MethodInvocation(SimpleName:logPoisson)(METHOD_INVOCATION_ARGUMENTS(SimpleName:observedFPKM)(SimpleName:x)))(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(SimpleName:logGamma)(METHOD_INVOCATION_ARGUMENTS(SimpleName:x)(SimpleName:newGammaK)(SimpleName:newGammaTheta))))))))(ExpressionStatement(Assignment(SimpleName:prevx)(ASSIGNMENT_OPERATOR:=)(SimpleName:x)))))(IfStatement(InfixExpression(SimpleName:observedFPKM)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0.0))(IfStatement(InfixExpression(InfixExpression(QualifiedName:s.rpkmRatio)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:expectedFPKM))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(ExpressionStatement(Assignment(SimpleName:logProbFPKM)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))))(ReturnStatement(ParenthesizedExpression(InfixExpression(SimpleName:logProbFPKM)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:logProbSNPs))))))))