(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:final)(PrimitiveType:int)(SimpleName:getToken)(SimpleType(SimpleName:IOException))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:c)))(LabeledStatement(SimpleName:retry)(ForStatement(Block(ForStatement(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:EOF_CHAR))(Block(ExpressionStatement(Assignment(SimpleName:tokenBeg)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))(ReturnStatement(QualifiedName:Token.EOF)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:dirtyLine)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:tokenBeg)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))(ReturnStatement(QualifiedName:Token.EOL)))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:isJSSpace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(Block(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:!=)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:dirtyLine)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(BreakStatement)))))))(ExpressionStatement(Assignment(SimpleName:tokenBeg)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.XMLATTR)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:identifierStart)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:isUnicodeEscapeStart)(BooleanLiteral:false)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:identifierStart)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:isUnicodeEscapeStart)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:stringBufferTop)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))))(Block(ExpressionStatement(Assignment(SimpleName:identifierStart)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(MethodInvocation(SimpleName:ungetChar)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>))))))(Block(ExpressionStatement(Assignment(SimpleName:identifierStart)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Character))(SimpleName:isJavaIdentifierStart)(METHOD_INVOCATION_ARGUMENTS(CastExpression(PrimitiveType:char)(SimpleName:c))))))(IfStatement(SimpleName:identifierStart)(Block(ExpressionStatement(Assignment(SimpleName:stringBufferTop)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))))))(IfStatement(SimpleName:identifierStart)(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:containsEscape)(SimpleName:isUnicodeEscapeStart)))(ForStatement(Block(IfStatement(SimpleName:isUnicodeEscapeStart)(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:escapeVal)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:4))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:i))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(ExpressionStatement(Assignment(SimpleName:escapeVal)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Kit))(SimpleName:xDigitToInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)(SimpleName:escapeVal)))))(IfStatement(InfixExpression(SimpleName:escapeVal)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(BreakStatement)))))(IfStatement(InfixExpression(SimpleName:escapeVal)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR))))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:escapeVal))))(ExpressionStatement(Assignment(SimpleName:isUnicodeEscapeStart)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:isUnicodeEscapeStart)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:containsEscape)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR)))))(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:EOF_CHAR))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:BYTE_ORDER_MARK)))(INFIX_EXPRESSION_OPERATOR:||)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Character))(SimpleName:isJavaIdentifierPart)(METHOD_INVOCATION_ARGUMENTS(CastExpression(PrimitiveType:char)(SimpleName:c))))))(Block(BreakStatement)))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))))))))(ExpressionStatement(MethodInvocation(SimpleName:ungetChar)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:str)(MethodInvocation(SimpleName:getStringFromBuffer))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:containsEscape))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:result)(MethodInvocation(SimpleName:stringToKeyword)(METHOD_INVOCATION_ARGUMENTS(SimpleName:str)))))(IfStatement(InfixExpression(SimpleName:result)(INFIX_EXPRESSION_OPERATOR:!=)(QualifiedName:Token.EOF))(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName:result)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Token.LET))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:result)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Token.YIELD))))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:parser.compilerEnv))(SimpleName:getLanguageVersion))(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:Context.VERSION_1_7)))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(ConditionalExpression(InfixExpression(SimpleName:result)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Token.LET))(StringLiteral:<STR>)(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.NAME)))))(IfStatement(InfixExpression(SimpleName:result)(INFIX_EXPRESSION_OPERATOR:!=)(QualifiedName:Token.RESERVED))(Block(ReturnStatement(SimpleName:result)))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:parser.compilerEnv))(SimpleName:isReservedKeywordAsIdentifier)))(Block(ReturnStatement(SimpleName:result)))))))))(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:string))(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:String))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:allStrings))(SimpleName:intern)(METHOD_INVOCATION_ARGUMENTS(SimpleName:str))))))(ReturnStatement(QualifiedName:Token.NAME))))(IfStatement(InfixExpression(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)))(INFIX_EXPRESSION_OPERATOR:||)(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:peekChar)))))))(Block(ExpressionStatement(Assignment(SimpleName:isOctal)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:stringBufferTop)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:base)(NumberLiteral:10)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:base)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:16)))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar)))))(IfStatement(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)))(Block(ExpressionStatement(Assignment(SimpleName:base)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:8)))(ExpressionStatement(Assignment(SimpleName:isOctal)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))))))))(IfStatement(InfixExpression(SimpleName:base)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:16))(Block(WhileStatement(InfixExpression(NumberLiteral:0)(INFIX_EXPRESSION_OPERATOR:<=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Kit))(SimpleName:xDigitToInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)(NumberLiteral:0))))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar)))))))(Block(WhileStatement(InfixExpression(InfixExpression(CharacterLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:<=)(CharacterLiteral:<STR>)))(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:base)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:8))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:>=)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addWarning)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(ConditionalExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(StringLiteral:<STR>)(StringLiteral:<STR>)))))(ExpressionStatement(Assignment(SimpleName:base)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:10)))))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:isInteger)(BooleanLiteral:true)))(IfStatement(InfixExpression(InfixExpression(SimpleName:base)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:10))(INFIX_EXPRESSION_OPERATOR:&&)(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))))(Block(ExpressionStatement(Assignment(SimpleName:isInteger)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(DoStatement(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar)))))(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR))))(DoStatement(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar)))))(MethodInvocation(SimpleName:isDigit)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))))))(ExpressionStatement(MethodInvocation(SimpleName:ungetChar)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:numString)(MethodInvocation(SimpleName:getStringFromBuffer))))(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:string))(ASSIGNMENT_OPERATOR:=)(SimpleName:numString)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:dval)))(IfStatement(InfixExpression(InfixExpression(SimpleName:base)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:10))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:isInteger)))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:dval)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Double))(SimpleName:valueOf)(METHOD_INVOCATION_ARGUMENTS(SimpleName:numString))))(SimpleName:doubleValue)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:NumberFormatException))(SimpleName:ex))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR))))))(Block(ExpressionStatement(Assignment(SimpleName:dval)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ScriptRuntime))(SimpleName:stringToNumber)(METHOD_INVOCATION_ARGUMENTS(SimpleName:numString)(NumberLiteral:0)(SimpleName:base)))))))(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:number))(ASSIGNMENT_OPERATOR:=)(SimpleName:dval)))(ReturnStatement(QualifiedName:Token.NUMBER))))(IfStatement(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:quoteChar)(ASSIGNMENT_OPERATOR:=)(SimpleName:c)))(ExpressionStatement(Assignment(SimpleName:stringBufferTop)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(LabeledStatement(SimpleName:strLoop)(WhileStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:quoteChar))(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:EOF_CHAR)))(Block(ExpressionStatement(MethodInvocation(SimpleName:ungetChar)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:escapeVal)))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(SwitchStatement(SimpleName:c)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(CharacterLiteral:<STR>)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0xb)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:escapeStart)(SimpleName:stringBufferTop)))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:escapeVal)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:4))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:i))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(ExpressionStatement(Assignment(SimpleName:escapeVal)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Kit))(SimpleName:xDigitToInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)(SimpleName:escapeVal)))))(IfStatement(InfixExpression(SimpleName:escapeVal)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ContinueStatement(SimpleName:strLoop))))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))))(ExpressionStatement(Assignment(SimpleName:stringBufferTop)(ASSIGNMENT_OPERATOR:=)(SimpleName:escapeStart)))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(SimpleName:escapeVal)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(ExpressionStatement(Assignment(SimpleName:escapeVal)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Kit))(SimpleName:xDigitToInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)(NumberLiteral:0)))))(IfStatement(InfixExpression(SimpleName:escapeVal)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>))))(ContinueStatement(SimpleName:strLoop)))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:c1)(SimpleName:c)))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(ExpressionStatement(Assignment(SimpleName:escapeVal)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Kit))(SimpleName:xDigitToInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c)(SimpleName:escapeVal)))))(IfStatement(InfixExpression(SimpleName:escapeVal)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>))))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c1))))(ContinueStatement(SimpleName:strLoop)))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(SimpleName:escapeVal)))))))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(ContinueStatement(SimpleName:strLoop))(SwitchCase)(IfStatement(InfixExpression(InfixExpression(CharacterLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:<)(CharacterLiteral:<STR>)))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:val)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:-)(CharacterLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(InfixExpression(CharacterLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:<)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:val)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(InfixExpression(NumberLiteral:8)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:val))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:-)(CharacterLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(InfixExpression(InfixExpression(CharacterLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:<)(CharacterLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:val)(INFIX_EXPRESSION_OPERATOR:<=)(NumberLiteral:037)))(Block(ExpressionStatement(Assignment(SimpleName:val)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(InfixExpression(NumberLiteral:8)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:val))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:c))(INFIX_EXPRESSION_OPERATOR:-)(CharacterLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))))))(ExpressionStatement(MethodInvocation(SimpleName:ungetChar)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(SimpleName:val))))))))(ExpressionStatement(MethodInvocation(SimpleName:addToString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar)))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:str)(MethodInvocation(SimpleName:getStringFromBuffer))))(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:string))(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:String))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:allStrings))(SimpleName:intern)(METHOD_INVOCATION_ARGUMENTS(SimpleName:str))))))(ReturnStatement(QualifiedName:Token.STRING))))(SwitchStatement(SimpleName:c)(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.SEMI))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.LB))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.RB))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.LC))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.RC))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.LP))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.RP))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.COMMA))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.HOOK))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.COLONCOLON)))(Block(ReturnStatement(QualifiedName:Token.COLON))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.DOTDOT)))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.DOTQUERY)))(Block(ReturnStatement(QualifiedName:Token.DOT)))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.OR)))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_BITOR)))(Block(ReturnStatement(QualifiedName:Token.BITOR)))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_BITXOR)))(Block(ReturnStatement(QualifiedName:Token.BITXOR))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.AND)))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_BITAND)))(Block(ReturnStatement(QualifiedName:Token.BITAND)))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.SHEQ)))(Block(ReturnStatement(QualifiedName:Token.EQ)))))(Block(ReturnStatement(QualifiedName:Token.ASSIGN))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.SHNE)))(Block(ReturnStatement(QualifiedName:Token.NE)))))(Block(ReturnStatement(QualifiedName:Token.NOT))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(SimpleName:skipLine)))(ContinueStatement(SimpleName:retry))))(ExpressionStatement(MethodInvocation(SimpleName:ungetCharIgnoreLineEnd)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>))))))(ExpressionStatement(MethodInvocation(SimpleName:ungetCharIgnoreLineEnd)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>))))))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_LSH)))(Block(ReturnStatement(QualifiedName:Token.LSH)))))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.LE)))(Block(ReturnStatement(QualifiedName:Token.LT))))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_URSH)))(Block(ReturnStatement(QualifiedName:Token.URSH)))))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_RSH)))(Block(ReturnStatement(QualifiedName:Token.RSH)))))))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.GE)))(Block(ReturnStatement(QualifiedName:Token.GT))))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_MUL)))(Block(ReturnStatement(QualifiedName:Token.MUL))))(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(MethodInvocation(SimpleName:markCommentStart)))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:tokenBeg)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:2))))(ExpressionStatement(MethodInvocation(SimpleName:skipLine)))(ExpressionStatement(Assignment(SimpleName:commentType)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.CommentType.LINE)))(ReturnStatement(QualifiedName:Token.COMMENT))))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:lookForSlash)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:tokenBeg)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:2))))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:lookForSlash)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:commentType)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.CommentType.JSDOC))))(Block(ExpressionStatement(Assignment(SimpleName:commentType)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.CommentType.BLOCK_COMMENT)))))(ForStatement(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChar))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:EOF_CHAR))(Block(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:cursor)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.COMMENT)))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:lookForSlash)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))(IfStatement(InfixExpression(SimpleName:c)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(IfStatement(SimpleName:lookForSlash)(Block(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))(ReturnStatement(QualifiedName:Token.COMMENT)))))(Block(ExpressionStatement(Assignment(SimpleName:lookForSlash)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:tokenEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:cursor)))))))))))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_DIV)))(Block(ReturnStatement(QualifiedName:Token.DIV))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_MOD)))(Block(ReturnStatement(QualifiedName:Token.MOD))))(SwitchCase(CharacterLiteral:<STR>))(ReturnStatement(QualifiedName:Token.BITNOT))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.ASSIGN_ADD)))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ReturnStatement(QualifiedName:Token.INC)))(Block(ReturnStatement(QualifiedName:Token.ADD)))))(SwitchCase(CharacterLiteral:<STR>))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.ASSIGN_SUB))))(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:dirtyLine))(Block(IfStatement(MethodInvocation(SimpleName:matchChar)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(SimpleName:markCommentStart)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(SimpleName:skipLine)))(ExpressionStatement(Assignment(SimpleName:commentType)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.CommentType.HTML)))(ReturnStatement(QualifiedName:Token.COMMENT))))))(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.DEC))))(Block(ExpressionStatement(Assignment(SimpleName:c)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Token.SUB))))))(ExpressionStatement(Assignment(SimpleName:dirtyLine)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ReturnStatement(SimpleName:c))(SwitchCase)(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(QualifiedName:Token.ERROR))))))))))