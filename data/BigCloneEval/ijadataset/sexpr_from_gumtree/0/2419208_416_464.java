(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:_startAll)(SingleVariableDeclaration(SimpleType(SimpleName:AWorkerThread))(SimpleName:current_))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:qReady))(SimpleName:isEmpty))(Block(ExpressionStatement(MethodInvocation(SimpleName:systemBecomesIdle)(METHOD_INVOCATION_ARGUMENTS(SimpleName:current_))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:wakeupThread.Q))(SimpleName:isEmpty)))(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:changed_)(BooleanLiteral:false)))(WhileStatement(InfixExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:wakeupThread.Q))(SimpleName:firstKey))(INFIX_EXPRESSION_OPERATOR:-)(MethodInvocation(SimpleName:_getTime)))(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:timeScaleReciprocal))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Object))(VariableDeclarationFragment(SimpleName:o_)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:wakeupThread.Q))(SimpleName:dequeue))))(IfStatement(SimpleName:logenabled)(Block(IfStatement(InfixExpression(SimpleName:tf)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(ExpressionStatement(MethodInvocation(SimpleName:_openlog))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tf))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:wakeupThread.Q))(SimpleName:getLength))(StringLiteral:<STR>))))(SimpleName:toCharArray)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tf))(SimpleName:flush))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e_))(Block)))))(ExpressionStatement(Assignment(SimpleName:changed_)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(IfStatement(InstanceofExpression(SimpleName:o_)(SimpleType(SimpleName:Task)))(Block(ExpressionStatement(MethodInvocation(SimpleName:newTask)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:Task))(SimpleName:o_))(SimpleName:current_)))))(ExpressionStatement(MethodInvocation(SimpleName:newTask)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Task))(SimpleName:createNotify)(METHOD_INVOCATION_ARGUMENTS(SimpleName:o_)))(SimpleName:current_)))))(IfStatement(InfixExpression(InfixExpression(SimpleName:current_)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(QualifiedName:current_.nextTask)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral)))(Block(IfStatement(InfixExpression(QualifiedName:current_.mainContext)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:getWorkforce)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:drcl.Debug))(SimpleName:systemFatalError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))))(ExpressionStatement(Assignment(QualifiedName:current_.mainContext)(ASSIGNMENT_OPERATOR:=)(QualifiedName:current_.nextTask)))(ExpressionStatement(Assignment(QualifiedName:current_.nextTask)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(ExpressionStatement(Assignment(SimpleName:current_)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))))))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:timeScaleReciprocal)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0.0))(INFIX_EXPRESSION_OPERATOR:&&)(SimpleName:changed_))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:wakeupThread.Q))(SimpleName:isEmpty))))(ExpressionStatement(MethodInvocation(SimpleName:triggerWakeupThread))))))))(VariableDeclarationStatement(SimpleType(SimpleName:Task))(VariableDeclarationFragment(SimpleName:task_)(NullLiteral)))(IfStatement(InfixExpression(SimpleName:current_)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:task_)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getTask)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(QualifiedName:current_.mainContext)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))))))(IfStatement(InfixExpression(SimpleName:task_)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(ExpressionStatement(Assignment(QualifiedName:current_.mainContext)(ASSIGNMENT_OPERATOR:=)(SimpleName:task_))))))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:task_)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getTask)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:true)))))(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:AWorkerThread))(VariableDeclarationFragment(SimpleName:t_)(MethodInvocation(SimpleName:grabOne))))(IfStatement(InfixExpression(SimpleName:debug)(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(SimpleName:isDebugEnabledAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:Debug_THREAD))))(ExpressionStatement(MethodInvocation(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(SimpleName:Debug_THREAD)(NullLiteral)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:task_)(StringLiteral:<STR>)(SimpleName:t_))))))(SynchronizedStatement(SimpleName:t_)(Block(ExpressionStatement(Assignment(QualifiedName:t_.mainContext)(ASSIGNMENT_OPERATOR:=)(SimpleName:task_)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:t_))(SimpleName:start)))))))(IfStatement(InfixExpression(SimpleName:state)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:State_INACTIVE))(Block(ExpressionStatement(MethodInvocation(SimpleName:setState)(METHOD_INVOCATION_ARGUMENTS(SimpleName:State_RUNNING))))(ExpressionStatement(MethodInvocation(SimpleName:adjustTime)))))))))