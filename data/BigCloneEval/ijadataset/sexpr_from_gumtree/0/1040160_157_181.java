(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(SimpleType(SimpleName:Object))(SimpleName:applyBinary)(SingleVariableDeclaration(SimpleType(SimpleName:ParseElements))(SimpleName:pe))(SimpleType(QualifiedName:com.daffodilwoods.database.resource.DException))(Block(IfStatement(InfixExpression(SimpleName:comparableRules)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(ReturnStatement(QualifiedName:pe.parseException)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:low)(NumberLiteral:0))(VariableDeclarationFragment(SimpleName:high)(InfixExpression(QualifiedName:comparableRules.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(WhileStatement(InfixExpression(SimpleName:low)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:high))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:mid)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:low)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:high)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(SimpleType(SimpleName:ProductionRules))(VariableDeclarationFragment(SimpleName:object)(CastExpression(SimpleType(SimpleName:ProductionRules))(ArrayAccess(SimpleName:comparableRules)(SimpleName:mid)))))(VariableDeclarationStatement(SimpleType(SimpleName:Object))(VariableDeclarationFragment(SimpleName:obj)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:object))(SimpleName:parse)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pe)))))(IfStatement(InstanceofExpression(SimpleName:obj)(SimpleType(SimpleName:ParseException)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:ParseException))(VariableDeclarationFragment(SimpleName:parseException)(CastExpression(SimpleType(SimpleName:ParseException))(SimpleName:obj))))(IfStatement(InfixExpression(QualifiedName:parseException.returnType)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:2))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Object))(VariableDeclarationFragment(SimpleName:o)(MethodInvocation(SimpleName:specialHandling)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:mid)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))(InfixExpression(SimpleName:mid)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))(SimpleName:pe)(SimpleName:low)(SimpleName:high)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(ParenthesizedExpression(InstanceofExpression(SimpleName:o)(SimpleType(SimpleName:ParseException)))))(ReturnStatement(SimpleName:o)))(ExpressionStatement(Assignment(SimpleName:parseException)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:ParseException))(SimpleName:o))))))(IfStatement(InfixExpression(QualifiedName:parseException.returnType)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(ExpressionStatement(Assignment(SimpleName:high)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:mid)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(IfStatement(InfixExpression(QualifiedName:parseException.returnType)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(ExpressionStatement(Assignment(SimpleName:low)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:mid)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(ReturnStatement(SimpleName:obj)))))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:object.recursiveflag))(ReturnStatement(SimpleName:obj))(Block(ExpressionStatement(Assignment(QualifiedName:pe.recursiveObject)(ASSIGNMENT_OPERATOR:=)(SimpleName:obj)))(ExpressionStatement(Assignment(QualifiedName:pe.recursionState)(ASSIGNMENT_OPERATOR:=)(SimpleName:nameOfRule)))(ReturnStatement(MethodInvocation(SimpleName:parseForRecusriveRules)(METHOD_INVOCATION_ARGUMENTS(SimpleName:obj)(SimpleName:pe))))))))))(ReturnStatement(QualifiedName:pe.parseException))))))