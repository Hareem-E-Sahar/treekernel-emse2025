(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:long)(SimpleName:computeMaximumBufferingFactorWithoutAgendaOverlap)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:DAF))(SimpleName:daf))(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:QoSExpectations))(SimpleName:qos))(SingleVariableDeclaration(Modifier:final)(PrimitiveType:long)(SimpleName:maxBFactorSoFar))(SimpleType(SimpleName:OptimizationException))(SimpleType(SimpleName:AgendaException))(SimpleType(SimpleName:WhenSchedulerException))(SimpleType(SimpleName:SchemaMetadataException))(SimpleType(SimpleName:TypeMappingException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Agenda))(VariableDeclarationFragment(SimpleName:agenda)(NullLiteral)))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:lowerBeta)(NumberLiteral:1)))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:upperBeta)(SimpleName:maxBFactorSoFar)))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:beta)))(VariableDeclarationStatement(Modifier:final)(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:alpha_bms)(CastExpression(PrimitiveType:int)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Agenda))(SimpleName:msToBms_RoundUp)(METHOD_INVOCATION_ARGUMENTS(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:qos))(SimpleName:getMaxAcquisitionInterval))))))))(DoStatement(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(FieldAccess(ThisExpression)(SimpleName:allowDiscontinuousSensing)))(Block(ExpressionStatement(Assignment(SimpleName:beta)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:lowerBeta)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:upperBeta)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2)))))(Block(ExpressionStatement(Assignment(SimpleName:beta)(ASSIGNMENT_OPERATOR:=)(SimpleName:upperBeta)))))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:agenda)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:Agenda))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:qos))(SimpleName:getMaxAcquisitionInterval))(SimpleName:beta)(SimpleName:daf)(SimpleName:costParams)(StringLiteral:<STR>)(SimpleName:allowDiscontinuousSensing))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(InfixExpression(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:agenda))(SimpleName:getLength_bms)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Agenda.INCLUDE_SLEEP)))(StringLiteral:<STR>)(InfixExpression(SimpleName:alpha_bms)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:beta)))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:beta)))))(ExpressionStatement(Assignment(SimpleName:lowerBeta)(ASSIGNMENT_OPERATOR:=)(SimpleName:beta))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:AgendaLengthException))(SimpleName:e))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(FieldAccess(ThisExpression)(SimpleName:allowDiscontinuousSensing)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:msg)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:warn)(METHOD_INVOCATION_ARGUMENTS(SimpleName:msg))))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:WhenSchedulerException))(SimpleName:msg)))))(ExpressionStatement(Assignment(SimpleName:upperBeta)(ASSIGNMENT_OPERATOR:=)(SimpleName:beta)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:trace)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:beta)))))(IfStatement(InfixExpression(SimpleName:beta)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:1))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:msg)(StringLiteral:<STR>)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:warn)(METHOD_INVOCATION_ARGUMENTS(SimpleName:msg))))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:WhenSchedulerException))(SimpleName:msg)))))(ContinueStatement)))))(InfixExpression(InfixExpression(SimpleName:lowerBeta)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:upperBeta)))(ReturnStatement(SimpleName:lowerBeta))))))