(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:process)(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:String))(Dimension))(SimpleName:args))(Block(TryStatement(Block(IfStatement(SimpleName:helpOpt)(Block(ExpressionStatement(MethodInvocation(SimpleName:printUsage)))(ReturnStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:type)(SimpleName:typeOpt)))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:type)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:type))(SimpleName:equalsIgnoreCase)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:type))(SimpleName:equalsIgnoreCase)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:type))))))(IfStatement(InfixExpression(QualifiedName:fileArgsOpt.length)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(IfStatement(InfixExpression(SimpleName:type)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:type)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>))))))(Block(IfStatement(InfixExpression(SimpleName:type)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(SimpleName:fileArgsOpt)(NumberLiteral:0)))(SimpleName:toLowerCase)))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:type)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>))))(Block(ExpressionStatement(Assignment(SimpleName:type)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>)))))))))(IfStatement(SimpleName:analyzeOpt)(Block(VariableDeclarationStatement(SimpleType(SimpleName:HtmlAnalyzer))(VariableDeclarationFragment(SimpleName:analyzer)(ClassInstanceCreation(SimpleType(SimpleName:HtmlAnalyzer))(ConditionalExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:HtmlCompressor.JS_COMPRESSOR_CLOSURE))(SimpleName:equalsIgnoreCase)(METHOD_INVOCATION_ARGUMENTS(SimpleName:jsCompressorOpt)))(QualifiedName:HtmlCompressor.JS_COMPRESSOR_CLOSURE)(QualifiedName:HtmlCompressor.JS_COMPRESSOR_YUI)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:analyzer))(SimpleName:analyze)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:readResource)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:buildReader)(METHOD_INVOCATION_ARGUMENTS(ConditionalExpression(InfixExpression(QualifiedName:fileArgsOpt.length)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(ArrayAccess(SimpleName:fileArgsOpt)(NumberLiteral:0))(NullLiteral))))))))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Compressor))(VariableDeclarationFragment(SimpleName:compressor)(ConditionalExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:type))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(MethodInvocation(SimpleName:createXmlCompressor))(MethodInvocation(SimpleName:createHtmlCompressor)))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:String))(SimpleType(SimpleName:String)))(VariableDeclarationFragment(SimpleName:ioMap)(MethodInvocation(SimpleName:buildInputOutputMap))))(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName:Map.Entry))(SimpleType(SimpleName:String))(SimpleType(SimpleName:String)))(SimpleName:entry))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ioMap))(SimpleName:entrySet))(Block(ExpressionStatement(MethodInvocation(SimpleName:writeResource)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:compressor))(SimpleName:compress)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:readResource)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:buildReader)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getKey))))))))(MethodInvocation(SimpleName:buildWriter)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getValue))))))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:NoClassDefFoundError))(SimpleName:e))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:HtmlCompressor.JS_COMPRESSOR_CLOSURE))(SimpleName:equalsIgnoreCase)(METHOD_INVOCATION_ARGUMENTS(SimpleName:jsCompressorOpt)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:OptionException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage))))))(ExpressionStatement(MethodInvocation(SimpleName:printUsage)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IllegalArgumentException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage)))))))))))))