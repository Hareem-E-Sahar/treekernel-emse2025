(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:profile)(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:JPLFastaReader))(VariableDeclarationFragment(SimpleName:fastaScanner)(ClassInstanceCreation(SimpleType(SimpleName:JPLFastaReader))(SimpleName:fastaFile))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:nextSequence)(StringLiteral:<STR>)))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fastaScanner))(SimpleName:hasNext))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:nextSequence)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fastaScanner))(SimpleName:nextFastaSequence))))(VariableDeclarationStatement(SimpleType(SimpleName:JPLIAASequence))(VariableDeclarationFragment(SimpleName:sequence)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(QualifiedName:JPLAASequence.Builder))(SimpleName:nextSequence)))(SimpleName:build))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:List))(SimpleType(SimpleName:JPLIAASequence)))(VariableDeclarationFragment(SimpleName:peptides)(NullLiteral)))(IfStatement(InfixExpression(SimpleName:trypsin)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:trypsin))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(SimpleName:sequence))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:List))(SimpleType(SimpleName:JPLIAASequence)))(VariableDeclarationFragment(SimpleName:trypticPeptides)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:trypsin))(SimpleName:getDigests))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:JPLIAASequence))(SimpleName:trypPepSeq))(SimpleName:trypticPeptides)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enzyme))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(SimpleName:trypPepSeq))))(ExpressionStatement(Assignment(SimpleName:peptides)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enzyme))(SimpleName:getDigests))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:JPLIAASequence))(SimpleName:pepSeq))(SimpleName:peptides)(Block(ExpressionStatement(MethodInvocation(SimpleName:treatSeq)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pepSeq)))))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enzyme))(SimpleName:digest)(METHOD_INVOCATION_ARGUMENTS(SimpleName:sequence))))(ExpressionStatement(Assignment(SimpleName:peptides)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enzyme))(SimpleName:getDigests))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:JPLIAASequence))(SimpleName:pepSeq))(SimpleName:peptides)(Block(ExpressionStatement(MethodInvocation(SimpleName:treatSeq)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pepSeq)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:JPLAASequenceBuilderException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:nextSequence)(StringLiteral:<STR>)))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:JPLAAByteUndefinedException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:nextSequence)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage))(StringLiteral:<STR>)(StringLiteral:<STR>)))))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e1))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e1))(SimpleName:getMessage))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:fastaFile)(StringLiteral:<STR>))))))))))))