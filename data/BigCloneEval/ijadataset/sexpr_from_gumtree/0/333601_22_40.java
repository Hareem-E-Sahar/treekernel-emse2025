(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:PhoneticLexiconEntry))(SimpleName:getEntry)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:lemma))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:lower)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:upper)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entries))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:index)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:lower)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:upper)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(SimpleType(SimpleName:PhoneticLexiconEntry))(VariableDeclarationFragment(SimpleName:entry)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entries))(SimpleName:elementAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:index)))))(WhileStatement(ParenthesizedExpression(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:entry.lemma))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lemma)))))(INFIX_EXPRESSION_OPERATOR:&&)(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:1)))))(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:entry.lemma))(SimpleName:compareTo)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lemma)))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:upper)(ASSIGNMENT_OPERATOR:=)(SimpleName:index))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:entry.lemma))(SimpleName:compareTo)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lemma)))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:lower)(ASSIGNMENT_OPERATOR:=)(SimpleName:index))))))(ExpressionStatement(Assignment(SimpleName:index)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:lower)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:upper)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(ExpressionStatement(Assignment(SimpleName:entry)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entries))(SimpleName:elementAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:index)))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:entry.lemma))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lemma)))(Block(ReturnStatement(SimpleName:entry))))(ReturnStatement(NullLiteral))))))