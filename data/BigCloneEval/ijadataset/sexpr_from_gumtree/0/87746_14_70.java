(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(SimpleType(SimpleName:String))(SimpleName:perform)(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:eingabeende)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:ende)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:falscheeingabe)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:summe_fvonx)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:abbildung_fvonxfuerk)(NumberLiteral:0)))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:koeff_zu_exponent)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(SimpleName:hoechster_exponent)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:hoechster_exponent))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:koeff_zu_exponent)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))))(TryStatement(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:grenze1)(MethodInvocation(SimpleName:readFloat))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:grenze2)(MethodInvocation(SimpleName:readFloat))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:untere_grenze)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:min)(METHOD_INVOCATION_ARGUMENTS(SimpleName:grenze1)(SimpleName:grenze2)))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:obere_grenze)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:max)(METHOD_INVOCATION_ARGUMENTS(SimpleName:grenze1)(SimpleName:grenze2)))))(IfStatement(InfixExpression(SimpleName:untere_grenze)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:obere_grenze))(Block(ExpressionStatement(Assignment(SimpleName:ende)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(MethodInvocation(SimpleName:liesZuende)))(ReturnStatement(ParenthesizedExpression(StringLiteral:<STR>))))(Block(DoStatement(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:gelesener_koeffizient)(MethodInvocation(SimpleName:readInt))))(IfStatement(InfixExpression(SimpleName:gelesener_koeffizient)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:datensatzende))(ExpressionStatement(Assignment(SimpleName:eingabeende)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:gelesener_exponent)(MethodInvocation(SimpleName:readInt))))(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:gelesener_exponent)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0)))(INFIX_EXPRESSION_OPERATOR:||)(ParenthesizedExpression(InfixExpression(SimpleName:gelesener_exponent)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:hoechster_exponent)))(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName:koeff_zu_exponent)(SimpleName:gelesener_exponent))(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0))))(Block(ExpressionStatement(Assignment(SimpleName:falscheeingabe)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(IfStatement(InfixExpression(SimpleName:gelesener_exponent)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:datensatzende))(ExpressionStatement(Assignment(SimpleName:eingabeende)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:koeff_zu_exponent)(SimpleName:gelesener_exponent))(ASSIGNMENT_OPERATOR:=)(SimpleName:gelesener_koeffizient))))))))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:eingabeende)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(ParenthesizedExpression(InfixExpression(SimpleName:falscheeingabe)(INFIX_EXPRESSION_OPERATOR:||)(SimpleName:ende))))(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:n)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:round)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:obere_grenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:untere_grenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:teilintervallbreite))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:k)(NumberLiteral:1)))(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:n))(PostfixExpression(SimpleName:k)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:xk_fuer_kminus1)(InfixExpression(SimpleName:untere_grenze)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:obere_grenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:untere_grenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n))(INFIX_EXPRESSION_OPERATOR:*)(ParenthesizedExpression(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:xk_fuer_k)(InfixExpression(SimpleName:untere_grenze)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:obere_grenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:untere_grenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:k))))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:x_fuer_k)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:xk_fuer_kminus1)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:xk_fuer_k)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(ExpressionStatement(Assignment(SimpleName:abbildung_fvonxfuerk)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:exp)(NumberLiteral:0)))(InfixExpression(SimpleName:exp)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:hoechster_exponent))(PostfixExpression(SimpleName:exp)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(SimpleName:abbildung_fvonxfuerk)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(ArrayAccess(SimpleName:koeff_zu_exponent)(SimpleName:exp))(INFIX_EXPRESSION_OPERATOR:*)(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:pow)(METHOD_INVOCATION_ARGUMENTS(SimpleName:x_fuer_k)(SimpleName:exp)))))))))(ExpressionStatement(Assignment(SimpleName:summe_fvonx)(ASSIGNMENT_OPERATOR:+=)(SimpleName:abbildung_fvonxfuerk)))))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:ergebnis)(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:obere_grenze)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:untere_grenze)))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:n))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:summe_fvonx))))(ExpressionStatement(MethodInvocation(SimpleName:Fixedln)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ergebnis))))(ReturnStatement(ParenthesizedExpression(SimpleName:Ausgabe))))(Block(IfStatement(SimpleName:falscheeingabe)(Block(ReturnStatement(ParenthesizedExpression(StringLiteral:<STR>))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:EprogException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(SimpleName:liesZuende)))(ReturnStatement(ParenthesizedExpression(StringLiteral:<STR>))))))(ReturnStatement(ParenthesizedExpression(StringLiteral:<STR>)))))))