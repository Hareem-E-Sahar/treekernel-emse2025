(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(SimpleType(SimpleName:String))(SimpleName:auxFuncions)(SingleVariableDeclaration(SimpleType(SimpleName:FiniteAutomata))(SimpleName:fa))(SingleVariableDeclaration(SimpleType(SimpleName:Options))(SimpleName:options))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:nextState)))(SwitchStatement(QualifiedName:options.scannerTable)(SwitchCase(SimpleName:FULL))(ExpressionStatement(Assignment(SimpleName:nextState)(ASSIGNMENT_OPERATOR:=)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))))(BreakStatement)(SwitchCase(SimpleName:COMPACT))(ExpressionStatement(Assignment(SimpleName:nextState)(ASSIGNMENT_OPERATOR:=)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))))(BreakStatement)(SwitchCase(SimpleName:HARDCODE))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:List))(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:Character))(SimpleType(SimpleName:Integer))))(VariableDeclarationFragment(SimpleName:trans)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fa))(SimpleName:getTransitions))))(VariableDeclarationStatement(SimpleType(SimpleName:StringBuffer))(VariableDeclarationFragment(SimpleName:casesState)(ClassInstanceCreation(SimpleType(SimpleName:StringBuffer)))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:trans))(SimpleName:size)))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:Character))(SimpleType(SimpleName:Integer)))(VariableDeclarationFragment(SimpleName:m)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:trans))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(SimpleName:i)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(ContinueStatement))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:casesState))(SimpleName:append)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:i)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)))))(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName:Map.Entry))(SimpleType(SimpleName:Character))(SimpleType(SimpleName:Integer)))(SimpleName:entry))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:entrySet))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Character))(VariableDeclarationFragment(SimpleName:ch)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getKey))))(VariableDeclarationStatement(SimpleType(SimpleName:Integer))(VariableDeclarationFragment(SimpleName:it)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getValue))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:casesState))(SimpleName:append)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(CastExpression(PrimitiveType:int)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch))(SimpleName:charValue))))(StringLiteral:<STR>)(SimpleName:it)(StringLiteral:<STR>)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:casesState))(SimpleName:append)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)))))))(ExpressionStatement(Assignment(SimpleName:nextState)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:casesState))(SimpleName:toString))(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)))))(BreakStatement)(SwitchCase)(ExpressionStatement(Assignment(SimpleName:nextState)(ASSIGNMENT_OPERATOR:=)(NullLiteral))))(ReturnStatement(InfixExpression(SimpleName:nextState)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(ParenthesizedExpression(ConditionalExpression(SimpleName:lookup)(InfixExpression(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(ConditionalExpression(SimpleName:sensitive)(StringLiteral:<STR>)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>))(StringLiteral:<STR>)))(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)(StringLiteral:<STR>)))))))