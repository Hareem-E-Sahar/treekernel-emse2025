(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(SimpleType(SimpleName:String))(SimpleName:addSwaRefAttachment)(SingleVariableDeclaration(SimpleType(SimpleName:DataHandler))(SimpleName:_data))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:contentType)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:_data))(SimpleName:getContentType))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:DescriptionDataSource.CONTENT_TYPE))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:contentType))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:contentType))))))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:_data))(SimpleName:getInputStream)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOExceptionWrapper))(SimpleName:e))))))(IfStatement(InfixExpression(SimpleName:in)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:entry)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(PostfixExpression(SimpleName:counter)(POSTFIX_EXPRESSION_OPERATOR:++)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:name)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:_data))(SimpleName:getName))))(IfStatement(InfixExpression(SimpleName:name)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:entry)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:name))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:zipEntryName)(InfixExpression(SimpleName:REQ_DESCRIPTION_ENTRY_PREFIX)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:entry)(SimpleName:REQ_DESCRIPTION_ENTRY_SUFFIX))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:zipEntry)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(SimpleName:zipEntryName))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zipEntry))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IoHelper))(SimpleName:copy)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)(SimpleName:zout))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:close)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeEntry))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOExceptionWrapper))(SimpleName:e))))))(ReturnStatement(SimpleName:zipEntryName))))))