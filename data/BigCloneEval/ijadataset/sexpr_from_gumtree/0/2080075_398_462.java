(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:eval)(SingleVariableDeclaration(SimpleType(SimpleName:MonotonicTextLabels))(SimpleName:labels))(SingleVariableDeclaration(SimpleType(SimpleName:TextBase))(SimpleName:textBase))(Block(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:start)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:currentTimeMillis))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(StringLiteral:<STR>))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:keyword)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:defineDictionary)(METHOD_INVOCATION_ARGUMENTS(SimpleName:type)(SimpleName:wordSet)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(StringLiteral:<STR>))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:keyword)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:declareType)(METHOD_INVOCATION_ARGUMENTS(SimpleName:type)))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:PROVIDE))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:setAnnotatedBy)(METHOD_INVOCATION_ARGUMENTS(SimpleName:annotationType)))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:REQUIRE))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:require)(METHOD_INVOCATION_ARGUMENTS(SimpleName:annotationType)(SimpleName:fileToLoad)))))(Block(VariableDeclarationStatement(SimpleType(QualifiedName:Span.Looper))(VariableDeclarationFragment(SimpleName:input)(NullLiteral)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(StringLiteral:<STR>))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:startType)))(Block(ExpressionStatement(Assignment(SimpleName:input)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:textBase))(SimpleName:documentSpanIterator)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:isType)(METHOD_INVOCATION_ARGUMENTS(SimpleName:startType)))(Block(ExpressionStatement(Assignment(SimpleName:input)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:instanceIterator)(METHOD_INVOCATION_ARGUMENTS(SimpleName:startType))))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalStateException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:startType)(StringLiteral:<STR>)))))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:MIXUP))(Block(ForStatement(VariableDeclarationExpression(SimpleType(QualifiedName:Span.Looper))(VariableDeclarationFragment(SimpleName:i)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mixupExpr))(SimpleName:extract)(METHOD_INVOCATION_ARGUMENTS(SimpleName:labels)(SimpleName:input)))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Span))(VariableDeclarationFragment(SimpleName:span)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:nextSpan))))(ExpressionStatement(MethodInvocation(SimpleName:extendLabels)(METHOD_INVOCATION_ARGUMENTS(SimpleName:labels)(SimpleName:span))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(StringLiteral:<STR>))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:keyword)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:labels))(SimpleName:declareType)(METHOD_INVOCATION_ARGUMENTS(SimpleName:type)))))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:FILTER))(Block(VariableDeclarationStatement(SimpleType(SimpleName:TreeSet))(VariableDeclarationFragment(SimpleName:accum)(ClassInstanceCreation(SimpleType(SimpleName:TreeSet)))))(ForStatement(VariableDeclarationExpression(SimpleType(QualifiedName:Span.Looper))(VariableDeclarationFragment(SimpleName:i)(SimpleName:input)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Span))(VariableDeclarationFragment(SimpleName:span)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:nextSpan))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:hasExtraction)(METHOD_INVOCATION_ARGUMENTS(SimpleName:mixupExpr)(SimpleName:labels)(SimpleName:span))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:accum))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:span))))))))(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName:Iterator))(VariableDeclarationFragment(SimpleName:i)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:accum))(SimpleName:iterator))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(Block(ExpressionStatement(MethodInvocation(SimpleName:extendLabels)(METHOD_INVOCATION_ARGUMENTS(SimpleName:labels)(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Span))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:next))))))))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:TRIE))(Block(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Span))(VariableDeclarationFragment(SimpleName:span)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:nextSpan))))(VariableDeclarationStatement(SimpleType(QualifiedName:Span.Looper))(VariableDeclarationFragment(SimpleName:output)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:trie))(SimpleName:lookup)(METHOD_INVOCATION_ARGUMENTS(SimpleName:span)))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:output))(SimpleName:hasNext))(Block(ExpressionStatement(MethodInvocation(SimpleName:extendLabels)(METHOD_INVOCATION_ARGUMENTS(SimpleName:labels)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:output))(SimpleName:nextSpan))))))))))(IfStatement(InfixExpression(SimpleName:statementType)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:REGEX))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Pattern))(VariableDeclarationFragment(SimpleName:pattern)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Pattern))(SimpleName:compile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:regex)))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Span))(VariableDeclarationFragment(SimpleName:span)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:nextSpan))))(VariableDeclarationStatement(SimpleType(SimpleName:Matcher))(VariableDeclarationFragment(SimpleName:matcher)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pattern))(SimpleName:matcher)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:span))(SimpleName:asString))))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:matcher))(SimpleName:find))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:Span))(VariableDeclarationFragment(SimpleName:subspan)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:span))(SimpleName:charIndexProperSubSpan)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:matcher))(SimpleName:start)(METHOD_INVOCATION_ARGUMENTS(SimpleName:regexGroup)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:matcher))(SimpleName:end)(METHOD_INVOCATION_ARGUMENTS(SimpleName:regexGroup)))))))(ExpressionStatement(MethodInvocation(SimpleName:extendLabels)(METHOD_INVOCATION_ARGUMENTS(SimpleName:labels)(SimpleName:subspan)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IllegalArgumentException))(SimpleName:ex))(Block))))))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalStateException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:statementType))))))))))))))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:end)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:currentTimeMillis))))))))