(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:operate)(SingleVariableDeclaration(SimpleType(SimpleName:AChannelSelection))(SimpleName:ch1))(SingleVariableDeclaration(SimpleType(SimpleName:AChannelSelection))(SimpleName:ch2))(Block(VariableDeclarationStatement(SimpleType(SimpleName:MMArray))(VariableDeclarationFragment(SimpleName:s1)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch1))(SimpleName:getChannel)))(SimpleName:getSamples))))(VariableDeclarationStatement(SimpleType(SimpleName:MMArray))(VariableDeclarationFragment(SimpleName:s2)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch2))(SimpleName:getChannel)))(SimpleName:getSamples))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:o1)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch1))(SimpleName:getOffset))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:l1)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch1))(SimpleName:getLength))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ch1))(SimpleName:getChannel)))(SimpleName:markChange)))(SwitchStatement(SimpleName:operation)(SwitchCase(SimpleName:ADD))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AOToolkit))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s1)(SimpleName:s2)(SimpleName:o1)(SimpleName:l1))))(BreakStatement)(SwitchCase(SimpleName:SUBTRACT))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AOToolkit))(SimpleName:subtract)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s1)(SimpleName:s2)(SimpleName:o1)(SimpleName:l1))))(BreakStatement)(SwitchCase(SimpleName:MULTIPLY))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AOToolkit))(SimpleName:multiply)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s1)(SimpleName:s2)(SimpleName:o1)(SimpleName:l1))))(BreakStatement)(SwitchCase(SimpleName:DIVIDE))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AOToolkit))(SimpleName:divide)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s1)(SimpleName:s2)(SimpleName:o1)(SimpleName:l1))))(BreakStatement))))))