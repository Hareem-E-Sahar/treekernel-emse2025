(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:void)(SimpleName:crossValidation)(SingleVariableDeclaration(SimpleType(SimpleName:Problem))(SimpleName:prob))(SingleVariableDeclaration(SimpleType(SimpleName:Parameter))(SimpleName:param))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:nr_fold))(SingleVariableDeclaration(ArrayType(PrimitiveType:int)(Dimension))(SimpleName:target))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:fold_start)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(SimpleName:nr_fold)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:l)(QualifiedName:prob.l)))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:perm)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(SimpleName:l))))))(ForStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:l))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:perm)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(SimpleName:i))))(ForStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:l))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:j)(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:random))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:l)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:i)))))))(ExpressionStatement(MethodInvocation(SimpleName:swap)(METHOD_INVOCATION_ARGUMENTS(SimpleName:perm)(SimpleName:i)(SimpleName:j))))))(ForStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:nr_fold))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:fold_start)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:l))(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:nr_fold)))))(ForStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:nr_fold))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:begin)(ArrayAccess(SimpleName:fold_start)(SimpleName:i))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:end)(ArrayAccess(SimpleName:fold_start)(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:j))(VariableDeclarationFragment(SimpleName:k)))(VariableDeclarationStatement(SimpleType(SimpleName:Problem))(VariableDeclarationFragment(SimpleName:subprob)(ClassInstanceCreation(SimpleType(SimpleName:Problem)))))(ExpressionStatement(Assignment(QualifiedName:subprob.bias)(ASSIGNMENT_OPERATOR:=)(QualifiedName:prob.bias)))(ExpressionStatement(Assignment(QualifiedName:subprob.n)(ASSIGNMENT_OPERATOR:=)(QualifiedName:prob.n)))(ExpressionStatement(Assignment(QualifiedName:subprob.l)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:l)(INFIX_EXPRESSION_OPERATOR:-)(ParenthesizedExpression(InfixExpression(SimpleName:end)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:begin))))))(ExpressionStatement(Assignment(QualifiedName:subprob.x)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(SimpleType(SimpleName:FeatureNode))(Dimension(QualifiedName:subprob.l))(Dimension)))))(ExpressionStatement(Assignment(QualifiedName:subprob.y)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(QualifiedName:subprob.l))))))(ExpressionStatement(Assignment(SimpleName:k)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(Assignment(SimpleName:j)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(SimpleName:j)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:begin))(PostfixExpression(SimpleName:j)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(QualifiedName:subprob.x)(SimpleName:k))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(QualifiedName:prob.x)(ArrayAccess(SimpleName:perm)(SimpleName:j)))))(ExpressionStatement(Assignment(ArrayAccess(QualifiedName:subprob.y)(SimpleName:k))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(QualifiedName:prob.y)(ArrayAccess(SimpleName:perm)(SimpleName:j)))))(ExpressionStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:k)))))(ForStatement(Assignment(SimpleName:j)(ASSIGNMENT_OPERATOR:=)(SimpleName:end))(InfixExpression(SimpleName:j)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:l))(PostfixExpression(SimpleName:j)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(QualifiedName:subprob.x)(SimpleName:k))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(QualifiedName:prob.x)(ArrayAccess(SimpleName:perm)(SimpleName:j)))))(ExpressionStatement(Assignment(ArrayAccess(QualifiedName:subprob.y)(SimpleName:k))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(QualifiedName:prob.y)(ArrayAccess(SimpleName:perm)(SimpleName:j)))))(ExpressionStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:k)))))(VariableDeclarationStatement(SimpleType(SimpleName:Model))(VariableDeclarationFragment(SimpleName:submodel)(MethodInvocation(SimpleName:train)(METHOD_INVOCATION_ARGUMENTS(SimpleName:subprob)(SimpleName:param)))))(ForStatement(Assignment(SimpleName:j)(ASSIGNMENT_OPERATOR:=)(SimpleName:begin))(InfixExpression(SimpleName:j)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:end))(PostfixExpression(SimpleName:j)(POSTFIX_EXPRESSION_OPERATOR:++))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:target)(ArrayAccess(SimpleName:perm)(SimpleName:j)))(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:predict)(METHOD_INVOCATION_ARGUMENTS(SimpleName:submodel)(ArrayAccess(QualifiedName:prob.x)(ArrayAccess(SimpleName:perm)(SimpleName:j))))))))))))))