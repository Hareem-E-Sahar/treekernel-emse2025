(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:mutate)(SingleVariableDeclaration(SimpleType(SimpleName:Permutation))(SimpleName:tomutate))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:sl))(Block(IfStatement(InfixExpression(SimpleName:len)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:2))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tomutate))(SimpleName:swap)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)(NumberLiteral:1)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:from)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:rand))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:len)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:subsegmentlength)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(IfStatement(InfixExpression(SimpleName:sl)(INFIX_EXPRESSION_OPERATOR:==)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(ExpressionStatement(Assignment(SimpleName:subsegmentlength)(ASSIGNMENT_OPERATOR:=)(InfixExpression(NumberLiteral:2)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:rand))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:len)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:2)))))))(Block(IfStatement(InfixExpression(SimpleName:sl)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:2))(ExpressionStatement(Assignment(SimpleName:subsegmentlength)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:2)))(IfStatement(InfixExpression(SimpleName:sl)(INFIX_EXPRESSION_OPERATOR:>=)(SimpleName:len))(ExpressionStatement(Assignment(SimpleName:subsegmentlength)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:sl)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:subsegmentlength)(ASSIGNMENT_OPERATOR:=)(SimpleName:sl)))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:to)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:from)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:subsegmentlength)))(INFIX_EXPRESSION_OPERATOR:%)(SimpleName:len))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:elems)))(IfStatement(InfixExpression(SimpleName:from)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:to))(ExpressionStatement(Assignment(SimpleName:elems)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(SimpleName:to)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:from))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:elems)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(InfixExpression(SimpleName:to)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:len))(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:from))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:cut)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:from)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:rand))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:elems)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:2))))))(INFIX_EXPRESSION_OPERATOR:%)(SimpleName:len))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tomutate))(SimpleName:invert)(METHOD_INVOCATION_ARGUMENTS(SimpleName:from)(SimpleName:cut))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tomutate))(SimpleName:invert)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:cut)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:%)(SimpleName:len))(SimpleName:to))))))))