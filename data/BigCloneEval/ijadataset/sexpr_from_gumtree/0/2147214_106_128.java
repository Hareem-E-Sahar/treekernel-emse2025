(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(SimpleType(SimpleName:InputStream))(SimpleName:openStream)(SimpleType(SimpleName:LoadException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:is)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:file)(MethodInvocation(SimpleName:getResource))))(IfStatement(InfixExpression(MethodInvocation(SimpleName:getResourceType))(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:FILE))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:fd)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:file))))(ExpressionStatement(Assignment(SimpleName:is)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:MeteredStream))(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:fd)))))(ExpressionStatement(MethodInvocation(SimpleName:setLength)(METHOD_INVOCATION_ARGUMENTS(CastExpression(PrimitiveType:int)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fd))(SimpleName:length)))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:ioe))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:LoadException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ioe))(SimpleName:getMessage)))(QualifiedName:LoadException.CDTPARSE)))))))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(QualifiedName:java.net.URL))(VariableDeclarationFragment(SimpleName:url)(ClassInstanceCreation(SimpleType(QualifiedName:java.net.URL))(SimpleName:file))))(VariableDeclarationStatement(SimpleType(QualifiedName:java.net.URLConnection))(VariableDeclarationFragment(SimpleName:conn)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openConnection))))(ExpressionStatement(Assignment(SimpleName:is)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:MeteredStream))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:conn))(SimpleName:getInputStream)))))(ExpressionStatement(MethodInvocation(SimpleName:setLength)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:conn))(SimpleName:getContentLength))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:ioe2))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:LoadException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ioe2))(SimpleName:getMessage)))(QualifiedName:LoadException.CDTPARSE))))))))(ReturnStatement(SimpleName:is))))))