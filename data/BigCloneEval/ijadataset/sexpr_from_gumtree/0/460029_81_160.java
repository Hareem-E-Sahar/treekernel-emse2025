(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(PrimitiveType:void)(SimpleName:scan)(SimpleType(SimpleName:BadLocationException))(Block(WhileStatement(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:EOF))(Block(IfStatement(SimpleName:slc)(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(Assignment(SimpleName:slc)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))))(IfStatement(InfixExpression(SimpleName:mlc)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(PostfixExpression(SimpleName:mlc)(POSTFIX_EXPRESSION_OPERATOR:--))))(IfStatement(InfixExpression(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>)))(Block(ExpressionStatement(PostfixExpression(SimpleName:mlc)(POSTFIX_EXPRESSION_OPERATOR:++)))))))(IfStatement(SimpleName:str)(Block(IfStatement(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:str)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))))(IfStatement(SimpleName:chr)(Block(IfStatement(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:chr)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))))(Block(SwitchStatement(SimpleName:ch)(SwitchCase(CharacterLiteral:<STR>))(IfStatement(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:slc)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(IfStatement(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(PostfixExpression(SimpleName:mlc)(POSTFIX_EXPRESSION_OPERATOR:++)))))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:str)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(ExpressionStatement(Assignment(SimpleName:chr)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(IfStatement(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:ilc)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(IfStatement(InfixExpression(SimpleName:last)(INFIX_EXPRESSION_OPERATOR:==)(CharacterLiteral:<STR>))(Block(ExpressionStatement(Assignment(SimpleName:semActEnd)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:curPos)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ExpressionStatement(Assignment(SimpleName:javaStartPos)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:addSemanticRegion)(METHOD_INVOCATION_ARGUMENTS(SimpleName:semActBegin)(InfixExpression(SimpleName:semActEnd)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:semActBegin))(SimpleName:javaStartPos)))))(ExpressionStatement(Assignment(SimpleName:sa)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:ilc)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))(BreakStatement)(SwitchCase(CharacterLiteral:<STR>))(IfStatement(SimpleName:sa)(Block(ExpressionStatement(Assignment(SimpleName:semActEnd)(ASSIGNMENT_OPERATOR:=)(SimpleName:curPos)))(ExpressionStatement(Assignment(SimpleName:javaStartPos)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:addSemanticRegion)(METHOD_INVOCATION_ARGUMENTS(SimpleName:semActBegin)(InfixExpression(SimpleName:semActEnd)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:semActBegin))(SimpleName:javaStartPos)))))(ExpressionStatement(Assignment(SimpleName:openpar)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(SwitchCase)(IfStatement(InfixExpression(SimpleName:ilc)(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:sa)))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Character))(SimpleName:isWhitespace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ch)))(Block(BreakStatement))(Block(ExpressionStatement(Assignment(SimpleName:semActBegin)(ASSIGNMENT_OPERATOR:=)(SimpleName:curPos)))(ExpressionStatement(Assignment(SimpleName:sa)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))))(IfStatement(SimpleName:openpar)(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Character))(SimpleName:isWhitespace)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ch)))(Block(BreakStatement)))(ExpressionStatement(Assignment(SimpleName:semActBegin)(ASSIGNMENT_OPERATOR:=)(SimpleName:curPos)))(ExpressionStatement(Assignment(SimpleName:openpar)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))(BreakStatement)))))))(ExpressionStatement(Assignment(SimpleName:last)(ASSIGNMENT_OPERATOR:=)(SimpleName:ch)))(ExpressionStatement(MethodInvocation(SimpleName:nextCh)))))))))