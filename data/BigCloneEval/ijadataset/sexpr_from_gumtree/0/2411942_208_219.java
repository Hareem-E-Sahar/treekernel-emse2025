(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:PlaylistSearchAlgorithm)))(SimpleName:initializeSearchAlgorithms)(SingleVariableDeclaration(SimpleType(SimpleName:PlaylistCriteria))(SimpleName:criteria))(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:SongTrack)))(SimpleName:musicTitles))(SingleVariableDeclaration(SimpleType(SimpleName:SongTrackEntityManager))(SimpleName:stdbm2))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:targetCost))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:PlaylistSearchAlgorithm)))(VariableDeclarationFragment(SimpleName:algorithms)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:PlaylistSearchAlgorithm))))))(TryStatement(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:Class))(WildcardType))(SimpleName:a))(SimpleName:searchAlgorithmsToRun)(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Constructor))(WildcardType))(VariableDeclarationFragment(SimpleName:algorithmConstructor)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:a))(SimpleName:getConstructor)(METHOD_INVOCATION_ARGUMENTS(TypeLiteral(SimpleType(SimpleName:PlaylistCriteria)))(TypeLiteral(SimpleType(SimpleName:ArrayList)))(TypeLiteral(SimpleType(SimpleName:SongTrackEntityManager)))(TypeLiteral(SimpleType(SimpleName:Double)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:algorithms))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:PlaylistSearchAlgorithm))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:algorithmConstructor))(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:criteria)(SimpleName:musicTitles)(SimpleName:stdbm)(SimpleName:targetCost))))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:exception))(Block(ExpressionStatement(MethodInvocation(SimpleName:reportError)(METHOD_INVOCATION_ARGUMENTS(SimpleName:exception)(BooleanLiteral:true)))))))(ReturnStatement(SimpleName:algorithms))))))