(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:int)(SimpleName:fibonacci)(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:num))(Block(IfStatement(InfixExpression(SimpleName:num)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ReturnStatement(NumberLiteral:0)))(IfStatement(InfixExpression(SimpleName:num)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:1))(Block(ReturnStatement(NumberLiteral:1)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:processor))(SimpleName:getAlgData)))(SimpleName:setRecursiveCalls)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:processor))(SimpleName:getAlgData)))(SimpleName:getRecursiveCalls))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:2)))))(ReturnStatement(InfixExpression(MethodInvocation(SimpleName:fibonacci)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:num)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(SimpleName:fibonacci)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:num)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:2)))))))))))))