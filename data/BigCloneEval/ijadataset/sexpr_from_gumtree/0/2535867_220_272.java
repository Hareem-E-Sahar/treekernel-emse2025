(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:initSerializerFiles)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:fileName))(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:HashSet))(SimpleType(SimpleName:String)))(SimpleName:fileList))(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName:HashMap))(SimpleType(SimpleName:Class))(SimpleType(SimpleName:Class)))(SimpleName:classMap))(SingleVariableDeclaration(SimpleType(SimpleName:Class))(SimpleName:type))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:ClassLoader))(VariableDeclarationFragment(SimpleName:classLoader)(MethodInvocation(SimpleName:getClassLoader))))(IfStatement(InfixExpression(SimpleName:classLoader)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:Enumeration))(VariableDeclarationFragment(SimpleName:iter)))(ExpressionStatement(Assignment(SimpleName:iter)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:classLoader))(SimpleName:getResources)(METHOD_INVOCATION_ARGUMENTS(SimpleName:fileName)))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iter))(SimpleName:hasMoreElements))(Block(VariableDeclarationStatement(SimpleType(SimpleName:URL))(VariableDeclarationFragment(SimpleName:url)(CastExpression(SimpleType(SimpleName:URL))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iter))(SimpleName:nextElement)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fileList))(SimpleName:contains)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:toString))))(Block(ContinueStatement)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fileList))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:toString)))))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:is)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:is)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(VariableDeclarationStatement(SimpleType(SimpleName:Properties))(VariableDeclarationFragment(SimpleName:props)(ClassInstanceCreation(SimpleType(SimpleName:Properties)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:props))(SimpleName:load)(METHOD_INVOCATION_ARGUMENTS(SimpleName:is))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName:Map.Entry))(SimpleName:entry))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:props))(SimpleName:entrySet))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:apiName)(CastExpression(SimpleType(SimpleName:String))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getKey)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:serializerName)(CastExpression(SimpleType(SimpleName:String))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entry))(SimpleName:getValue)))))(VariableDeclarationStatement(SimpleType(SimpleName:Class))(VariableDeclarationFragment(SimpleName:apiClass)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:Class))(VariableDeclarationFragment(SimpleName:serializerClass)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:apiClass)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Class))(SimpleName:forName)(METHOD_INVOCATION_ARGUMENTS(SimpleName:apiName)(BooleanLiteral:false)(SimpleName:classLoader))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:ClassNotFoundException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:log))(SimpleName:fine)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:apiName)(StringLiteral:<STR>)(MethodInvocation(SimpleName:getClassLoader))))))(ContinueStatement))))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:serializerClass)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Class))(SimpleName:forName)(METHOD_INVOCATION_ARGUMENTS(SimpleName:serializerName)(BooleanLiteral:false)(SimpleName:classLoader))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:ClassNotFoundException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:log))(SimpleName:fine)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:serializerName)(StringLiteral:<STR>)(MethodInvocation(SimpleName:getClassLoader))))))(ContinueStatement))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:type))(SimpleName:isAssignableFrom)(METHOD_INVOCATION_ARGUMENTS(SimpleName:serializerClass))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:HessianException))(InfixExpression(SimpleName:url)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:serializerClass))(SimpleName:getName))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:type))(SimpleName:getName)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:classMap))(SimpleName:put)(METHOD_INVOCATION_ARGUMENTS(SimpleName:apiClass)(SimpleName:serializerClass)))))))(Block(IfStatement(InfixExpression(SimpleName:is)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:is))(SimpleName:close))))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:RuntimeException))(SimpleName:e))(Block(ThrowStatement(SimpleName:e))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:HessianException))(SimpleName:e))))))))))