(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:boolean)(SimpleName:addToSortedList)(SingleVariableDeclaration(SimpleType(SimpleName:Object))(SimpleName:element))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:min)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:max)(InfixExpression(MethodInvocation(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:found)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:currentIndex)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:compareResult)))(IfStatement(InfixExpression(SimpleName:max)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(Block(DoStatement(Block(ExpressionStatement(Assignment(SimpleName:currentIndex)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:min)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:max)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(ExpressionStatement(Assignment(SimpleName:compareResult)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Comparable))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:myList))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(SimpleName:currentIndex))))))(SimpleName:compareTo)(METHOD_INVOCATION_ARGUMENTS(SimpleName:element)))))(IfStatement(InfixExpression(SimpleName:compareResult)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:min)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:currentIndex)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))(IfStatement(InfixExpression(SimpleName:compareResult)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:max)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:currentIndex)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))))(Block(ExpressionStatement(Assignment(SimpleName:found)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))))(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:min)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:max)))(INFIX_EXPRESSION_OPERATOR:&&)(ParenthesizedExpression(InfixExpression(SimpleName:found)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false)))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:found)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0)))(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Comparable))(SimpleName:element))))(SimpleName:compareTo)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(SimpleName:currentIndex)))))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:myList))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:currentIndex)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))(SimpleName:element)))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:myList))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:currentIndex)(SimpleName:element))))))(ReturnStatement(BooleanLiteral:true)))(IfStatement(InfixExpression(SimpleName:found)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:myList))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:currentIndex)(SimpleName:element))))(ReturnStatement(BooleanLiteral:true)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ReturnStatement(BooleanLiteral:false)))))))))