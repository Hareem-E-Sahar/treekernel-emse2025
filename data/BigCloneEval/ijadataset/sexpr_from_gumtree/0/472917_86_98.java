(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Test))(Modifier:public)(PrimitiveType:void)(SimpleName:shouldNotCompleteTransactionWhenDebtorIsNotValid)(SimpleType(SimpleName:ServiceException))(Block(ExpressionStatement(Assignment(SimpleName:valueToBeTransfered)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:BigDecimal))(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:when)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:validationService))(SimpleName:conformsTo)(METHOD_INVOCATION_ARGUMENTS(SimpleName:debtor))))))(SimpleName:thenReturn)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Boolean.FALSE))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:paymentService))(SimpleName:transferFrom)(METHOD_INVOCATION_ARGUMENTS(SimpleName:debtor)(SimpleName:creditor)(SimpleName:valueToBeTransfered)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:ServiceException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(SimpleName:assertTrue)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:true))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:verify)(METHOD_INVOCATION_ARGUMENTS(SimpleName:paymentRepository)(MethodInvocation(SimpleName:never)))))(SimpleName:addBalance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:debtor)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:valueToBeTransfered))(SimpleName:negate)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:verify)(METHOD_INVOCATION_ARGUMENTS(SimpleName:paymentRepository)(MethodInvocation(SimpleName:never)))))(SimpleName:addBalance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:debtor)(SimpleName:valueToBeTransfered))))))))))