(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:openFiles)(SimpleType(SimpleName:IOException))(Block(IfStatement(InfixExpression(SimpleName:count)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:1))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:count))))))(IfStatement(InfixExpression(SimpleName:limit)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:limit)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))))(VariableDeclarationStatement(SimpleType(SimpleName:InitializationErrorManager))(VariableDeclarationFragment(SimpleName:em)(ClassInstanceCreation(SimpleType(SimpleName:InitializationErrorManager)))))(ExpressionStatement(MethodInvocation(SimpleName:setErrorManager)(METHOD_INVOCATION_ARGUMENTS(SimpleName:em))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:unique)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ForStatement(Block(ExpressionStatement(PostfixExpression(SimpleName:unique)(POSTFIX_EXPRESSION_OPERATOR:++)))(IfStatement(InfixExpression(SimpleName:unique)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:MAX_LOCKS))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:pattern))))))(ExpressionStatement(Assignment(SimpleName:lockFileName)(ASSIGNMENT_OPERATOR:=)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:generate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pattern)(NumberLiteral:0)(SimpleName:unique))))(SimpleName:toString))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))(SynchronizedStatement(SimpleName:locks)(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:locks))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lockFileName)))(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ContinueStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:FileChannel))(VariableDeclarationFragment(SimpleName:fc)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:lockStream)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:lockFileName))))(ExpressionStatement(Assignment(SimpleName:fc)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lockStream))(SimpleName:getChannel)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:ix))(Block(ContinueStatement))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:FileLock))(VariableDeclarationFragment(SimpleName:fl)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fc))(SimpleName:tryLock))))(IfStatement(InfixExpression(SimpleName:fl)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ContinueStatement))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:ix))(Block)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:locks))(SimpleName:put)(METHOD_INVOCATION_ARGUMENTS(SimpleName:lockFileName)(SimpleName:lockFileName))))(BreakStatement)))))(ExpressionStatement(Assignment(SimpleName:files)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(SimpleType(SimpleName:File))(Dimension(SimpleName:count))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:count))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:files)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:generate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:pattern)(SimpleName:i)(SimpleName:unique)))))))(IfStatement(SimpleName:append)(Block(ExpressionStatement(MethodInvocation(SimpleName:open)(METHOD_INVOCATION_ARGUMENTS(ArrayAccess(SimpleName:files)(NumberLiteral:0))(BooleanLiteral:true)))))(Block(ExpressionStatement(MethodInvocation(SimpleName:rotate)))))(VariableDeclarationStatement(SimpleType(SimpleName:Exception))(VariableDeclarationFragment(SimpleName:ex)(QualifiedName:em.lastException)))(IfStatement(InfixExpression(SimpleName:ex)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(IfStatement(InstanceofExpression(SimpleName:ex)(SimpleType(SimpleName:IOException)))(Block(ThrowStatement(CastExpression(SimpleType(SimpleName:IOException))(SimpleName:ex))))(IfStatement(InstanceofExpression(SimpleName:ex)(SimpleType(SimpleName:SecurityException)))(Block(ThrowStatement(CastExpression(SimpleType(SimpleName:SecurityException))(SimpleName:ex))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:ex)))))))))(ExpressionStatement(MethodInvocation(SimpleName:setErrorManager)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:ErrorManager))))))(IfStatement(InfixExpression(SimpleName:controllo)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:controllo)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(QualifiedName:it.ilz.hostingjava.valves.controlli.File))(ThisExpression))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:controllo))(SimpleName:start)))))))))