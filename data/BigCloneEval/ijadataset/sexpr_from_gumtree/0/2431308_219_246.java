(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:boolean)(SimpleName:runCommand)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:name))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:priority))(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:Object))(Dimension))(SimpleName:command))(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:Object))(Dimension))(SimpleName:envArray))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:workingDirectory))(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:Object))(Dimension))(SimpleName:depends))(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:Object))(Dimension))(SimpleName:readLocks))(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName:Object))(Dimension))(SimpleName:writeLocks))(SimpleType(SimpleName:DatabaseException))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Map))(SimpleType(SimpleName:String))(SimpleType(SimpleName:String)))(VariableDeclarationFragment(SimpleName:env)(MethodInvocation(SimpleName:arrayToMap)(METHOD_INVOCATION_ARGUMENTS(SimpleName:envArray)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LOGGER))(SimpleName:info)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(SimpleName:name)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Arrays))(SimpleName:toString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:command)))(SimpleName:priority)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Arrays))(SimpleName:toString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:readLocks)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Arrays))(SimpleName:toString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:writeLocks)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Output))(SimpleName:toString)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:env))(SimpleName:entrySet)))))))(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName:String))(Dimension))(VariableDeclarationFragment(SimpleName:commandArgs)(ArrayCreation(ArrayType(SimpleType(SimpleName:String))(Dimension(QualifiedName:command.length))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(QualifiedName:command.length)))(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:--)(SimpleName:i))(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:commandArgs)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(SimpleName:command)(SimpleName:i)))(SimpleName:toString)))))(VariableDeclarationStatement(SimpleType(SimpleName:CommandLineTask))(VariableDeclarationFragment(SimpleName:job)(ClassInstanceCreation(SimpleType(SimpleName:CommandLineTask))(SimpleName:scheduler)(SimpleName:name)(SimpleName:commandArgs)(SimpleName:env)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:workingDirectory)))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Object))(SimpleName:depend))(SimpleName:depends)(Block(VariableDeclarationStatement(SimpleType(SimpleName:Resource))(VariableDeclarationFragment(SimpleName:resource)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:scheduler))(SimpleName:getResource)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:String))(SimpleName:depend))))))(IfStatement(InfixExpression(SimpleName:resource)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:RuntimeException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:depend)(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:job))(SimpleName:addDependency)(METHOD_INVOCATION_ARGUMENTS(SimpleName:resource)(QualifiedName:LockType.GENERATED))))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Object))(SimpleName:readLock))(SimpleName:readLocks)(Block(VariableDeclarationStatement(SimpleType(SimpleName:Resource))(VariableDeclarationFragment(SimpleName:resource)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:scheduler))(SimpleName:getResource)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:String))(SimpleName:readLock))))))(IfStatement(InfixExpression(SimpleName:resource)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:RuntimeException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:readLock)(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:job))(SimpleName:addDependency)(METHOD_INVOCATION_ARGUMENTS(SimpleName:resource)(QualifiedName:LockType.READ_ACCESS))))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Object))(SimpleName:writeLock))(SimpleName:writeLocks)(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:id)(CastExpression(SimpleType(SimpleName:String))(SimpleName:writeLock))))(VariableDeclarationStatement(SimpleType(SimpleName:Resource))(VariableDeclarationFragment(SimpleName:resource)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:scheduler))(SimpleName:getResource)(METHOD_INVOCATION_ARGUMENTS(SimpleName:id)))))(IfStatement(InfixExpression(SimpleName:resource)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:resource)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:SimpleData))(SimpleName:scheduler)(SimpleName:id)(QualifiedName:LockMode.EXCLUSIVE_WRITER)(BooleanLiteral:false))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:resource))(SimpleName:register)(METHOD_INVOCATION_ARGUMENTS(SimpleName:job))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:job))(SimpleName:addDependency)(METHOD_INVOCATION_ARGUMENTS(SimpleName:resource)(QualifiedName:LockType.WRITE_ACCESS))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:scheduler))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:job))))(ReturnStatement(BooleanLiteral:true))))))