(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:File))(SimpleName:convert)(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:inputFile))(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:outputFile))(SimpleType(SimpleName:IOException))(Block(TryStatement(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:inputFile))(SimpleName:getName)))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Charset))(VariableDeclarationFragment(SimpleName:fileCharset)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:getFileEncoding)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputFile)))))(IfStatement(InfixExpression(SimpleName:fileCharset)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Charset))(VariableDeclarationFragment(SimpleName:systemCharset)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Charset))(SimpleName:defaultCharset))))(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fileCharset))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(SimpleName:systemCharset))))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(ParenthesizedExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:systemCharset))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Charset))(SimpleName:forName)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fileCharset))(SimpleName:name)))(SimpleName:toLowerCase)))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:encodedFileName)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:getFilePrefix)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:inputFile))(SimpleName:getPath))))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(ParenthesizedExpression(ConditionalExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(ThisExpression))(SimpleName:isWindows))(StringLiteral:<STR>)(StringLiteral:<STR>))))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:encodedFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:encodedFileName))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:convertFileEncodingToSys)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputFile)(SimpleName:encodedFile)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:org.apache.commons.io.FileUtils))(SimpleName:copyFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputFile)(SimpleName:encodedFile)))))))(ExpressionStatement(Assignment(SimpleName:inputFile)(ASSIGNMENT_OPERATOR:=)(SimpleName:encodedFile))))(IfStatement(MethodInvocation(SimpleName:isWindows))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:encodedFileName)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:getFilePrefix)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:inputFile))(SimpleName:getPath))))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:encodedFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:encodedFileName))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:org.apache.commons.io.FileUtils))(SimpleName:copyFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputFile)(SimpleName:encodedFile))))(ExpressionStatement(Assignment(SimpleName:inputFile)(ASSIGNMENT_OPERATOR:=)(SimpleName:encodedFile))))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LOGGER))(SimpleName:debug)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:inputFile))(SimpleName:getPath))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:outputFile))(SimpleName:getPath))))))(VariableDeclarationStatement(SimpleType(SimpleName:OfficeDocumentConverter))(VariableDeclarationFragment(SimpleName:converter)(ClassInstanceCreation(SimpleType(SimpleName:OfficeDocumentConverter))(SimpleName:officeManager))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:converter))(SimpleName:convert)(METHOD_INVOCATION_ARGUMENTS(SimpleName:inputFile)(SimpleName:outputFile))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LOGGER))(SimpleName:debug)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:inputFile))(SimpleName:getPath))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:outputFile))(SimpleName:getPath))))))(ReturnStatement(SimpleName:outputFile)))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LOGGER))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(SimpleName:e))))))(Block))(ReturnStatement(NullLiteral))))))