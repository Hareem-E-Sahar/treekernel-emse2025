(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:boolean)(SimpleName:lockEnvironment)(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:rdOnly))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exclusive))(Block(TryStatement(Block(IfStatement(MethodInvocation(SimpleName:checkEnvHomePermissions)(METHOD_INVOCATION_ARGUMENTS(SimpleName:rdOnly)))(Block(ReturnStatement(BooleanLiteral:true))))(IfStatement(InfixExpression(SimpleName:lockFile)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:lockFile)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:dbEnvHome)(SimpleName:LOCK_FILE))(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:FileMode.READWRITE_MODE))(SimpleName:getModeValue)))))))(ExpressionStatement(Assignment(SimpleName:channel)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lockFile))(SimpleName:getChannel))))(TryStatement(Block(IfStatement(SimpleName:exclusive)(Block(ExpressionStatement(Assignment(SimpleName:exclLock)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:channel))(SimpleName:tryLock)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1)(NumberLiteral:1)(BooleanLiteral:false)))))(IfStatement(InfixExpression(SimpleName:exclLock)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(BooleanLiteral:false))))(ReturnStatement(BooleanLiteral:true))))(IfStatement(SimpleName:rdOnly)(Block(ExpressionStatement(Assignment(SimpleName:envLock)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:channel))(SimpleName:tryLock)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1)(NumberLiteral:1)(BooleanLiteral:true))))))(Block(ExpressionStatement(Assignment(SimpleName:envLock)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:channel))(SimpleName:tryLock)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)(NumberLiteral:1)(BooleanLiteral:false)))))))(IfStatement(InfixExpression(SimpleName:envLock)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(BooleanLiteral:false))))(ReturnStatement(BooleanLiteral:true)))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:OverlappingFileLockException))(SimpleName:e))(Block(ReturnStatement(BooleanLiteral:false))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:EnvironmentFailureException))(SimpleName:envImpl)(QualifiedName:EnvironmentFailureReason.LOG_INTEGRITY)(SimpleName:e))))))))))