(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:getchordPart)(Block(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName:jm.music.data.Part))(Dimension))(VariableDeclarationFragment(SimpleName:parts)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:score))(SimpleName:getPartArray))))(IfStatement(SimpleName:debug)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:parts.length))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(SimpleName:parts)(SimpleName:i)))(SimpleName:getChannel))(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:DRUM_CHANNEL))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:MIDIBeast))(SimpleName:getInstrumentForPart)(METHOD_INVOCATION_ARGUMENTS(ArrayAccess(SimpleName:parts)(SimpleName:i)))))))))))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:parts.length))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:currentInstrument)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(SimpleName:parts)(SimpleName:i)))(SimpleName:getInstrument))))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:currentInstrument)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:currentInstrument)(INFIX_EXPRESSION_OPERATOR:<=)(NumberLiteral:31)))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(SimpleName:parts)(SimpleName:i)))(SimpleName:getChannel))(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:DRUM_CHANNEL)))(Block(ExpressionStatement(Assignment(QualifiedName:MIDIBeast.chordPart)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:parts)(SimpleName:i))))(IfStatement(SimpleName:debug)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:MIDIBeast))(SimpleName:getInstrumentForPart)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:MIDIBeast.chordPart)))(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:j)(NumberLiteral:0)))(InfixExpression(SimpleName:j)(INFIX_EXPRESSION_OPERATOR:<)(FieldAccess(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:MIDIBeast.chordPart))(SimpleName:getPhraseArray))(SimpleName:length)))(PostfixExpression(SimpleName:j)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:k)(NumberLiteral:0)))(InfixExpression(SimpleName:k)(INFIX_EXPRESSION_OPERATOR:<)(FieldAccess(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:MIDIBeast.chordPart))(SimpleName:getPhraseArray))(SimpleName:j)))(SimpleName:getNoteArray))(SimpleName:length)))(PostfixExpression(SimpleName:k)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(ArrayAccess(MethodInvocation(METHOD_INVOCATION_RECEIVER(ArrayAccess(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:MIDIBeast.chordPart))(SimpleName:getPhraseArray))(SimpleName:j)))(SimpleName:getNoteArray))(SimpleName:k)))))))))))(ReturnStatement)))))(ExpressionStatement(Assignment(QualifiedName:MIDIBeast.chordPart)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:MIDIBeast))(SimpleName:addError)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:canContinue)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))))