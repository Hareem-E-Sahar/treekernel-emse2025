(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(PrimitiveType:double)(SimpleName:consume)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:result))(SimpleType(SimpleName:InkMLComplianceException))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ThisExpression))(SimpleName:setLastValue)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1.0))))(ReturnStatement(NumberLiteral:1.0)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ThisExpression))(SimpleName:setLastValue)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0.0))))(ReturnStatement(NumberLiteral:0.0)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(SimpleName:hasLastValue)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InkMLComplianceException))(StringLiteral:<STR>)))))(ReturnStatement(MethodInvocation(SimpleName:getLastValue))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(ThisExpression))(SimpleName:getChannel)))(SimpleName:isIntermittent)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InkMLComplianceException))(StringLiteral:<STR>))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(ExpressionStatement(MethodInvocation(SimpleName:unsetLastValue)))(ReturnStatement(QualifiedName:Double.NaN)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InkMLComplianceException))(StringLiteral:<STR>)))))))))))))