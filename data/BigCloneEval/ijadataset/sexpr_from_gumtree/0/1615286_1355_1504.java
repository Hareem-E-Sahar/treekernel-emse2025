(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:Dfp))(SimpleName:divide)(SingleVariableDeclaration(SimpleType(SimpleName:Dfp))(SimpleName:divisor))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:dividend)(Dimension)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:quotient)(Dimension)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:remainder)(Dimension)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:qd)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:nsqd)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:trial)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:minadj)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:trialgood)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:md)(NumberLiteral:0)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:excp)))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:field))(SimpleName:getRadixDigits))(INFIX_EXPRESSION_OPERATOR:!=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:divisor.field))(SimpleName:getRadixDigits)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:field))(SimpleName:setIEEEFlagsBits)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_INVALID))))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:Dfp))(VariableDeclarationFragment(SimpleName:result)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getZero))))))(ExpressionStatement(Assignment(QualifiedName:result.nans)(ASSIGNMENT_OPERATOR:=)(SimpleName:QNAN)))(ReturnStatement(MethodInvocation(SimpleName:dotrap)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_INVALID)(SimpleName:DIVIDE_TRAP)(SimpleName:divisor)(SimpleName:result))))))(VariableDeclarationStatement(SimpleType(SimpleName:Dfp))(VariableDeclarationFragment(SimpleName:result)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getZero))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:nans)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:FINITE))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(QualifiedName:divisor.nans)(INFIX_EXPRESSION_OPERATOR:!=)(SimpleName:FINITE)))(Block(IfStatement(MethodInvocation(SimpleName:isNaN))(Block(ReturnStatement(ThisExpression))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:divisor))(SimpleName:isNaN))(Block(ReturnStatement(SimpleName:divisor))))(IfStatement(InfixExpression(InfixExpression(SimpleName:nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:INFINITE))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(QualifiedName:divisor.nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:FINITE)))(Block(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(ThisExpression)))))(ExpressionStatement(Assignment(QualifiedName:result.sign)(ASSIGNMENT_OPERATOR:=)(CastExpression(PrimitiveType:byte)(ParenthesizedExpression(InfixExpression(SimpleName:sign)(INFIX_EXPRESSION_OPERATOR:*)(QualifiedName:divisor.sign))))))(ReturnStatement(SimpleName:result))))(IfStatement(InfixExpression(InfixExpression(QualifiedName:divisor.nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:INFINITE))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:FINITE)))(Block(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getZero))))))(ExpressionStatement(Assignment(QualifiedName:result.sign)(ASSIGNMENT_OPERATOR:=)(CastExpression(PrimitiveType:byte)(ParenthesizedExpression(InfixExpression(SimpleName:sign)(INFIX_EXPRESSION_OPERATOR:*)(QualifiedName:divisor.sign))))))(ReturnStatement(SimpleName:result))))(IfStatement(InfixExpression(InfixExpression(QualifiedName:divisor.nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:INFINITE))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:nans)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:INFINITE)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:field))(SimpleName:setIEEEFlagsBits)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_INVALID))))(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getZero))))))(ExpressionStatement(Assignment(QualifiedName:result.nans)(ASSIGNMENT_OPERATOR:=)(SimpleName:QNAN)))(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:dotrap)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_INVALID)(SimpleName:DIVIDE_TRAP)(SimpleName:divisor)(SimpleName:result)))))(ReturnStatement(SimpleName:result))))))(IfStatement(InfixExpression(ArrayAccess(QualifiedName:divisor.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:field))(SimpleName:setIEEEFlagsBits)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_DIV_ZERO))))(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:getZero))))))(ExpressionStatement(Assignment(QualifiedName:result.sign)(ASSIGNMENT_OPERATOR:=)(CastExpression(PrimitiveType:byte)(ParenthesizedExpression(InfixExpression(SimpleName:sign)(INFIX_EXPRESSION_OPERATOR:*)(QualifiedName:divisor.sign))))))(ExpressionStatement(Assignment(QualifiedName:result.nans)(ASSIGNMENT_OPERATOR:=)(SimpleName:INFINITE)))(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:dotrap)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:DfpField.FLAG_DIV_ZERO)(SimpleName:DIVIDE_TRAP)(SimpleName:divisor)(SimpleName:result)))))(ReturnStatement(SimpleName:result))))(ExpressionStatement(Assignment(SimpleName:dividend)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(ExpressionStatement(Assignment(SimpleName:quotient)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:2)))))))(ExpressionStatement(Assignment(SimpleName:remainder)(ASSIGNMENT_OPERATOR:=)(ArrayCreation(ArrayType(PrimitiveType:int)(Dimension(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:dividend)(QualifiedName:mant.length))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:quotient)(QualifiedName:mant.length))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:quotient)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:remainder)(QualifiedName:mant.length))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:mant.length))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:dividend)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:mant)(SimpleName:i))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:quotient)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:remainder)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))))(ExpressionStatement(Assignment(SimpleName:nsqd)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(Assignment(SimpleName:qd)(ASSIGNMENT_OPERATOR:=)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(InfixExpression(SimpleName:qd)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(PostfixExpression(SimpleName:qd)(POSTFIX_EXPRESSION_OPERATOR:--))(Block(VariableDeclarationStatement(Modifier:final)(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:divMsb)(InfixExpression(InfixExpression(ArrayAccess(SimpleName:dividend)(QualifiedName:mant.length))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:RADIX))(INFIX_EXPRESSION_OPERATOR:+)(ArrayAccess(SimpleName:dividend)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:min)(InfixExpression(SimpleName:divMsb)(INFIX_EXPRESSION_OPERATOR:/)(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName:divisor.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:max)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:divMsb)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:/)(ArrayAccess(QualifiedName:divisor.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))(ExpressionStatement(Assignment(SimpleName:trialgood)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(WhileStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:trialgood))(Block(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:min)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:max)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:rh)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:dm)(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:mant.length)))(ArrayAccess(QualifiedName:divisor.mant)(SimpleName:i))(NumberLiteral:0))))(VariableDeclarationStatement(Modifier:final)(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:r)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:dm)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:trial)))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:rh))))(ExpressionStatement(Assignment(SimpleName:rh)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:r)(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:RADIX))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:remainder)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:r)(INFIX_EXPRESSION_OPERATOR:-)(InfixExpression(SimpleName:rh)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:RADIX)))))))(ExpressionStatement(Assignment(SimpleName:rh)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:1)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(Modifier:final)(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:r)(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:RADIX)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:-)(ArrayAccess(SimpleName:remainder)(SimpleName:i))))(INFIX_EXPRESSION_OPERATOR:+)(ArrayAccess(SimpleName:dividend)(SimpleName:i))(SimpleName:rh))))(ExpressionStatement(Assignment(SimpleName:rh)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:r)(INFIX_EXPRESSION_OPERATOR:/)(SimpleName:RADIX))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:remainder)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:r)(INFIX_EXPRESSION_OPERATOR:-)(InfixExpression(SimpleName:rh)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:RADIX)))))))(IfStatement(InfixExpression(SimpleName:rh)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:max)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ContinueStatement)))(ExpressionStatement(Assignment(SimpleName:minadj)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName:remainder)(QualifiedName:mant.length))(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:RADIX)))(INFIX_EXPRESSION_OPERATOR:+)(ArrayAccess(SimpleName:remainder)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))(ExpressionStatement(Assignment(SimpleName:minadj)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:minadj)(INFIX_EXPRESSION_OPERATOR:/)(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName:divisor.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))(IfStatement(InfixExpression(SimpleName:minadj)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:2))(Block(ExpressionStatement(Assignment(SimpleName:min)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:minadj))))(ContinueStatement)))(ExpressionStatement(Assignment(SimpleName:trialgood)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:--))(Block(IfStatement(InfixExpression(ArrayAccess(QualifiedName:divisor.mant)(SimpleName:i))(INFIX_EXPRESSION_OPERATOR:>)(ArrayAccess(SimpleName:remainder)(SimpleName:i)))(Block(ExpressionStatement(Assignment(SimpleName:trialgood)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))))(IfStatement(InfixExpression(ArrayAccess(QualifiedName:divisor.mant)(SimpleName:i))(INFIX_EXPRESSION_OPERATOR:<)(ArrayAccess(SimpleName:remainder)(SimpleName:i)))(Block(BreakStatement)))))(IfStatement(InfixExpression(ArrayAccess(SimpleName:remainder)(QualifiedName:mant.length))(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:trialgood)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))(IfStatement(InfixExpression(SimpleName:trialgood)(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false))(Block(ExpressionStatement(Assignment(SimpleName:min)(ASSIGNMENT_OPERATOR:=)(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:quotient)(SimpleName:qd))(ASSIGNMENT_OPERATOR:=)(SimpleName:trial)))(IfStatement(InfixExpression(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:nsqd)(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0)))(Block(ExpressionStatement(PostfixExpression(SimpleName:nsqd)(POSTFIX_EXPRESSION_OPERATOR:++)))))(IfStatement(InfixExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:field))(SimpleName:getRoundingMode))(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:DfpField.RoundingMode.ROUND_DOWN))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:nsqd)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:mant.length)))(Block(BreakStatement)))(IfStatement(InfixExpression(SimpleName:nsqd)(INFIX_EXPRESSION_OPERATOR:>)(QualifiedName:mant.length))(Block(BreakStatement)))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:dividend)(NumberLiteral:0))(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:mant.length))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:dividend)(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:remainder)(SimpleName:i))))))))(ExpressionStatement(Assignment(SimpleName:md)(ASSIGNMENT_OPERATOR:=)(QualifiedName:mant.length)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:--))(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName:quotient)(SimpleName:i))(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:md)(ASSIGNMENT_OPERATOR:=)(SimpleName:i)))(BreakStatement)))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:mant.length))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(QualifiedName:result.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:i)(NumberLiteral:1)))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:quotient)(InfixExpression(SimpleName:md)(INFIX_EXPRESSION_OPERATOR:-)(SimpleName:i)))))))(ExpressionStatement(Assignment(QualifiedName:result.exp)(ASSIGNMENT_OPERATOR:=)(InfixExpression(InfixExpression(InfixExpression(SimpleName:exp)(INFIX_EXPRESSION_OPERATOR:-)(QualifiedName:divisor.exp))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:md))(INFIX_EXPRESSION_OPERATOR:-)(QualifiedName:mant.length))))(ExpressionStatement(Assignment(QualifiedName:result.sign)(ASSIGNMENT_OPERATOR:=)(CastExpression(PrimitiveType:byte)(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName:sign)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:divisor.sign)))(NumberLiteral:1)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))))))(IfStatement(InfixExpression(ArrayAccess(QualifiedName:result.mant)(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(QualifiedName:result.exp)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))))(IfStatement(InfixExpression(SimpleName:md)(INFIX_EXPRESSION_OPERATOR:>)(ParenthesizedExpression(InfixExpression(QualifiedName:mant.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(Block(ExpressionStatement(Assignment(SimpleName:excp)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:round)(METHOD_INVOCATION_ARGUMENTS(ArrayAccess(SimpleName:quotient)(InfixExpression(SimpleName:md)(INFIX_EXPRESSION_OPERATOR:-)(QualifiedName:mant.length))))))))(Block(ExpressionStatement(Assignment(SimpleName:excp)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:result))(SimpleName:round)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)))))))(IfStatement(InfixExpression(SimpleName:excp)(INFIX_EXPRESSION_OPERATOR:!=)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:result)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:dotrap)(METHOD_INVOCATION_ARGUMENTS(SimpleName:excp)(SimpleName:DIVIDE_TRAP)(SimpleName:divisor)(SimpleName:result)))))))(ReturnStatement(SimpleName:result))))))