(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:void)(SimpleName:trainDepParser)(SingleVariableDeclaration(PrimitiveType:byte)(SimpleName:flag))(SingleVariableDeclaration(SimpleType(SimpleName:JarArchiveOutputStream))(SimpleName:zout))(SimpleType(SimpleName:Exception))(Block(VariableDeclarationStatement(SimpleType(SimpleName:AbstractDepParser))(VariableDeclarationFragment(SimpleName:parser)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:OneVsAllDecoder))(VariableDeclarationFragment(SimpleName:decoder)(NullLiteral)))(IfStatement(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_LEXICON))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_EAGER)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftEagerParser))(SimpleName:flag)(SimpleName:s_featureXml))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_POP)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftPopParser))(SimpleName:flag)(SimpleName:s_featureXml)))))))(IfStatement(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_INSTANCE))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_EAGER)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftEagerParser))(SimpleName:flag)(SimpleName:t_xml)(SimpleName:ENTRY_LEXICA))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_POP)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftPopParser))(SimpleName:flag)(SimpleName:t_xml)(SimpleName:ENTRY_LEXICA)))))))(IfStatement(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_BOOST))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:decoder)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:OneVsAllDecoder))(SimpleName:m_model))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_EAGER)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftEagerParser))(SimpleName:flag)(SimpleName:t_xml)(SimpleName:t_map)(SimpleName:decoder))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_depParser))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractDepParser.ALG_SHIFT_POP)))(ExpressionStatement(Assignment(SimpleName:parser)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ShiftPopParser))(SimpleName:flag)(SimpleName:t_xml)(SimpleName:t_map)(SimpleName:decoder))))))))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:AbstractReader))(SimpleType(SimpleName:DepNode))(SimpleType(SimpleName:DepTree)))(VariableDeclarationFragment(SimpleName:reader)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:DepTree))(VariableDeclarationFragment(SimpleName:tree)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:n)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_format))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractReader.FORMAT_DEP)))(ExpressionStatement(Assignment(SimpleName:reader)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:DepReader))(SimpleName:s_trainFile)(BooleanLiteral:true))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:s_format))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:AbstractReader.FORMAT_CONLLX)))(ExpressionStatement(Assignment(SimpleName:reader)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:CoNLLXReader))(SimpleName:s_trainFile)(BooleanLiteral:true))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:setLanguage)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s_language))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reader))(SimpleName:setLanguage)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s_language))))(ForStatement(Assignment(SimpleName:n)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0))(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:tree)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reader))(SimpleName:nextTree))))(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(PostfixExpression(SimpleName:n)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:parse)(METHOD_INVOCATION_ARGUMENTS(SimpleName:tree))))(IfStatement(InfixExpression(InfixExpression(SimpleName:n)(INFIX_EXPRESSION_OPERATOR:%)(NumberLiteral:1000))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:printf)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(InfixExpression(SimpleName:n)(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:1000))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:n)))))(IfStatement(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_LEXICON))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:saveTags)(METHOD_INVOCATION_ARGUMENTS(SimpleName:ENTRY_LEXICA))))(ExpressionStatement(Assignment(SimpleName:t_xml)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:getDepFtrXml)))))(IfStatement(InfixExpression(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_INSTANCE))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_BOOST)))(Block(ExpressionStatement(Assignment(SimpleName:a_yx)(ASSIGNMENT_OPERATOR:=)(QualifiedName:parser.a_trans)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putArchiveEntry)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:JarArchiveEntry))(SimpleName:ENTRY_PARSER)))))(VariableDeclarationStatement(SimpleType(SimpleName:PrintStream))(VariableDeclarationFragment(SimpleName:fout)(ClassInstanceCreation(SimpleType(SimpleName:PrintStream))(SimpleName:zout))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fout))(SimpleName:print)(METHOD_INVOCATION_ARGUMENTS(SimpleName:s_depParser))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fout))(SimpleName:flush)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeArchiveEntry)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putArchiveEntry)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:JarArchiveEntry))(SimpleName:ENTRY_FEATURE)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:copy)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:s_featureXml))(SimpleName:zout))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeArchiveEntry)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putArchiveEntry)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:JarArchiveEntry))(SimpleName:ENTRY_LEXICA)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:IOUtils))(SimpleName:copy)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:ENTRY_LEXICA))(SimpleName:zout))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeArchiveEntry)))(IfStatement(InfixExpression(SimpleName:flag)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:ShiftPopParser.FLAG_TRAIN_INSTANCE))(ExpressionStatement(Assignment(SimpleName:t_map)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:getDepFtrMap))))))))))))