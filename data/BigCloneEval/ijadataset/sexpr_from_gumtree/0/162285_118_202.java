(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:Schedule))(SimpleName:assignRandomChargingSlotInChargingInterval)(SingleVariableDeclaration(SimpleType(SimpleName:PolynomialFunction))(SimpleName:func))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:startTime))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:endTime))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:joulesInInterval))(SingleVariableDeclaration(PrimitiveType:double)(SimpleName:bit))(SingleVariableDeclaration(SimpleType(SimpleName:Schedule))(SimpleName:chargingInParkingInterval))(SimpleType(SimpleName:Exception))(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:notFound)(BooleanLiteral:true)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:run)(BooleanLiteral:true)))(IfStatement(QualifiedName:DecentralizedSmartCharger.debug)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:bit)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:startTime)(StringLiteral:<STR>)(SimpleName:endTime)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chargingInParkingInterval))(SimpleName:printSchedule)))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:upper)(SimpleName:endTime)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:lower)(SimpleName:startTime)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:trial)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:countNotFoundInARow)(NumberLiteral:0)))(WhileStatement(SimpleName:notFound)(Block(ExpressionStatement(Assignment(SimpleName:run)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:upper)(ASSIGNMENT_OPERATOR:=)(SimpleName:endTime)))(ExpressionStatement(Assignment(SimpleName:lower)(ASSIGNMENT_OPERATOR:=)(SimpleName:startTime)))(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:rand)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:random))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:integral)))(VariableDeclarationStatement(SimpleType(SimpleName:PolynomialFunction))(VariableDeclarationFragment(SimpleName:funcSubOpt)(NullLiteral)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:fullSubOptIntegral)(NumberLiteral:0)))(WhileStatement(SimpleName:run)(Block(IfStatement(InfixExpression(SimpleName:joulesInInterval)(INFIX_EXPRESSION_OPERATOR:>=)(NumberLiteral:0))(Block(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:err)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:max)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:joulesInInterval)(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:100.0))(NumberLiteral:1.0)))))(IfStatement(QualifiedName:DecentralizedSmartCharger.debug)(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:startTime)(StringLiteral:<STR>)(SimpleName:trial)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:func))(SimpleName:toString))))))(IfStatement(InfixExpression(SimpleName:startTime)(INFIX_EXPRESSION_OPERATOR:==)(SimpleName:trial))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:System.out))(SimpleName:println)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:err)(StringLiteral:<STR>)(SimpleName:joulesInInterval)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:func))(SimpleName:toString))))))))))(ExpressionStatement(Assignment(SimpleName:integral)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:DecentralizedSmartCharger.functionSimpsonIntegrator))(SimpleName:integrate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:func)(SimpleName:startTime)(SimpleName:trial)))))(IfStatement(InfixExpression(SimpleName:integral)(INFIX_EXPRESSION_OPERATOR:<)(InfixExpression(SimpleName:rand)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:joulesInInterval)))(Block(ExpressionStatement(Assignment(SimpleName:lower)(ASSIGNMENT_OPERATOR:=)(SimpleName:trial)))(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2)))))(Block(ExpressionStatement(Assignment(SimpleName:upper)(ASSIGNMENT_OPERATOR:=)(SimpleName:trial)))(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:integral)(INFIX_EXPRESSION_OPERATOR:-)(InfixExpression(SimpleName:rand)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:joulesInInterval)))))(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:err))(Block(ExpressionStatement(Assignment(SimpleName:run)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))))(Block(IfStatement(InfixExpression(SimpleName:funcSubOpt)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:funcSubOpt)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:turnSubOptimalSlotDistributionIntoProbDensityOfFindingAvailableSlot)(METHOD_INVOCATION_ARGUMENTS(SimpleName:func)(SimpleName:startTime)(SimpleName:endTime)))))))(ExpressionStatement(Assignment(SimpleName:integral)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:DecentralizedSmartCharger.functionSimpsonIntegrator))(SimpleName:integrate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:funcSubOpt)(SimpleName:startTime)(SimpleName:trial)))))(IfStatement(InfixExpression(SimpleName:fullSubOptIntegral)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:fullSubOptIntegral)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:DecentralizedSmartCharger.functionSimpsonIntegrator))(SimpleName:integrate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:funcSubOpt)(SimpleName:startTime)(SimpleName:endTime)))))))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:err)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:max)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(SimpleName:fullSubOptIntegral)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:100.0))(NumberLiteral:1.0)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(SimpleName:integral)))(INFIX_EXPRESSION_OPERATOR:<)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:rand)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:fullSubOptIntegral)))))(Block(ExpressionStatement(Assignment(SimpleName:lower)(ASSIGNMENT_OPERATOR:=)(SimpleName:trial)))(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2)))))(Block(ExpressionStatement(Assignment(SimpleName:upper)(ASSIGNMENT_OPERATOR:=)(SimpleName:trial)))(ExpressionStatement(Assignment(SimpleName:trial)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:upper)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:lower)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(SimpleName:integral)))(INFIX_EXPRESSION_OPERATOR:-)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Math))(SimpleName:abs)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:rand)(INFIX_EXPRESSION_OPERATOR:*)(SimpleName:fullSubOptIntegral)))))))(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:err))(Block(ExpressionStatement(Assignment(SimpleName:run)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))))))(VariableDeclarationStatement(SimpleType(SimpleName:ChargingInterval))(VariableDeclarationFragment(SimpleName:c1)))(IfStatement(InfixExpression(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:bit))(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:endTime))(Block(ExpressionStatement(Assignment(SimpleName:c1)(ASSIGNMENT_OPERATOR:=)(NullLiteral))))(Block(ExpressionStatement(Assignment(SimpleName:c1)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ChargingInterval))(SimpleName:trial)(InfixExpression(SimpleName:trial)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:bit)))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:c1)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chargingInParkingInterval))(SimpleName:overlapWithTimeInterval)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c1)))(INFIX_EXPRESSION_OPERATOR:==)(BooleanLiteral:false)))(Block(ExpressionStatement(Assignment(SimpleName:notFound)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(ExpressionStatement(Assignment(SimpleName:countNotFoundInARow)(ASSIGNMENT_OPERATOR:=)(NumberLiteral:0)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chargingInParkingInterval))(SimpleName:addTimeInterval)(METHOD_INVOCATION_ARGUMENTS(SimpleName:c1)))))(Block(ExpressionStatement(PostfixExpression(SimpleName:countNotFoundInARow)(POSTFIX_EXPRESSION_OPERATOR:++)))(IfStatement(InfixExpression(SimpleName:countNotFoundInARow)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:100))(Block(ExpressionStatement(Assignment(SimpleName:chargingInParkingInterval)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:exitDistributionIfTooConstrained)(METHOD_INVOCATION_ARGUMENTS(SimpleName:startTime)(SimpleName:endTime)(SimpleName:bit)(SimpleName:chargingInParkingInterval)))))(ExpressionStatement(Assignment(SimpleName:notFound)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chargingInParkingInterval))(SimpleName:sort)))(ReturnStatement(SimpleName:chargingInParkingInterval))))))