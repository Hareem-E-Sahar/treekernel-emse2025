(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(Modifier:static)(PrimitiveType:void)(SimpleName:distOSProject)(SingleVariableDeclaration(SimpleType(SimpleName:Project))(SimpleName:pro))(SingleVariableDeclaration(SimpleType(SimpleName:OS))(SimpleName:os))(SingleVariableDeclaration(SimpleType(SimpleName:BuildConfig))(SimpleName:buildConfig))(Block(VariableDeclarationStatement(SimpleType(QualifiedName:org.apache.tools.ant.Project))(VariableDeclarationFragment(SimpleName:antProj)(ClassInstanceCreation(SimpleType(QualifiedName:org.apache.tools.ant.Project)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:proName)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pro))(SimpleName:getName))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:osDir)))(IfStatement(InfixExpression(SimpleName:os)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:OS.MacOSX))(ExpressionStatement(Assignment(SimpleName:osDir)(ASSIGNMENT_OPERATOR:=)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:os.id)(StringLiteral:<STR>)(SimpleName:proName)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:buildConfig))(SimpleName:getPrefix))(SimpleName:proName)(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:osDir)(ASSIGNMENT_OPERATOR:=)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:os.id)(StringLiteral:<STR>)(SimpleName:proName)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:osDir)))(SimpleName:mkdirs)))(ExpressionStatement(MethodInvocation(SimpleName:copyFileOrDir)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:proName))(SimpleName:osDir))))(ExpressionStatement(MethodInvocation(SimpleName:copyFileOrDir)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:proName)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(QualifiedName:os.id))(SimpleName:osDir))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:nativeLibsDir)(ClassInstanceCreation(SimpleType(SimpleName:File))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:os.id)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:nativeLibsDir))(SimpleName:exists))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:nativeLibsDir))(SimpleName:isDirectory)))(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:CodeItem))(SimpleName:item))(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pro))(SimpleName:getAllDependencies)))(SimpleName:getCodeItems))(Block(IfStatement(InstanceofExpression(SimpleName:item)(SimpleType(SimpleName:Library)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Library))(VariableDeclarationFragment(SimpleName:lib)(CastExpression(SimpleType(SimpleName:Library))(SimpleName:item))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:dir)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:nativeLibsDir)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lib))(SimpleName:getName)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:dir))(SimpleName:exists))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:dir))(SimpleName:isDirectory)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:projectNativeLibDir)(InfixExpression(SimpleName:osDir)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(QualifiedName:os.id)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:lib))(SimpleName:getName)))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:projectNativeLibDir)))(SimpleName:exists)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:projectNativeLibDir)))(SimpleName:mkdirs))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:file))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:dir))(SimpleName:listFiles))(Block(ExpressionStatement(MethodInvocation(SimpleName:copyFile)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getAbsolutePath))(InfixExpression(SimpleName:projectNativeLibDir)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getName))))))))))))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:packageFileNameWithoutExtension)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:buildConfig))(SimpleName:getPrefix))(SimpleName:proName)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:buildConfig))(SimpleName:getVersion))(StringLiteral:<STR>)(QualifiedName:os.id))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:os))(SimpleName:isWindows))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Zip))(VariableDeclarationFragment(SimpleName:zip)(ClassInstanceCreation(SimpleType(SimpleName:Zip)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:setProject)(METHOD_INVOCATION_ARGUMENTS(SimpleName:antProj))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:setDestFile)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:File))(InfixExpression(SimpleName:packageFileNameWithoutExtension)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:setBasedir)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:osDir)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip))(SimpleName:execute))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:executableFiles)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:os))(SimpleName:isMacOSX))(ExpressionStatement(Assignment(SimpleName:executableFiles)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>)))(ExpressionStatement(Assignment(SimpleName:executableFiles)(ASSIGNMENT_OPERATOR:=)(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(SimpleName:createBzip2)(METHOD_INVOCATION_ARGUMENTS(SimpleName:osDir)(SimpleName:executableFiles)(InfixExpression(SimpleName:packageFileNameWithoutExtension)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>))(MethodInvocation(SimpleName:excludes)))))))))))