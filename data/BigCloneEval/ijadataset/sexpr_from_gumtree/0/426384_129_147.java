(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:int)(SimpleName:findBlock)(SingleVariableDeclaration(PrimitiveType:char)(SimpleName:ch))(Block(IfStatement(InfixExpression(SimpleName:SC_TO_TC_LEXEME_BLOCK)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:l)(InfixExpression(QualifiedName:SC_TO_TC_LEXEME_BLOCK.length)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<=)(SimpleName:l))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:p)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:l)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:i)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:t)(InfixExpression(SimpleName:ch)(INFIX_EXPRESSION_OPERATOR:-)(ArrayAccess(SimpleName:SC_TO_TC_LEXEME_BLOCK)(SimpleName:p)))))(IfStatement(InfixExpression(SimpleName:t)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ReturnStatement(SimpleName:p))))(IfStatement(InfixExpression(SimpleName:t)(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:l)(ASSIGNMENT_OPERATOR:=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:--)(SimpleName:p)))))(Block(ExpressionStatement(Assignment(SimpleName:i)(ASSIGNMENT_OPERATOR:=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:p))))))))(ReturnStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))))))