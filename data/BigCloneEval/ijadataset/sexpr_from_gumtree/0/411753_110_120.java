(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(SimpleType(SimpleName:LispObject))(SimpleName:execute)(SingleVariableDeclaration(SimpleType(SimpleName:LispObject))(SimpleName:gate))(SingleVariableDeclaration(SimpleType(SimpleName:LispObject))(SimpleName:timeout))(SimpleType(SimpleName:ConditionThrowable))(Block(ExpressionStatement(MethodInvocation(SimpleName:checkForGate)(METHOD_INVOCATION_ARGUMENTS(SimpleName:gate))))(VariableDeclarationStatement(PrimitiveType:long)(VariableDeclarationFragment(SimpleName:msecs)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LispThread))(SimpleName:javaSleepInterval)(METHOD_INVOCATION_ARGUMENTS(SimpleName:timeout)))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Gate))(SimpleName:gate))))(SimpleName:waitForOpen)(METHOD_INVOCATION_ARGUMENTS(SimpleName:msecs))))(ReturnStatement(SimpleName:T)))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:e))(Block(ReturnStatement(MethodInvocation(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:LispError))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:LispThread))(SimpleName:currentThread)))(SimpleName:writeToString))(StringLiteral:<STR>)))))))))))))