(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:generatePackage)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:location))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportInstances))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportSolvers))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportClient))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportRunsolver))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportConfig))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:exportVerifier))(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:clientBinary))(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:verifierBinary))(SingleVariableDeclaration(SimpleType(SimpleName:Tasks))(SimpleName:task))(SimpleType(SimpleName:FileNotFoundException))(SimpleType(SimpleName:IOException))(SimpleType(SimpleName:NoConnectionToDBException))(SimpleType(SimpleName:SQLException))(SimpleType(SimpleName:ClientBinaryNotFoundException))(SimpleType(SimpleName:InstanceNotInDBException))(SimpleType(SimpleName:TaskCancelledException))(SimpleType(SimpleName:InterruptedException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:tmpDir)(ClassInstanceCreation(SimpleType(SimpleName:File))(StringLiteral:<STR>))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tmpDir))(SimpleName:mkdir)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setCancelable)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:true))))(VariableDeclarationStatement(SimpleType(SimpleName:Calendar))(VariableDeclarationFragment(SimpleName:cal)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Calendar))(SimpleName:getInstance))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:dateStr)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.YEAR)))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.MONTH)))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:9))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.MONTH)))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(ParenthesizedExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.MONTH)))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))(StringLiteral:<STR>)(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.DATE)))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:10))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.DATE))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:cal))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Calendar.DATE))))))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:ExperimentHasGridQueue)))(VariableDeclarationFragment(SimpleName:eqs)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ExperimentHasGridQueueDAO))(SimpleName:getExperimentHasGridQueueByExperiment)(METHOD_INVOCATION_ARGUMENTS(SimpleName:activeExperiment)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:count)(NumberLiteral:0)))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:ExperimentHasGridQueue))(SimpleName:eq))(SimpleName:eqs)(Block(VariableDeclarationStatement(SimpleType(SimpleName:GridQueue))(VariableDeclarationFragment(SimpleName:queue)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:GridQueueDAO))(SimpleName:getById)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:eq))(SimpleName:getIdGridQueue))))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:zipFile)(ClassInstanceCreation(SimpleType(SimpleName:File))(InfixExpression(SimpleName:location)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Util))(SimpleName:getFilename)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:activeExperiment))(SimpleName:getName))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:queue))(SimpleName:getName))(StringLiteral:<STR>)(SimpleName:dateStr)(StringLiteral:<STR>))))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:exists))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zipFile))(SimpleName:delete)))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipOutputStream))(VariableDeclarationFragment(SimpleName:zos)(ClassInstanceCreation(SimpleType(SimpleName:ZipOutputStream))(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:zipFile)))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:entry)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setOperationName)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:++)(SimpleName:count)))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:eqs))(SimpleName:size))))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:SolverBinaries)))(VariableDeclarationFragment(SimpleName:solverBinaries)))(IfStatement(SimpleName:exportSolvers)(Block(ExpressionStatement(Assignment(SimpleName:solverBinaries)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:SolverBinariesDAO))(SimpleName:getSolverBinariesInExperiment)(METHOD_INVOCATION_ARGUMENTS(SimpleName:activeExperiment))))))(Block(ExpressionStatement(Assignment(SimpleName:solverBinaries)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:SolverBinaries))))))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:LinkedList))(SimpleType(SimpleName:Instance)))(VariableDeclarationFragment(SimpleName:instances)))(IfStatement(SimpleName:exportInstances)(Block(ExpressionStatement(Assignment(SimpleName:instances)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:InstanceDAO))(SimpleName:getAllByExperimentId)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:activeExperiment))(SimpleName:getId)))))))(Block(ExpressionStatement(Assignment(SimpleName:instances)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:LinkedList))(SimpleType(SimpleName:Instance))))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:total)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:solverBinaries))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:instances))(SimpleName:size)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:done)(NumberLiteral:0)))(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled)))(INFIX_EXPRESSION_OPERATOR:&&)(SimpleName:exportSolvers))(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:SolverBinaries))(SimpleName:binary))(SimpleName:solverBinaries)(Block(ExpressionStatement(PostfixExpression(SimpleName:done)(POSTFIX_EXPRESSION_OPERATOR:++)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setTaskProgress)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(CastExpression(PrimitiveType:float)(SimpleName:done))(INFIX_EXPRESSION_OPERATOR:/)(CastExpression(PrimitiveType:float)(SimpleName:total))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setStatus)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(BreakStatement)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setStatus)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:done)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:solverBinaries))(SimpleName:size))))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipInputStream))(VariableDeclarationFragment(SimpleName:zis)(ClassInstanceCreation(SimpleType(SimpleName:ZipInputStream))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:SolverBinariesDAO))(SimpleName:getZippedBinaryFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:binary))))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:entryIn)))(VariableDeclarationStatement(ArrayType(PrimitiveType:byte)(Dimension))(VariableDeclarationFragment(SimpleName:buffer)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(InfixExpression(NumberLiteral:4)(INFIX_EXPRESSION_OPERATOR:*)(NumberLiteral:1024)))))))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:entryIn)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zis))(SimpleName:getNextEntry))))(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entryIn))(SimpleName:isDirectory))(Block(ContinueStatement)))(ExpressionStatement(Assignment(SimpleName:entry)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:getProperty)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:binary))(SimpleName:getMd5))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:getProperty)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:entryIn))(SimpleName:getName))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zos))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:entry))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:read)))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:read)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zis))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buffer)(NumberLiteral:0)(QualifiedName:buffer.length)))))(INFIX_EXPRESSION_OPERATOR:!=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zos))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:buffer)(NumberLiteral:0)(SimpleName:read))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zos))(SimpleName:closeEntry)))))))))(IfStatement(InfixExpression(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled)))(INFIX_EXPRESSION_OPERATOR:&&)(SimpleName:exportInstances))(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Instance))(SimpleName:i))(SimpleName:instances)(Block(ExpressionStatement(PostfixExpression(SimpleName:done)(POSTFIX_EXPRESSION_OPERATOR:++)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setTaskProgress)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(CastExpression(PrimitiveType:float)(SimpleName:done))(INFIX_EXPRESSION_OPERATOR:/)(CastExpression(PrimitiveType:float)(SimpleName:total))))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setStatus)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(BreakStatement)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setStatus)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(InfixExpression(SimpleName:done)(INFIX_EXPRESSION_OPERATOR:-)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:solverBinaries))(SimpleName:size))))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:instances))(SimpleName:size))))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:f)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:InstanceDAO))(SimpleName:getBinaryFileOfInstance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:i)))))(ExpressionStatement(Assignment(SimpleName:entry)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:getProperty)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:getMd5))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:getName))))))(ExpressionStatement(MethodInvocation(SimpleName:addFileToZIP)(METHOD_INVOCATION_ARGUMENTS(SimpleName:f)(SimpleName:entry)(SimpleName:zos))))))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:setStatus)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(IfStatement(SimpleName:exportConfig)(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:verifierFilename)(ConditionalExpression(InfixExpression(SimpleName:verifierBinary)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(NullLiteral)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:verifierBinary))(SimpleName:getName))))))(ExpressionStatement(MethodInvocation(SimpleName:addConfigurationFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zos)(SimpleName:queue)(SimpleName:verifierFilename))))))(IfStatement(SimpleName:exportClient)(Block(ExpressionStatement(MethodInvocation(SimpleName:addClient)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zos)(SimpleName:clientBinary))))))(IfStatement(SimpleName:exportRunsolver)(Block(ExpressionStatement(MethodInvocation(SimpleName:addRunsolver)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zos))))))(IfStatement(SimpleName:exportVerifier)(Block(ExpressionStatement(MethodInvocation(SimpleName:addVerifier)(METHOD_INVOCATION_ARGUMENTS(SimpleName:zos)(SimpleName:verifierBinary))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zos))(SimpleName:close)))(ExpressionStatement(MethodInvocation(SimpleName:deleteDirectory)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:File))(StringLiteral:<STR>)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:task))(SimpleName:isCancelled))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:TaskCancelledException))(StringLiteral:<STR>)))))))))))