(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:boolean)(SimpleName:inicioReproduccion)(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:indiceMusica))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:continuamente))(Block(IfStatement(InfixExpression(SimpleName:mixer)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(BooleanLiteral:false))))(VariableDeclarationStatement(SimpleType(SimpleName:MusicaOgg))(VariableDeclarationFragment(SimpleName:musica)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:musicas))(SimpleName:elementAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:indiceMusica)))))(ExpressionStatement(Assignment(QualifiedName:musica.fichero)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:File))(QualifiedName:musica.path))))(TryStatement(Block(ExpressionStatement(Assignment(QualifiedName:musica.audioInputStreamCodificada)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AudioSystem))(SimpleName:getAudioInputStream)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:musica.fichero))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:UnsupportedAudioFileException))(SimpleName:e))(Block(ReturnStatement(BooleanLiteral:false))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ReturnStatement(BooleanLiteral:false)))))(IfStatement(InfixExpression(QualifiedName:musica.audioInputStreamCodificada)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(BooleanLiteral:false))))(VariableDeclarationStatement(SimpleType(SimpleName:AudioFormat))(VariableDeclarationFragment(SimpleName:formatoOriginal)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.audioInputStreamCodificada))(SimpleName:getFormat))))(VariableDeclarationStatement(SimpleType(SimpleName:AudioFormat))(VariableDeclarationFragment(SimpleName:formatoDecodificado)(ClassInstanceCreation(SimpleType(SimpleName:AudioFormat))(QualifiedName:AudioFormat.Encoding.PCM_SIGNED)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:formatoOriginal))(SimpleName:getSampleRate))(NumberLiteral:16)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:formatoOriginal))(SimpleName:getChannels))(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:formatoOriginal))(SimpleName:getChannels))(INFIX_EXPRESSION_OPERATOR:*)(NumberLiteral:2))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:formatoOriginal))(SimpleName:getSampleRate))(BooleanLiteral:false))))(ExpressionStatement(Assignment(QualifiedName:musica.audioInputStreamDecodificada)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:AudioSystem))(SimpleName:getAudioInputStream)(METHOD_INVOCATION_ARGUMENTS(SimpleName:formatoDecodificado)(QualifiedName:musica.audioInputStreamCodificada)))))(VariableDeclarationStatement(SimpleType(QualifiedName:DataLine.Info))(VariableDeclarationFragment(SimpleName:info)(ClassInstanceCreation(SimpleType(QualifiedName:DataLine.Info))(TypeLiteral(SimpleType(SimpleName:SourceDataLine)))(SimpleName:formatoDecodificado))))(TryStatement(Block(ExpressionStatement(Assignment(QualifiedName:musica.dataLine)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:SourceDataLine))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mixer))(SimpleName:getLine)(METHOD_INVOCATION_ARGUMENTS(SimpleName:info))))))(IfStatement(InfixExpression(QualifiedName:musica.dataLine)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.audioInputStreamDecodificada))(SimpleName:close)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.audioInputStreamCodificada))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block)))(ReturnStatement(BooleanLiteral:false))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.dataLine))(SimpleName:open)(METHOD_INVOCATION_ARGUMENTS(SimpleName:formatoDecodificado)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:LineUnavailableException))(SimpleName:e))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.audioInputStreamDecodificada))(SimpleName:close)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.audioInputStreamCodificada))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:ioe))(Block)))(ReturnStatement(BooleanLiteral:false)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.dataLine))(SimpleName:start)))(ExpressionStatement(Assignment(QualifiedName:musica.controlGanancia)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:FloatControl))(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:musica.dataLine))(SimpleName:getControl)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:FloatControl.Type.MASTER_GAIN))))))(ExpressionStatement(Assignment(SimpleName:indiceMusicaReproduciendo)(ASSIGNMENT_OPERATOR:=)(SimpleName:indiceMusica)))(ExpressionStatement(Assignment(SimpleName:musicaReproduciendo)(ASSIGNMENT_OPERATOR:=)(SimpleName:musica)))(ExpressionStatement(Assignment(SimpleName:reproducirContinuamente)(ASSIGNMENT_OPERATOR:=)(SimpleName:continuamente)))(ExpressionStatement(Assignment(SimpleName:volumenCambiado)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ReturnStatement(BooleanLiteral:true))))))