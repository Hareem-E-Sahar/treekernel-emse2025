(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(SimpleType(SimpleName:Adaptor))(SimpleName:getAdaptor)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:kindTerm))(SingleVariableDeclaration(SimpleType(SimpleName:Adaptable))(SimpleName:adaptable))(SimpleType(SimpleName:AdaptorException))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Class))(SimpleType(SimpleName:Adaptor)))(VariableDeclarationFragment(SimpleName:adaptorClass)(MethodInvocation(SimpleName:getAdaptorClass)(METHOD_INVOCATION_ARGUMENTS(SimpleName:kindTerm)(SimpleName:adaptable)))))(IfStatement(InfixExpression(SimpleName:adaptorClass)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(NullLiteral))))(VariableDeclarationStatement(SimpleType(SimpleName:Adaptor))(VariableDeclarationFragment(SimpleName:adaptor)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptable))(SimpleName:getAdaptor)(METHOD_INVOCATION_ARGUMENTS(SimpleName:adaptorClass)))))(IfStatement(InfixExpression(SimpleName:adaptor)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Constructor))(WildcardType))(VariableDeclarationFragment(SimpleName:adaptorConstructor)(NullLiteral)))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Class))(WildcardType))(VariableDeclarationFragment(SimpleName:constructorArgClass)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptable))(SimpleName:getClass))))(WhileStatement(InfixExpression(SimpleName:constructorArgClass)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:adaptorConstructor)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptorClass))(SimpleName:getConstructor)(METHOD_INVOCATION_ARGUMENTS(SimpleName:constructorArgClass)))))(BreakStatement))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:NoSuchMethodException))(SimpleName:nsme))(Block(ExpressionStatement(Assignment(SimpleName:constructorArgClass)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:constructorArgClass))(SimpleName:getSuperclass)))))))))(IfStatement(InfixExpression(SimpleName:adaptorConstructor)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:adaptorConstructor)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptorClass))(SimpleName:getConstructor)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:NoSuchMethodException))(SimpleName:nsme))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:AdaptorException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:adaptorClass)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptable))(SimpleName:getClass))))))))))(TryStatement(Block(IfStatement(InfixExpression(SimpleName:constructorArgClass)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:adaptor)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:Adaptor))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptorConstructor))(SimpleName:newInstance))))))(Block(ExpressionStatement(Assignment(SimpleName:adaptor)(ASSIGNMENT_OPERATOR:=)(CastExpression(SimpleType(SimpleName:Adaptor))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptorConstructor))(SimpleName:newInstance)(METHOD_INVOCATION_ARGUMENTS(SimpleName:adaptable)))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:RuntimeException))(SimpleName:re))(Block(ThrowStatement(SimpleName:re))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:AdaptorException))(StringLiteral:<STR>)(SimpleName:e))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:adaptable))(SimpleName:addAdaptor)(METHOD_INVOCATION_ARGUMENTS(SimpleName:adaptor))))))(ReturnStatement(SimpleName:adaptor))))))