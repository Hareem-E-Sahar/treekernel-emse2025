(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(PrimitiveType:void)(SimpleName:createSamples)(Block(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:getDefault)))(SimpleName:getBundle)))(SimpleName:getState))(INFIX_EXPRESSION_OPERATOR:!=)(QualifiedName:Bundle.ACTIVE))(Block(ReturnStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:destination)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:getDefault)))(SimpleName:getPluginPreferences)))(SimpleName:getString)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:UIConstants.xprocess_importdir)))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:destinationSampleDir)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:destination))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:destinationSampleDir))(SimpleName:exists)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:destinationSampleDir))(SimpleName:mkdirs)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:source)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:UIPlugin))(SimpleName:getDefault)))(SimpleName:getPluginLocation))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(QualifiedName:File.separator)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:sourceSampleDir)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:source))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceSampleDir))(SimpleName:exists))(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:file))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceSampleDir))(SimpleName:listFiles))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getName)))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:out)(ClassInstanceCreation(SimpleType(SimpleName:File))(InfixExpression(SimpleName:destination)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:File.separator)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:getName))))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:exists)))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:FileUtils))(SimpleName:copyFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:file)(SimpleName:out)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:printStackTrace))))))))))))))))))