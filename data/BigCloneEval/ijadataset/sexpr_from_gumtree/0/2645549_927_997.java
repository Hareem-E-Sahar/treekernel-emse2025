(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:setDragDrop)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:ColorItem))(SimpleName:item))(Block(VariableDeclarationStatement(Modifier:final)(ArrayType(SimpleType(SimpleName:Transfer))(Dimension))(VariableDeclarationFragment(SimpleName:types)(ArrayCreation(ArrayType(SimpleType(SimpleName:Transfer))(Dimension))(ArrayInitializer(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:TextTransfer))(SimpleName:getInstance))))))(VariableDeclarationStatement(Modifier:final)(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:operations)(QualifiedName:DND.DROP_MOVE)))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:DragSource))(VariableDeclarationFragment(SimpleName:source)(ClassInstanceCreation(SimpleType(SimpleName:DragSource))(SimpleName:item)(SimpleName:operations))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:source))(SimpleName:setTransfer)(METHOD_INVOCATION_ARGUMENTS(SimpleName:types))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:source))(SimpleName:addDragListener)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:DragSourceListener))(AnonymousClassDeclaration(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:dragFinished)(SingleVariableDeclaration(SimpleType(SimpleName:DragSourceEvent))(SimpleName:event))(Block(IfStatement(InfixExpression(QualifiedName:event.detail)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:DND.DROP_MOVE))(Block))))(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:dragSetData)(SingleVariableDeclaration(SimpleType(SimpleName:DragSourceEvent))(SimpleName:event))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:string)(StringLiteral:<STR>)))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:item))(SimpleName:getColor))(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:RGB))(VariableDeclarationFragment(SimpleName:rgb)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:item))(SimpleName:getColor)))(SimpleName:getRGB))))(IfStatement(InfixExpression(SimpleName:copyMode)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ColorUtils))(SimpleName:getSWTColorString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:rgb))))))(IfStatement(InfixExpression(SimpleName:copyMode)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:1))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ColorUtils))(SimpleName:getAWTColorString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:rgb))))))(IfStatement(InfixExpression(SimpleName:copyMode)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:2))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ColorUtils))(SimpleName:getCssColorString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:rgb))))))(IfStatement(InfixExpression(SimpleName:copyMode)(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:3))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ColorUtils))(SimpleName:getHexColorString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:rgb)))))))))))(Block(ExpressionStatement(Assignment(SimpleName:string)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:item))(SimpleName:getGradientData)))(SimpleName:toString))))))(ExpressionStatement(Assignment(QualifiedName:event.data)(ASSIGNMENT_OPERATOR:=)(SimpleName:string)))))(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:dragStart)(SingleVariableDeclaration(SimpleType(SimpleName:DragSourceEvent))(SimpleName:event))(Block(ExpressionStatement(Assignment(QualifiedName:event.doit)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:isDragging)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))))))))(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:DropTarget))(VariableDeclarationFragment(SimpleName:target)(ClassInstanceCreation(SimpleType(SimpleName:DropTarget))(SimpleName:item)(SimpleName:operations))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:target))(SimpleName:setTransfer)(METHOD_INVOCATION_ARGUMENTS(SimpleName:types))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:target))(SimpleName:addDropListener)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:DropTargetAdapter))(AnonymousClassDeclaration(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:drop)(SingleVariableDeclaration(SimpleType(SimpleName:DropTargetEvent))(SimpleName:event))(Block(IfStatement(InfixExpression(QualifiedName:event.data)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(QualifiedName:event.detail)(ASSIGNMENT_OPERATOR:=)(QualifiedName:DND.DROP_NONE)))(ReturnStatement)))(VariableDeclarationStatement(SimpleType(SimpleName:ColorItem))(VariableDeclarationFragment(SimpleName:selectedCanvas2)(MethodInvocation(SimpleName:getSelectedCanvas))))(IfStatement(InfixExpression(InfixExpression(SimpleName:selectedCanvas2)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:||)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:isDragging)))(Block(ReturnStatement)))(ExpressionStatement(Assignment(SimpleName:isDragging)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:oldPos)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:selectedCanvas2))(SimpleName:getIndex))))(VariableDeclarationStatement(Modifier:final)(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:newPos)(QualifiedName:item.index)))(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:oldPos)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:colors.length)))(INFIX_EXPRESSION_OPERATOR:&&)(ParenthesizedExpression(InfixExpression(SimpleName:newPos)(INFIX_EXPRESSION_OPERATOR:<)(QualifiedName:colors.length))))(Block(VariableDeclarationStatement(Modifier:final)(SimpleType(SimpleName:IProxyColor))(VariableDeclarationFragment(SimpleName:tmp)(ArrayAccess(SimpleName:colors)(SimpleName:oldPos))))(IfStatement(InfixExpression(SimpleName:oldPos)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:newPos))(Block(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(SimpleName:oldPos)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:newPos))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:--))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:colors)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:colors)(SimpleName:newPos))(ASSIGNMENT_OPERATOR:=)(SimpleName:tmp))))(Block(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(SimpleName:oldPos)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:newPos))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName:colors)(SimpleName:i))(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(ExpressionStatement(Assignment(ArrayAccess(SimpleName:colors)(SimpleName:newPos))(ASSIGNMENT_OPERATOR:=)(SimpleName:tmp)))))(ExpressionStatement(MethodInvocation(SimpleName:updateColors)))(ExpressionStatement(Assignment(SimpleName:isDirty)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true))))))))))))))))