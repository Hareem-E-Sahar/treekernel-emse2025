(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(PrimitiveType:void)(SimpleName:run)(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:ServerSocketChannel))(VariableDeclarationFragment(SimpleName:ssc)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ServerSocketChannel))(SimpleName:open))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ssc))(SimpleName:configureBlocking)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:false))))(VariableDeclarationStatement(SimpleType(SimpleName:InetSocketAddress))(VariableDeclarationFragment(SimpleName:isa)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(StringLiteral:<STR>))(SimpleName:equals)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:config.hostname)))(Block(ExpressionStatement(Assignment(SimpleName:isa)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:InetSocketAddress))(QualifiedName:config.port)))))(Block(ExpressionStatement(Assignment(SimpleName:isa)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:InetSocketAddress))(QualifiedName:config.hostname)(QualifiedName:config.port))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ssc))(SimpleName:socket)))(SimpleName:bind)(METHOD_INVOCATION_ARGUMENTS(SimpleName:isa))))(ExpressionStatement(Assignment(SimpleName:acceptor)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:Acceptor))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:config.name))(SimpleName:replace)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(StringLiteral:<STR>))))(SimpleName:toLowerCase))(StringLiteral:<STR>))(SimpleName:ssc)(QualifiedName:config.factory)(QualifiedName:config.readThreads)(QualifiedName:config.writeThreads)(QualifiedName:config.enableWorkers)(QualifiedName:config.workerThreads)(QualifiedName:config.bufferCount)(QualifiedName:config.readTries)(QualifiedName:config.writeTries)(QualifiedName:config.debugEnabled))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:acceptor))(SimpleName:setDaemon)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:false))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:acceptor))(SimpleName:start)))(SynchronizedStatement(SimpleName:acceptor)(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:acceptor))(SimpleName:wait))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:e))(Block)))))(SynchronizedStatement(ThisExpression)(Block(ExpressionStatement(Assignment(SimpleName:running)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(MethodInvocation(SimpleName:notifyAll)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:log))(SimpleName:info)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(SimpleName:getClass)))(SimpleName:getSimpleName))(StringLiteral:<STR>)(QualifiedName:config.name)(StringLiteral:<STR>)(QualifiedName:config.hostname)(StringLiteral:<STR>)(QualifiedName:config.port)(StringLiteral:<STR>)(QualifiedName:config.readThreads)(StringLiteral:<STR>)(QualifiedName:config.readTries)(StringLiteral:<STR>)(QualifiedName:config.writeThreads)(StringLiteral:<STR>)(QualifiedName:config.writeTries)(StringLiteral:<STR>)(ParenthesizedExpression(ConditionalExpression(QualifiedName:config.enableWorkers)(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:config.workerThreads)(StringLiteral:<STR>)(QualifiedName:config.bufferCount)(StringLiteral:<STR>))(StringLiteral:<STR>)))(ParenthesizedExpression(ConditionalExpression(QualifiedName:config.debugEnabled)(StringLiteral:<STR>)(StringLiteral:<STR>))))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:log))(SimpleName:error)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(SimpleName:e))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:System))(SimpleName:exit)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:1)))))))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:acceptor))(SimpleName:join))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InterruptedException))(SimpleName:e))(Block)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:log))(SimpleName:debug)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(SimpleName:getName))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)))))))))