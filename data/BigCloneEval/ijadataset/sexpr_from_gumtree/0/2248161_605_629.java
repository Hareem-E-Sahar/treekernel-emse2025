(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(SimpleType(SimpleName:GenomicSequence))(SimpleName:fetch)(SingleVariableDeclaration(SimpleType(SimpleName:Chromosome))(SimpleName:k))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:start))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:end))(SimpleType(SimpleName:IOException))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:chr)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:k))(SimpleName:toString))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chr))(SimpleName:toLowerCase)))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(ExpressionStatement(Assignment(SimpleName:chr)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:chr))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:3))))))(VariableDeclarationStatement(SimpleType(SimpleName:SAXParserFactory))(VariableDeclarationFragment(SimpleName:f)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:SAXParserFactory))(SimpleName:newInstance))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:f))(SimpleName:setNamespaceAware)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:false))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:f))(SimpleName:setValidating)(METHOD_INVOCATION_ARGUMENTS(BooleanLiteral:false))))(VariableDeclarationStatement(SimpleType(SimpleName:SAXParser))(VariableDeclarationFragment(SimpleName:parser)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:f))(SimpleName:newSAXParser))))(VariableDeclarationStatement(SimpleType(SimpleName:URL))(VariableDeclarationFragment(SimpleName:url)(ClassInstanceCreation(SimpleType(SimpleName:URL))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:genomeVersion)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:URLEncoder))(SimpleName:encode)(METHOD_INVOCATION_ARGUMENTS(SimpleName:chr)(StringLiteral:<STR>)))(StringLiteral:<STR>)(ParenthesizedExpression(InfixExpression(SimpleName:start)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))(StringLiteral:<STR>)(ParenthesizedExpression(SimpleName:end))))))(VariableDeclarationStatement(SimpleType(SimpleName:DASHandler))(VariableDeclarationFragment(SimpleName:handler)(ClassInstanceCreation(SimpleType(SimpleName:DASHandler)))))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parser))(SimpleName:parse)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)(SimpleName:handler))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:close)))(VariableDeclarationStatement(SimpleType(SimpleName:GenomicSequence))(VariableDeclarationFragment(SimpleName:seq)(ClassInstanceCreation(SimpleType(SimpleName:GenomicSequence)))))(ExpressionStatement(Assignment(QualifiedName:seq.sequence)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:handler.bytes))(SimpleName:toByteArray))))(ExpressionStatement(Assignment(QualifiedName:seq.start)(ASSIGNMENT_OPERATOR:=)(SimpleName:start)))(ExpressionStatement(Assignment(QualifiedName:seq.end)(ASSIGNMENT_OPERATOR:=)(SimpleName:end)))(IfStatement(InfixExpression(QualifiedName:seq.sequence.length)(INFIX_EXPRESSION_OPERATOR:!=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:seq))(SimpleName:length)))(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:seq)(StringLiteral:<STR>)(QualifiedName:seq.sequence.length)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:seq))(SimpleName:length))))))(ReturnStatement(SimpleName:seq)))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:err))(Block(ThrowStatement(SimpleName:err))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(SimpleName:e))))))))))