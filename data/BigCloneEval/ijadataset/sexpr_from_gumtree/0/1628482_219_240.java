(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:private)(PrimitiveType:boolean)(SimpleName:resourceExists)(SingleVariableDeclaration(SimpleType(SimpleName:URL))(SimpleName:url))(Block(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:ok)(BooleanLiteral:true)))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:URLConnection))(VariableDeclarationFragment(SimpleName:conn)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openConnection))))(IfStatement(InstanceofExpression(SimpleName:conn)(SimpleType(QualifiedName:java.net.HttpURLConnection)))(Block(VariableDeclarationStatement(SimpleType(QualifiedName:java.net.HttpURLConnection))(VariableDeclarationFragment(SimpleName:hconn)(CastExpression(SimpleType(QualifiedName:java.net.HttpURLConnection))(SimpleName:conn))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:code)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:hconn))(SimpleName:getResponseCode))))(IfStatement(InfixExpression(SimpleName:code)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:java.net.HttpURLConnection.HTTP_OK))(Block(ReturnStatement(BooleanLiteral:true))))(IfStatement(InfixExpression(SimpleName:code)(INFIX_EXPRESSION_OPERATOR:>=)(QualifiedName:java.net.HttpURLConnection.HTTP_BAD_REQUEST))(Block(ReturnStatement(BooleanLiteral:false)))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:is)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openStream))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:is))(SimpleName:close))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:ex))(Block(ExpressionStatement(Assignment(SimpleName:ok)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false))))))(ReturnStatement(SimpleName:ok))))))