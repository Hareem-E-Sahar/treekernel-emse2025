(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(ParameterizedType(SimpleType(SimpleName:List))(SimpleType(SimpleName:Regla)))(SimpleName:planificar)(SingleVariableDeclaration(SimpleType(SimpleName:IBaseConocimientos))(SimpleName:bc))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:List))(SimpleType(SimpleName:Regla)))(VariableDeclarationFragment(SimpleName:reglas)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:bc))(SimpleName:getReglas))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Collections))(SimpleName:sort)(METHOD_INVOCATION_ARGUMENTS(SimpleName:reglas))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:Collection))(SimpleType(SimpleName:Sensor)))(VariableDeclarationFragment(SimpleName:estado)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:bc))(SimpleName:getEstadoActual))))(VariableDeclarationStatement(SimpleType(SimpleName:DefaultMutableTreeNode))(VariableDeclarationFragment(SimpleName:nodo)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:Iterator))(VariableDeclarationFragment(SimpleName:i)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reglas))(SimpleName:iterator))))(WhileStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(SimpleName:nodo)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Regla))(VariableDeclarationFragment(SimpleName:regla)(CastExpression(SimpleType(SimpleName:Regla))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:next)))))(VariableDeclarationStatement(SimpleType(SimpleName:DefaultMutableTreeNode))(VariableDeclarationFragment(SimpleName:root)(MethodInvocation(SimpleName:armarArbol)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:regla))(SimpleName:getPredicciones))(SimpleName:reglas)))))(ExpressionStatement(Assignment(SimpleName:nodo)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:buscarNodo)(METHOD_INVOCATION_ARGUMENTS(SimpleName:root)(SimpleName:estado)))))))(IfStatement(InfixExpression(SimpleName:nodo)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:List))(SimpleType(SimpleName:Regla)))(VariableDeclarationFragment(SimpleName:plan)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:Regla))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:count)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reglas))(SimpleName:size))))(VariableDeclarationStatement(SimpleType(SimpleName:Random))(VariableDeclarationFragment(SimpleName:r)(ClassInstanceCreation(SimpleType(SimpleName:Random)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:number)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:r))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:count)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))(VariableDeclarationStatement(SimpleType(SimpleName:Regla))(VariableDeclarationFragment(SimpleName:regla)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:reglas))(SimpleName:get)(METHOD_INVOCATION_ARGUMENTS(SimpleName:number)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:plan))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:regla))))(ReturnStatement(SimpleName:plan)))(Block(ReturnStatement(MethodInvocation(SimpleName:armarCamino)(METHOD_INVOCATION_ARGUMENTS(SimpleName:nodo)(SimpleName:reglas))))))))))