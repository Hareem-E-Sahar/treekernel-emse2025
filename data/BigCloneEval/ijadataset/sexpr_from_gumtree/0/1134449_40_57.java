(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Override))(Modifier:public)(Modifier:final)(PrimitiveType:void)(SimpleName:setFile)(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:File))(SimpleName:_f))(Block(ExpressionStatement(Assignment(SimpleName:file)(ASSIGNMENT_OPERATOR:=)(SimpleName:_f)))(IfStatement(InfixExpression(SimpleName:analyze_)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:analyze_)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:CtuluLog)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:analyze_))(SimpleName:setDesc)(METHOD_INVOCATION_ARGUMENTS(SuperMethodInvocation(SimpleName:getOperationDescription)(SimpleName:_f)))))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:file))))(ExpressionStatement(Assignment(SimpleName:helper)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:NativeNIOHelperCorrected))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:getChannel)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:helper))(SimpleName:inverseOrder))))(CatchClause(SingleVariableDeclaration(Modifier:final)(SimpleType(SimpleName:FileNotFoundException))(SimpleName:_e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:analyze_))(SimpleName:manageException)(METHOD_INVOCATION_ARGUMENTS(SimpleName:_e))))(IfStatement(InfixExpression(SimpleName:in)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:CtuluLibFile))(SimpleName:close)(METHOD_INVOCATION_ARGUMENTS(SimpleName:in)))))))))))))