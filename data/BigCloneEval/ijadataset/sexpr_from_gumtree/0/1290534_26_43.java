(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:get)(SingleVariableDeclaration(SimpleType(SimpleName:StringTokenizer))(SimpleName:objStrTok))(SingleVariableDeclaration(SimpleType(SimpleName:SessionThread))(SimpleName:objThread))(SimpleType(SimpleName:Exception))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:objStrTok))(SimpleName:hasMoreElements))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ExcListToLong))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:strState)(StringLiteral:<STR>)))(SwitchStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:objThread))(SimpleName:getSRCPDaemon)))(SimpleName:getServerState))(SwitchCase(QualifiedName:SRCPDaemon.intStateRunning))(ExpressionStatement(Assignment(SimpleName:strState)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Declare.strStateRunning)))(BreakStatement)(SwitchCase(QualifiedName:SRCPDaemon.intStateTerminating))(ExpressionStatement(Assignment(SimpleName:strState)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Declare.strStateTerminating)))(BreakStatement)(SwitchCase(QualifiedName:SRCPDaemon.intStateResetting))(ExpressionStatement(Assignment(SimpleName:strState)(ASSIGNMENT_OPERATOR:=)(QualifiedName:Declare.strStateResetting)))(BreakStatement))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:objThread))(SimpleName:writeAck)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Declare.intInfoMin)(InfixExpression(SimpleName:strGroupIdentifier)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:strState)))))))))