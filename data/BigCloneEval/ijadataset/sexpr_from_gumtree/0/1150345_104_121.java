(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:ReadableByteChannel))(SimpleName:getDirectReadableChannel)(Block(TryStatement(Block(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:file))(SimpleName:exists)))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IOException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:file))))))(VariableDeclarationStatement(SimpleType(SimpleName:ReadableByteChannel))(VariableDeclarationFragment(SimpleName:channel)(NullLiteral)))(IfStatement(SimpleName:allowRandomAccess)(Block(VariableDeclarationStatement(SimpleType(SimpleName:RandomAccessFile))(VariableDeclarationFragment(SimpleName:randomAccessFile)(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(SimpleName:file)(StringLiteral:<STR>))))(ExpressionStatement(Assignment(SimpleName:channel)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:randomAccessFile))(SimpleName:getChannel)))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:is)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:file))))(ExpressionStatement(Assignment(SimpleName:channel)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Channels))(SimpleName:newChannel)(METHOD_INVOCATION_ARGUMENTS(SimpleName:is)))))))(ReturnStatement(SimpleName:channel)))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Throwable))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:ContentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ThisExpression)))))))))))