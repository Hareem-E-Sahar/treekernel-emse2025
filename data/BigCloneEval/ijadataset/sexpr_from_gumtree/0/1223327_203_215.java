(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(NormalAnnotation(SimpleName:Test)(MemberValuePair(SimpleName:expected)(TypeLiteral(SimpleType(SimpleName:MarkerException)))))(Modifier:public)(PrimitiveType:void)(SimpleName:testFileOpenErrors5)(SimpleType(SimpleName:Exception))(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName:runTest)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)(StringLiteral:<STR>)(NumberLiteral:1)(NumberLiteral:0)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:ZamiaException))(SimpleName:e))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:msg)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:getMessage))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:msg))(SimpleName:startsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:msg))(SimpleName:endsWith)(METHOD_INVOCATION_ARGUMENTS(StringLiteral:<STR>))))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:MarkerException))))))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ClassInstanceCreation(SimpleType(SimpleName:File))(StringLiteral:<STR>)))(SimpleName:delete)))))))))