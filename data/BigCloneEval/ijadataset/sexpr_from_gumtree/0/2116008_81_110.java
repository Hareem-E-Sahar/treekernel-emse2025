(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:Query))(SimpleName:rewrite)(SingleVariableDeclaration(SimpleType(SimpleName:IndexReader))(SimpleName:reader))(SimpleType(SimpleName:IOException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:FilteredTermEnum))(VariableDeclarationFragment(SimpleName:enumerator)(MethodInvocation(SimpleName:getEnum)(METHOD_INVOCATION_ARGUMENTS(SimpleName:reader)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:maxClauseCount)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:BooleanQuery))(SimpleName:getMaxClauseCount))))(VariableDeclarationStatement(SimpleType(SimpleName:ScoreTermQueue))(VariableDeclarationFragment(SimpleName:stQueue)(ClassInstanceCreation(SimpleType(SimpleName:ScoreTermQueue))(SimpleName:maxClauseCount))))(TryStatement(Block(DoStatement(Block(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:minScore)(NumberLiteral:0.0f)))(VariableDeclarationStatement(PrimitiveType:float)(VariableDeclarationFragment(SimpleName:score)(NumberLiteral:0.0f)))(VariableDeclarationStatement(SimpleType(SimpleName:Term))(VariableDeclarationFragment(SimpleName:t)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enumerator))(SimpleName:term))))(IfStatement(InfixExpression(SimpleName:t)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(Assignment(SimpleName:score)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enumerator))(SimpleName:difference))))(IfStatement(InfixExpression(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stQueue))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:maxClauseCount))(INFIX_EXPRESSION_OPERATOR:||)(InfixExpression(SimpleName:score)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:minScore)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stQueue))(SimpleName:insert)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:ScoreTerm))(SimpleName:t)(SimpleName:score)))))(ExpressionStatement(Assignment(SimpleName:minScore)(ASSIGNMENT_OPERATOR:=)(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:ScoreTerm))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stQueue))(SimpleName:top))))(SimpleName:score)))))))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enumerator))(SimpleName:next))))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:enumerator))(SimpleName:close)))))(VariableDeclarationStatement(SimpleType(SimpleName:BooleanQuery))(VariableDeclarationFragment(SimpleName:query)(ClassInstanceCreation(SimpleType(SimpleName:BooleanQuery))(BooleanLiteral:true))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:size)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stQueue))(SimpleName:size))))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:size))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(VariableDeclarationStatement(SimpleType(SimpleName:ScoreTerm))(VariableDeclarationFragment(SimpleName:st)(CastExpression(SimpleType(SimpleName:ScoreTerm))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:stQueue))(SimpleName:pop)))))(VariableDeclarationStatement(SimpleType(SimpleName:TermQuery))(VariableDeclarationFragment(SimpleName:tq)(ClassInstanceCreation(SimpleType(SimpleName:TermQuery))(QualifiedName:st.term))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:tq))(SimpleName:setBoost)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(SimpleName:getBoost))(INFIX_EXPRESSION_OPERATOR:*)(QualifiedName:st.score)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:query))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:tq)(QualifiedName:BooleanClause.Occur.SHOULD))))))(ReturnStatement(SimpleName:query))))))