(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(SimpleType(QualifiedName:Spectrum.OneDim))(SimpleName:read)(SingleVariableDeclaration(SimpleType(SimpleName:File))(SimpleName:aFile))(SimpleType(QualifiedName:SpecFormat_spc.IOException))(Block(VariableDeclarationStatement(SimpleType(SimpleName:RandomAccessFile))(VariableDeclarationFragment(SimpleName:theSpecFile)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:theSpecFile)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:RandomAccessFile))(SimpleName:aFile)(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:Header))(VariableDeclarationFragment(SimpleName:header)(ClassInstanceCreation(SimpleType(SimpleName:Header)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:header))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:theSpecFile))))(VariableDeclarationStatement(ArrayType(PrimitiveType:int)(Dimension))(VariableDeclarationFragment(SimpleName:arrayOfChannelCount)))(SwitchStatement(QualifiedName:header.loadFormatIndicator)(SwitchCase(NumberLiteral:0))(ExpressionStatement(Assignment(SimpleName:arrayOfChannelCount)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChannelsMUSORT)(METHOD_INVOCATION_ARGUMENTS(SimpleName:theSpecFile)(SimpleName:header)))))(BreakStatement)(SwitchCase)(ExpressionStatement(Assignment(SimpleName:arrayOfChannelCount)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:getChannelsSMAUG)(METHOD_INVOCATION_ARGUMENTS(SimpleName:theSpecFile)(SimpleName:header)))))(BreakStatement))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:theSpecFile))(SimpleName:close)))(VariableDeclarationStatement(SimpleType(SimpleName:SimpleDateFormat))(VariableDeclarationFragment(SimpleName:aDateFormat)(ClassInstanceCreation(SimpleType(SimpleName:SimpleDateFormat))(StringLiteral:<STR>))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:dateTimeString)(InfixExpression(QualifiedName:header.creationDate)(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(QualifiedName:header.creationTime))))(VariableDeclarationStatement(SimpleType(SimpleName:ParsePosition))(VariableDeclarationFragment(SimpleName:pos)(ClassInstanceCreation(SimpleType(SimpleName:ParsePosition))(NumberLiteral:0))))(VariableDeclarationStatement(SimpleType(SimpleName:Date))(VariableDeclarationFragment(SimpleName:specDate)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:aDateFormat))(SimpleName:parse)(METHOD_INVOCATION_ARGUMENTS(SimpleName:dateTimeString)(SimpleName:pos)))))(ReturnStatement(ParenthesizedExpression(ClassInstanceCreation(SimpleType(QualifiedName:Spectrum.OneDim))(QualifiedName:header.specName)(SimpleName:specDate)(ClassInstanceCreation(SimpleType(QualifiedName:SpecChannel.OneDim))(CastExpression(PrimitiveType:int)(QualifiedName:header.xLength))(SimpleName:arrayOfChannelCount))))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.IOException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(QualifiedName:SpecFormat_spc.IOException))(StringLiteral:<STR>)(SimpleName:e)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:SpectrumException))(SimpleName:se))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(QualifiedName:SpecFormat_spc.IOException))(StringLiteral:<STR>)(SimpleName:se))))))))))