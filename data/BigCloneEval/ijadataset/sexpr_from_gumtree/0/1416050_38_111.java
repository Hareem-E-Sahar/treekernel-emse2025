(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:StringBuffer))(SimpleName:removeContent)(SingleVariableDeclaration(SimpleType(SimpleName:StringBuffer))(SimpleName:input))(Block(ExpressionStatement(Assignment(SimpleName:content)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:ArrayList))(SimpleType(SimpleName:String))))))(VariableDeclarationStatement(SimpleType(SimpleName:StringBuffer))(VariableDeclarationFragment(SimpleName:out)))(VariableDeclarationStatement(SimpleType(SimpleName:Pattern))(VariableDeclarationFragment(SimpleName:po)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Pattern))(SimpleName:compile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:patternStart)))))(VariableDeclarationStatement(SimpleType(SimpleName:Pattern))(VariableDeclarationFragment(SimpleName:pc)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Pattern))(SimpleName:compile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:patternEnd)))))(VariableDeclarationStatement(SimpleType(SimpleName:Matcher))(VariableDeclarationFragment(SimpleName:mo)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:po))(SimpleName:matcher)(METHOD_INVOCATION_ARGUMENTS(SimpleName:input)))))(VariableDeclarationStatement(SimpleType(SimpleName:Matcher))(VariableDeclarationFragment(SimpleName:mc)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pc))(SimpleName:matcher)(METHOD_INVOCATION_ARGUMENTS(SimpleName:input)))))(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName:TreeSet))(SimpleType(SimpleName:Position)))(VariableDeclarationFragment(SimpleName:map)(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:TreeSet))(SimpleType(QualifiedName:Placeholder.Position)))(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName:Comparator))(SimpleType(SimpleName:Position)))(AnonymousClassDeclaration(MethodDeclaration(Modifier:public)(PrimitiveType:int)(SimpleName:compare)(SingleVariableDeclaration(SimpleType(SimpleName:Position))(SimpleName:o1))(SingleVariableDeclaration(SimpleType(SimpleName:Position))(SimpleName:o2))(Block(ReturnStatement(InfixExpression(QualifiedName:o1._start)(INFIX_EXPRESSION_OPERATOR:-)(QualifiedName:o2._start))))))))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mo))(SimpleName:find))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:map))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:Position))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mo))(SimpleName:start))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mo))(SimpleName:end))(QualifiedName:Position.Type.opening)))))))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mc))(SimpleName:find))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:map))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:Position))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mc))(SimpleName:start))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:mc))(SimpleName:end))(QualifiedName:Position.Type.closing)))))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:depth)(NumberLiteral:0)))(VariableDeclarationStatement(SimpleType(SimpleName:Position))(VariableDeclarationFragment(SimpleName:prev)(NullLiteral)))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Position))(SimpleName:p))(SimpleName:map)(Block(ExpressionStatement(Assignment(SimpleName:depth)(ASSIGNMENT_OPERATOR:+=)(QualifiedName:p._type.depthDelta)))(ExpressionStatement(Assignment(QualifiedName:p._depth)(ASSIGNMENT_OPERATOR:=)(SimpleName:depth)))(ExpressionStatement(Assignment(SimpleName:prev)(ASSIGNMENT_OPERATOR:=)(SimpleName:p)))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:stop)))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:updatePrev)))(DoStatement(Block(ExpressionStatement(Assignment(SimpleName:stop)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:prev)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Position))(SimpleName:p))(SimpleName:map)(Block(ExpressionStatement(Assignment(SimpleName:updatePrev)(ASSIGNMENT_OPERATOR:=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:p._ignore))))(IfStatement(InfixExpression(InfixExpression(SimpleName:prev)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:p._ignore)))(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName:prev._type)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Position.Type.opening))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(QualifiedName:p._type)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Position.Type.closing)))(Block(IfStatement(InfixExpression(QualifiedName:p._depth)(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(ExpressionStatement(Assignment(QualifiedName:p._ignore)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(QualifiedName:prev._ignore)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:true)))(ExpressionStatement(Assignment(SimpleName:stop)(ASSIGNMENT_OPERATOR:=)(BooleanLiteral:false)))))))))(IfStatement(SimpleName:updatePrev)(Block(ExpressionStatement(Assignment(SimpleName:prev)(ASSIGNMENT_OPERATOR:=)(SimpleName:p))))(Block)))))(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:stop)))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:map))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:>)(NumberLiteral:0))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:last)(NumberLiteral:0)))(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:StringBuffer)))))(ExpressionStatement(Assignment(SimpleName:prev)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:Position))(SimpleName:p))(SimpleName:map)(Block(IfStatement(InfixExpression(InfixExpression(SimpleName:prev)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:p._ignore)))(Block(AssertStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:prev._ignore)))(IfStatement(InfixExpression(InfixExpression(QualifiedName:prev._type)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Position.Type.opening))(INFIX_EXPRESSION_OPERATOR:&&)(InfixExpression(QualifiedName:p._type)(INFIX_EXPRESSION_OPERATOR:==)(QualifiedName:Position.Type.closing)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:content))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:prev._end)(QualifiedName:p._start))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:append)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(SimpleName:last)(QualifiedName:prev._end))))))(ExpressionStatement(Assignment(SimpleName:last)(ASSIGNMENT_OPERATOR:=)(QualifiedName:p._start)))(ExpressionStatement(Assignment(SimpleName:p)(ASSIGNMENT_OPERATOR:=)(NullLiteral)))))))(IfStatement(InfixExpression(InfixExpression(SimpleName:p)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:||)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(QualifiedName:p._ignore)))(Block(ExpressionStatement(Assignment(SimpleName:prev)(ASSIGNMENT_OPERATOR:=)(SimpleName:p)))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:out))(SimpleName:append)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:input))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(SimpleName:last)))))))(Block(ExpressionStatement(Assignment(SimpleName:out)(ASSIGNMENT_OPERATOR:=)(SimpleName:input)))))(ReturnStatement(SimpleName:out))))))