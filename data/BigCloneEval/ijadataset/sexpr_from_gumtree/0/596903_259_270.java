(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(SimpleType(SimpleName:Integer))(SimpleName:generateRandomInt)(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:upperLimit))(SingleVariableDeclaration(PrimitiveType:boolean)(SimpleName:unique))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Integer))(VariableDeclarationFragment(SimpleName:randomInteger)(NullLiteral)))(IfStatement(SimpleName:unique)(Block(DoStatement(Block(ExpressionStatement(Assignment(SimpleName:randomInteger)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:generator))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:upperLimit)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:set))(SimpleName:contains)(METHOD_INVOCATION_ARGUMENTS(SimpleName:randomInteger))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:set))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:randomInteger)))))(Block(ExpressionStatement(Assignment(SimpleName:randomInteger)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:generator))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:upperLimit)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))))))(ReturnStatement(SimpleName:randomInteger))))))