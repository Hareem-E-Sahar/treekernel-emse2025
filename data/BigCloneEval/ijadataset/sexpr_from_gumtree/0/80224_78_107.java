(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(PrimitiveType:void)(SimpleName:addProtein)(SingleVariableDeclaration(SimpleType(SimpleName:Collection))(SimpleName:c))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:addAll)(METHOD_INVOCATION_ARGUMENTS(CastExpression(SimpleType(SimpleName:Vector))(ParenthesizedExpression(SimpleName:c))))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:10))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:0)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:20))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:1)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:30))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:2)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:40))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:3)))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:proteins))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:<)(NumberLiteral:60))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:4)))))(Block(ExpressionStatement(Assignment(SimpleName:myColor)(ASSIGNMENT_OPERATOR:=)(ArrayAccess(SimpleName:colors)(NumberLiteral:5))))))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(ThisExpression))(SimpleName:repaint)))(VariableDeclarationStatement(SimpleType(SimpleName:E2DProtein))(VariableDeclarationFragment(SimpleName:p)(NullLiteral)))(VariableDeclarationStatement(PrimitiveType:double)(VariableDeclarationFragment(SimpleName:pi)(NumberLiteral:0)))(ForStatement(VariableDeclarationExpression(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:i)(NumberLiteral:0)))(InfixExpression(SimpleName:i)(INFIX_EXPRESSION_OPERATOR:<)(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Vector))(SimpleName:c))))(SimpleName:size)))(PostfixExpression(SimpleName:i)(POSTFIX_EXPRESSION_OPERATOR:++))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:names))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:E2DProtein))(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Vector))(SimpleName:c))))(SimpleName:elementAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:i))))))(SimpleName:toString)))))(ExpressionStatement(Assignment(SimpleName:p)(ASSIGNMENT_OPERATOR:=)(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:E2DProtein))(MethodInvocation(METHOD_INVOCATION_RECEIVER(ParenthesizedExpression(CastExpression(SimpleType(SimpleName:Vector))(SimpleName:c))))(SimpleName:elementAt)(METHOD_INVOCATION_ARGUMENTS(SimpleName:i)))))))(ExpressionStatement(Assignment(SimpleName:pi)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:p))(SimpleName:getPI))))(IfStatement(InfixExpression(SimpleName:pi)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:maxPi))(Block(ExpressionStatement(Assignment(SimpleName:maxPi)(ASSIGNMENT_OPERATOR:=)(SimpleName:pi))))(IfStatement(InfixExpression(SimpleName:pi)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:minPi))(Block(ExpressionStatement(Assignment(SimpleName:minPi)(ASSIGNMENT_OPERATOR:=)(SimpleName:pi))))))))(ExpressionStatement(Assignment(SimpleName:myPi)(ASSIGNMENT_OPERATOR:=)(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName:maxPi)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:minPi)))(INFIX_EXPRESSION_OPERATOR:/)(NumberLiteral:2))))))))