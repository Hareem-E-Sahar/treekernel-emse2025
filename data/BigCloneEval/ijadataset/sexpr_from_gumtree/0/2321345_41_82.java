(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleName:Pattern)(SingleVariableDeclaration(SimpleType(SimpleName:LanguageDescription))(SimpleName:languageDescription))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:pattern))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:languageDescription))(SimpleName:getClass)))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pattern))(SimpleName:getClass)))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:prolog))(SimpleName:loadLibrary)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:PatternLibrary)))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InvalidLibraryException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InitializationException))(StringLiteral:<STR>)(SimpleName:e))))))(ExpressionStatement(Assignment(FieldAccess(ThisExpression)(SimpleName:languageDescription))(ASSIGNMENT_OPERATOR:=)(SimpleName:languageDescription)))(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName:String))(Dimension))(VariableDeclarationFragment(SimpleName:ps)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:pattern))(SimpleName:split)(METHOD_INVOCATION_ARGUMENTS(SimpleName:SPLIT_REGEX)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))(VariableDeclarationStatement(PrimitiveType:boolean)(VariableDeclarationFragment(SimpleName:ct)(BooleanLiteral:false)))(VariableDeclarationStatement(SimpleType(QualifiedName:java.util.regex.Pattern))(VariableDeclarationFragment(SimpleName:varpat)(MethodInvocation(METHOD_INVOCATION_RECEIVER(QualifiedName:java.util.regex.Pattern))(SimpleName:compile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:VAR_REGEX)))))(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:p))(SimpleName:ps)(Block(IfStatement(SimpleName:ct)(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:Theory))(VariableDeclarationFragment(SimpleName:theory)(ClassInstanceCreation(SimpleType(SimpleName:Theory))(InfixExpression(SimpleName:p)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:NEWLINE)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:patternTheories))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(SimpleName:theory)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InvalidTheoryException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InitializationException))(StringLiteral:<STR>)(SimpleName:e)))))))(Block(VariableDeclarationStatement(SimpleType(SimpleName:Matcher))(VariableDeclarationFragment(SimpleName:m)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:varpat))(SimpleName:matcher)(METHOD_INVOCATION_ARGUMENTS(SimpleName:p)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:first)(NumberLiteral:0)))(WhileStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:find))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:raw)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:p))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(SimpleName:first)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:start))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parts))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:processRawString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:raw))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parts))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:Variable))(ThisExpression)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:p))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:start))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:end))(INFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1))))))))(ExpressionStatement(Assignment(SimpleName:first)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:m))(SimpleName:end))))))(IfStatement(InfixExpression(SimpleName:first)(INFIX_EXPRESSION_OPERATOR:<)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:p))(SimpleName:length)))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:raw)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:p))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(SimpleName:first)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:parts))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(SimpleName:processRawString)(METHOD_INVOCATION_ARGUMENTS(SimpleName:raw))))))))))(ExpressionStatement(Assignment(SimpleName:ct)(ASSIGNMENT_OPERATOR:=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(SimpleName:ct))))))(IfStatement(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:patternTheories))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:==)(NumberLiteral:0))(TryStatement(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:patternTheories))(SimpleName:add)(METHOD_INVOCATION_ARGUMENTS(ClassInstanceCreation(SimpleType(SimpleName:Theory))(StringLiteral:<STR>))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InvalidTheoryException))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:InitializationException))(StringLiteral:<STR>)(SimpleName:e)))))))))))