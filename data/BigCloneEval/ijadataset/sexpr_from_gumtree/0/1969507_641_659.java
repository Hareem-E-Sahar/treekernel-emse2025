(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(Modifier:static)(SimpleType(SimpleName:String))(SimpleName:getRandomStr)(SingleVariableDeclaration(PrimitiveType:char)(SimpleName:startChr))(SingleVariableDeclaration(PrimitiveType:char)(SimpleName:endChr))(Block(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:randomInt)))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:randomStr)(NullLiteral)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:startInt)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Integer))(SimpleName:valueOf)(METHOD_INVOCATION_ARGUMENTS(SimpleName:startChr)))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:endInt)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:Integer))(SimpleName:valueOf)(METHOD_INVOCATION_ARGUMENTS(SimpleName:endChr)))))(IfStatement(InfixExpression(SimpleName:startInt)(INFIX_EXPRESSION_OPERATOR:>)(SimpleName:endInt))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:IllegalArgumentException))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:startChr)(StringLiteral:<STR>)(SimpleName:endChr))))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:SecureRandom))(VariableDeclarationFragment(SimpleName:rnd)(ClassInstanceCreation(SimpleType(SimpleName:SecureRandom)))))(DoStatement(Block(ExpressionStatement(Assignment(SimpleName:randomInt)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:rnd))(SimpleName:nextInt)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(SimpleName:endInt)(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1)))))))(InfixExpression(SimpleName:randomInt)(INFIX_EXPRESSION_OPERATOR:<)(SimpleName:startInt)))(ExpressionStatement(Assignment(SimpleName:randomStr)(ASSIGNMENT_OPERATOR:=)(InfixExpression(CastExpression(PrimitiveType:char)(SimpleName:randomInt))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName:RuntimeException))(SimpleName:e))))))(ReturnStatement(SimpleName:randomStr))))))