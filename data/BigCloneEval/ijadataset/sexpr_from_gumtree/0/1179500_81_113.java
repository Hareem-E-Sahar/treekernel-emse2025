(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(MarkerAnnotation(SimpleName:Nullable))(Modifier:public)(SimpleType(SimpleName:LSInput))(SimpleName:resolveResource)(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:type))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:namespaceURI))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:publicId))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:systemId))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:baseURI))(Block(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:isLoggable)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Level.FINE)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:fine)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:publicId)(StringLiteral:<STR>)(SimpleName:systemId)(StringLiteral:<STR>)(SimpleName:baseURI)(StringLiteral:<STR>)))))))(VariableDeclarationStatement(SimpleType(SimpleName:InputSource))(VariableDeclarationFragment(SimpleName:inputSource)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:inputSource)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(SimpleName:resolveIntern)(METHOD_INVOCATION_ARGUMENTS(SimpleName:publicId)(SimpleName:systemId))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:log)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Level.SEVERE)(StringLiteral:<STR>)(SimpleName:e)))))))(IfStatement(InfixExpression(SimpleName:inputSource)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName:LSInputSAXWrapper))(SimpleName:inputSource)))))(IfStatement(InfixExpression(SimpleName:baseURI)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:resolved)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:baseURI))(SimpleName:substring)(METHOD_INVOCATION_ARGUMENTS(NumberLiteral:0)(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:baseURI))(SimpleName:lastIndexOf)(METHOD_INVOCATION_ARGUMENTS(CharacterLiteral:<STR>)))(INFIX_EXPRESSION_OPERATOR:+)(NumberLiteral:1))))(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:systemId))))(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:URL))(VariableDeclarationFragment(SimpleName:url)(ClassInstanceCreation(SimpleType(SimpleName:URL))(SimpleName:resolved))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:url))(SimpleName:openConnection)))(SimpleName:connect)))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:isLoggable)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Level.FINE)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:fine)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:resolved)))))))(ExpressionStatement(Assignment(SimpleName:inputSource)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:InputSource))(SimpleName:resolved))))(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName:LSInputSAXWrapper))(SimpleName:inputSource))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:MalformedURLException))(SimpleName:e))(Block))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:IOException))(SimpleName:e))(Block)))))(IfStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:isLoggable)(METHOD_INVOCATION_ARGUMENTS(QualifiedName:Level.WARNING)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:logger))(SimpleName:warning)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:publicId)(StringLiteral:<STR>)(SimpleName:systemId)(StringLiteral:<STR>)(SimpleName:baseURI)(StringLiteral:<STR>)))))))(ReturnStatement(NullLiteral))))))