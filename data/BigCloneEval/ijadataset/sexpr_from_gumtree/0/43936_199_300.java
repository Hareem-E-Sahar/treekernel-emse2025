(CompilationUnit(TypeDeclaration(Modifier:public)(TYPE_DECLARATION_KIND:class)(SimpleName:Test)(MethodDeclaration(Modifier:public)(SimpleType(SimpleName:File))(SimpleName:createZip)(SingleVariableDeclaration(SimpleType(SimpleName:AnnotationFileList))(SimpleName:afList))(SingleVariableDeclaration(PrimitiveType:int)(SimpleName:type))(SingleVariableDeclaration(SimpleType(SimpleName:String))(SimpleName:zip_file_name))(Block(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:temp_zip_dir)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:TEMP_CO))))(IfStatement(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:!)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:temp_zip_dir))(SimpleName:isDirectory)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:temp_zip_dir))(SimpleName:mkdirs)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:absolute_zip_file)(InfixExpression(SimpleName:TEMP_CO)(INFIX_EXPRESSION_OPERATOR:+)(QualifiedName:File.separator)(SimpleName:zip_file_name))))(VariableDeclarationStatement(PrimitiveType:byte)(VariableDeclarationFragment(SimpleName:b)(Dimension)(ArrayCreation(ArrayType(PrimitiveType:byte)(Dimension(NumberLiteral:512))))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:zip_file)(NullLiteral)))(VariableDeclarationStatement(SimpleType(SimpleName:FileOutputStream))(VariableDeclarationFragment(SimpleName:zip_stream)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:zip_file)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:File))(SimpleName:absolute_zip_file))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zip_file))(SimpleName:createNewFile)))(ExpressionStatement(Assignment(SimpleName:zip_stream)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileOutputStream))(SimpleName:absolute_zip_file)))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.FileNotFoundException))(SimpleName:fnfe))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:absolute_zip_file)(StringLiteral:<STR>)))))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.IOException))(SimpleName:ioe))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:absolute_zip_file)(StringLiteral:<STR>))))))))(IfStatement(InfixExpression(SimpleName:zip_stream)(INFIX_EXPRESSION_OPERATOR:==)(NullLiteral))(Block(ReturnStatement(NullLiteral)))(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName:ZipOutputStream))(VariableDeclarationFragment(SimpleName:zout)(ClassInstanceCreation(SimpleType(SimpleName:ZipOutputStream))(SimpleName:zip_stream))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:setComment)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:afList))(SimpleName:size))(INFIX_EXPRESSION_OPERATOR:+)(StringLiteral:<STR>)(SimpleName:zip_file_name)))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:fl)(StringLiteral:<STR>)))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:fc)(NumberLiteral:0)))(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:afList))(SimpleName:size))(StringLiteral:<STR>)))))(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName:Iterator))(VariableDeclarationFragment(SimpleName:i)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:afList))(SimpleName:iterator))))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext))(Block(VariableDeclarationStatement(SimpleType(SimpleName:AnnotationFile))(VariableDeclarationFragment(SimpleName:af)(CastExpression(SimpleType(SimpleName:AnnotationFile))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:next)))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:sourceFile)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getSourceFile))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:sourceFileZipName)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getSourceFileZipName))))(VariableDeclarationStatement(SimpleType(SimpleName:File))(VariableDeclarationFragment(SimpleName:annotationFile)(NullLiteral)))(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:annotationFile)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getAnnotationFile)(METHOD_INVOCATION_ARGUMENTS(SimpleName:type))))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:InvalidAnnotationFileTypeException))(SimpleName:iafte))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iafte))(SimpleName:printStackTrace)))(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:iafte))(SimpleName:getMessage)))))))))(VariableDeclarationStatement(SimpleType(SimpleName:String))(VariableDeclarationFragment(SimpleName:annotationFileZipName)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getAnnotationFileZipName))))(VariableDeclarationStatement(SimpleType(SimpleName:InputStream))(VariableDeclarationFragment(SimpleName:in)(NullLiteral)))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:sourceFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:exists)))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:canRead)))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:sourceFile))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:e)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(SimpleName:sourceFileZipName))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:setTime)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:lastModified)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:setComment)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getSourceFileID))(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:e))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:len)(NumberLiteral:0)))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:len)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b)))))(INFIX_EXPRESSION_OPERATOR:!=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b)(NumberLiteral:0)(SimpleName:len))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeEntry)))(ExpressionStatement(Assignment(SimpleName:fl)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:e)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext)))(StringLiteral:<STR>)(StringLiteral:<STR>))))))(ExpressionStatement(PostfixExpression(SimpleName:fc)(POSTFIX_EXPRESSION_OPERATOR:++))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.FileNotFoundException))(SimpleName:fnfe))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:getAbsolutePath))(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fnfe))(SimpleName:printStackTrace)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:printStackTrace)))))))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName:sourceFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:getAbsolutePath))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:toString))))))))(IfStatement(InfixExpression(SimpleName:sourceFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:exists))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:canRead))))))))))(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName:annotationFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:exists)))(INFIX_EXPRESSION_OPERATOR:&&)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:canRead)))(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName:in)(ASSIGNMENT_OPERATOR:=)(ClassInstanceCreation(SimpleType(SimpleName:FileInputStream))(SimpleName:annotationFile))))(VariableDeclarationStatement(SimpleType(SimpleName:ZipEntry))(VariableDeclarationFragment(SimpleName:e)(ClassInstanceCreation(SimpleType(SimpleName:ZipEntry))(SimpleName:annotationFileZipName))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:setTime)(METHOD_INVOCATION_ARGUMENTS(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:sourceFile))(SimpleName:lastModified)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:setComment)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getPreviousWorkflowHistoryID))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:getWorkflowHistoryID))(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:putNextEntry)(METHOD_INVOCATION_ARGUMENTS(SimpleName:e))))(VariableDeclarationStatement(PrimitiveType:int)(VariableDeclarationFragment(SimpleName:len)(NumberLiteral:0)))(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName:len)(ASSIGNMENT_OPERATOR:=)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:in))(SimpleName:read)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b)))))(INFIX_EXPRESSION_OPERATOR:!=)(PrefixExpression(PREFIX_EXPRESSION_OPERATOR:-)(NumberLiteral:1)))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:write)(METHOD_INVOCATION_ARGUMENTS(SimpleName:b)(NumberLiteral:0)(SimpleName:len))))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:closeEntry)))(ExpressionStatement(Assignment(SimpleName:fl)(ASSIGNMENT_OPERATOR:+=)(InfixExpression(SimpleName:e)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:i))(SimpleName:hasNext)))(StringLiteral:<STR>)(StringLiteral:<STR>))))))(ExpressionStatement(PostfixExpression(SimpleName:fc)(POSTFIX_EXPRESSION_OPERATOR:++))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.FileNotFoundException))(SimpleName:fnfe))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:getAbsolutePath))(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:fnfe))(SimpleName:printStackTrace)))))(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName:Exception))(SimpleName:e))(Block(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:e))(SimpleName:printStackTrace)))))))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName:annotationFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral)))(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:getAbsolutePath))(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:type)(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:af))(SimpleName:validHistory)))))))))(IfStatement(InfixExpression(SimpleName:annotationFile)(INFIX_EXPRESSION_OPERATOR:!=)(NullLiteral))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:exists))(StringLiteral:<STR>)(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:annotationFile))(SimpleName:canRead))))))))))))(ExpressionStatement(MethodInvocation(SimpleName:dmsg)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:user)(StringLiteral:<STR>)(SimpleName:fc)(StringLiteral:<STR>)(SimpleName:fl)(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:zout))(SimpleName:close))))(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName:java.io.IOException))(SimpleName:ioe))(Block(ExpressionStatement(MethodInvocation(SimpleName:derr)(METHOD_INVOCATION_ARGUMENTS(InfixExpression(StringLiteral:<STR>)(INFIX_EXPRESSION_OPERATOR:+)(SimpleName:absolute_zip_file)(StringLiteral:<STR>)))))(ExpressionStatement(MethodInvocation(METHOD_INVOCATION_RECEIVER(SimpleName:ioe))(SimpleName:printStackTrace))))))))(ReturnStatement(SimpleName:zip_file))))))