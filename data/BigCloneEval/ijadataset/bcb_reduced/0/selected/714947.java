package org.apache.fop.render.pdf;

import java.util.Hashtable;

public class CodePointMapping {

    private char[] latin1Map;

    private char[] characters;

    private char[] codepoints;

    private CodePointMapping(int[] table) {
        int nonLatin1 = 0;
        latin1Map = new char[256];
        for (int i = 0; i < table.length; i += 2) {
            if (table[i + 1] < 256) latin1Map[table[i + 1]] = (char) table[i]; else ++nonLatin1;
        }
        characters = new char[nonLatin1];
        codepoints = new char[nonLatin1];
        int top = 0;
        for (int i = 0; i < table.length; i += 2) {
            char c = (char) table[i + 1];
            if (c >= 256) {
                ++top;
                for (int j = top - 1; j >= 0; --j) {
                    if (j > 0 && characters[j - 1] >= c) {
                        characters[j] = characters[j - 1];
                        codepoints[j] = codepoints[j - 1];
                    } else {
                        characters[j] = c;
                        codepoints[j] = (char) table[i];
                        break;
                    }
                }
            }
        }
    }

    public final char mapChar(char c) {
        if (c < 256) {
            return latin1Map[c];
        } else {
            int bot = 0, top = characters.length - 1;
            while (top >= bot) {
                int mid = (bot + top) / 2;
                char mc = characters[mid];
                if (c == mc) return codepoints[mid]; else if (c < mc) top = mid - 1; else bot = mid + 1;
            }
            return 0;
        }
    }

    private static Hashtable mappings;

    static {
        mappings = new Hashtable();
    }

    public static CodePointMapping getMapping(String encoding) {
        CodePointMapping mapping = (CodePointMapping) mappings.get(encoding);
        if (mapping != null) {
            return mapping;
        } else if (encoding.equals("StandardEncoding")) {
            mapping = new CodePointMapping(encStandardEncoding);
            mappings.put("StandardEncoding", mapping);
            return mapping;
        } else if (encoding.equals("ISOLatin1Encoding")) {
            mapping = new CodePointMapping(encISOLatin1Encoding);
            mappings.put("ISOLatin1Encoding", mapping);
            return mapping;
        } else if (encoding.equals("CEEncoding")) {
            mapping = new CodePointMapping(encCEEncoding);
            mappings.put("CEEncoding", mapping);
            return mapping;
        } else if (encoding.equals("MacRomanEncoding")) {
            mapping = new CodePointMapping(encMacRomanEncoding);
            mappings.put("MacRomanEncoding", mapping);
            return mapping;
        } else if (encoding.equals("WinAnsiEncoding")) {
            mapping = new CodePointMapping(encWinAnsiEncoding);
            mappings.put("WinAnsiEncoding", mapping);
            return mapping;
        } else if (encoding.equals("PDFDocEncoding")) {
            mapping = new CodePointMapping(encPDFDocEncoding);
            mappings.put("PDFDocEncoding", mapping);
            return mapping;
        } else if (encoding.equals("SymbolEncoding")) {
            mapping = new CodePointMapping(encSymbolEncoding);
            mappings.put("SymbolEncoding", mapping);
            return mapping;
        } else if (encoding.equals("ZapfDingbatsEncoding")) {
            mapping = new CodePointMapping(encZapfDingbatsEncoding);
            mappings.put("ZapfDingbatsEncoding", mapping);
            return mapping;
        } else {
            return null;
        }
    }

    private static final int[] encStandardEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x2019, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x002D, 0x2d, 0x00AD, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x2018, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7a, 0x007A, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0xa1, 0x00A1, 0xa2, 0x00A2, 0xa3, 0x00A3, 0xa4, 0x2044, 0xa4, 0x2215, 0xa5, 0x00A5, 0xa6, 0x0192, 0xa7, 0x00A7, 0xa8, 0x00A4, 0xa9, 0x0027, 0xaa, 0x201C, 0xab, 0x00AB, 0xac, 0x2039, 0xad, 0x203A, 0xae, 0xFB01, 0xaf, 0xFB02, 0xb1, 0x2013, 0xb2, 0x2020, 0xb3, 0x2021, 0xb4, 0x00B7, 0xb4, 0x2219, 0xb6, 0x00B6, 0xb7, 0x2022, 0xb8, 0x201A, 0xb9, 0x201E, 0xba, 0x201D, 0xbb, 0x00BB, 0xbc, 0x2026, 0xbd, 0x2030, 0xbf, 0x00BF, 0xc1, 0x0060, 0xc2, 0x00B4, 0xc3, 0x02C6, 0xc4, 0x02DC, 0xc5, 0x00AF, 0xc5, 0x02C9, 0xc6, 0x02D8, 0xc7, 0x02D9, 0xc8, 0x00A8, 0xca, 0x02DA, 0xcb, 0x00B8, 0xcd, 0x02DD, 0xce, 0x02DB, 0xcf, 0x02C7, 0xd0, 0x2014, 0xe1, 0x00C6, 0xe3, 0x00AA, 0xe8, 0x0141, 0xe9, 0x00D8, 0xea, 0x0152, 0xeb, 0x00BA, 0xf1, 0x00E6, 0xf5, 0x0131, 0xf8, 0x0142, 0xf9, 0x00F8, 0xfa, 0x0153, 0xfb, 0x00DF };

    private static final int[] encISOLatin1Encoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x2019, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x2212, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x2018, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7a, 0x007A, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0x90, 0x0131, 0x91, 0x0060, 0x93, 0x02C6, 0x94, 0x02DC, 0x96, 0x02D8, 0x97, 0x02D9, 0x9a, 0x02DA, 0x9d, 0x02DD, 0x9e, 0x02DB, 0x9f, 0x02C7, 0xa1, 0x00A1, 0xa2, 0x00A2, 0xa3, 0x00A3, 0xa4, 0x00A4, 0xa5, 0x00A5, 0xa6, 0x00A6, 0xa7, 0x00A7, 0xa8, 0x00A8, 0xa9, 0x00A9, 0xaa, 0x00AA, 0xab, 0x00AB, 0xac, 0x00AC, 0xad, 0x002D, 0xad, 0x00AD, 0xae, 0x00AE, 0xaf, 0x00AF, 0xaf, 0x02C9, 0xb0, 0x00B0, 0xb1, 0x00B1, 0xb2, 0x00B2, 0xb3, 0x00B3, 0xb4, 0x00B4, 0xb5, 0x00B5, 0xb5, 0x03BC, 0xb6, 0x00B6, 0xb7, 0x00B7, 0xb7, 0x2219, 0xb8, 0x00B8, 0xb9, 0x00B9, 0xba, 0x00BA, 0xbb, 0x00BB, 0xbc, 0x00BC, 0xbd, 0x00BD, 0xbe, 0x00BE, 0xbf, 0x00BF, 0xc0, 0x00C0, 0xc1, 0x00C1, 0xc2, 0x00C2, 0xc3, 0x00C3, 0xc4, 0x00C4, 0xc5, 0x00C5, 0xc6, 0x00C6, 0xc7, 0x00C7, 0xc8, 0x00C8, 0xc9, 0x00C9, 0xca, 0x00CA, 0xcb, 0x00CB, 0xcc, 0x00CC, 0xcd, 0x00CD, 0xce, 0x00CE, 0xcf, 0x00CF, 0xd0, 0x00D0, 0xd1, 0x00D1, 0xd2, 0x00D2, 0xd3, 0x00D3, 0xd4, 0x00D4, 0xd5, 0x00D5, 0xd6, 0x00D6, 0xd7, 0x00D7, 0xd8, 0x00D8, 0xd9, 0x00D9, 0xda, 0x00DA, 0xdb, 0x00DB, 0xdc, 0x00DC, 0xdd, 0x00DD, 0xde, 0x00DE, 0xdf, 0x00DF, 0xe0, 0x00E0, 0xe1, 0x00E1, 0xe2, 0x00E2, 0xe3, 0x00E3, 0xe4, 0x00E4, 0xe5, 0x00E5, 0xe6, 0x00E6, 0xe7, 0x00E7, 0xe8, 0x00E8, 0xe9, 0x00E9, 0xea, 0x00EA, 0xeb, 0x00EB, 0xec, 0x00EC, 0xed, 0x00ED, 0xee, 0x00EE, 0xef, 0x00EF, 0xf0, 0x00F0, 0xf1, 0x00F1, 0xf2, 0x00F2, 0xf3, 0x00F3, 0xf4, 0x00F4, 0xf5, 0x00F5, 0xf6, 0x00F6, 0xf7, 0x00F7, 0xf8, 0x00F8, 0xf9, 0x00F9, 0xfa, 0x00FA, 0xfb, 0x00FB, 0xfc, 0x00FC, 0xfd, 0x00FD, 0xfe, 0x00FE, 0xff, 0x00FF };

    private static final int[] encCEEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x0027, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x002D, 0x2d, 0x00AD, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x0060, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7a, 0x007A, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0x82, 0x201A, 0x84, 0x201E, 0x85, 0x2026, 0x86, 0x2020, 0x87, 0x2021, 0x89, 0x2030, 0x8a, 0x0160, 0x8b, 0x2039, 0x8c, 0x015A, 0x8d, 0x0164, 0x8e, 0x017D, 0x8f, 0x0179, 0x91, 0x2018, 0x92, 0x2019, 0x93, 0x201C, 0x94, 0x201D, 0x95, 0x2022, 0x96, 0x2013, 0x97, 0x2014, 0x99, 0x2122, 0x9a, 0x0161, 0x9b, 0x203A, 0x9c, 0x015B, 0x9d, 0x0165, 0x9e, 0x017E, 0x9f, 0x017A, 0xa1, 0x02C7, 0xa2, 0x02D8, 0xa3, 0x0141, 0xa4, 0x00A4, 0xa5, 0x0104, 0xa6, 0x00A6, 0xa7, 0x00A7, 0xa8, 0x00A8, 0xa9, 0x00A9, 0xaa, 0x0218, 0xab, 0x00AB, 0xac, 0x00AC, 0xae, 0x00AE, 0xaf, 0x017B, 0xb0, 0x00B0, 0xb1, 0x00B1, 0xb2, 0x02DB, 0xb3, 0x0142, 0xb4, 0x00B4, 0xb5, 0x00B5, 0xb5, 0x03BC, 0xb6, 0x00B6, 0xb7, 0x00B7, 0xb7, 0x2219, 0xb8, 0x00B8, 0xb9, 0x0105, 0xba, 0x0219, 0xbb, 0x00BB, 0xbc, 0x013D, 0xbd, 0x02DD, 0xbe, 0x013E, 0xbf, 0x017C, 0xc0, 0x0154, 0xc1, 0x00C1, 0xc2, 0x00C2, 0xc3, 0x0102, 0xc4, 0x00C4, 0xc5, 0x0139, 0xc6, 0x0106, 0xc7, 0x00C7, 0xc8, 0x010C, 0xc9, 0x00C9, 0xca, 0x0118, 0xcb, 0x00CB, 0xcc, 0x011A, 0xcd, 0x00CD, 0xce, 0x00CE, 0xcf, 0x010E, 0xd0, 0x0110, 0xd1, 0x0143, 0xd2, 0x0147, 0xd3, 0x00D3, 0xd4, 0x00D4, 0xd5, 0x0150, 0xd6, 0x00D6, 0xd7, 0x00D7, 0xd8, 0x0158, 0xd9, 0x016E, 0xda, 0x00DA, 0xdb, 0x0170, 0xdc, 0x00DC, 0xdd, 0x00DD, 0xde, 0x0162, 0xde, 0x021A, 0xdf, 0x00DF, 0xe0, 0x0155, 0xe1, 0x00E1, 0xe2, 0x00E2, 0xe3, 0x0103, 0xe4, 0x00E4, 0xe5, 0x013A, 0xe6, 0x0107, 0xe7, 0x00E7, 0xe8, 0x010D, 0xe9, 0x00E9, 0xea, 0x0119, 0xeb, 0x00EB, 0xec, 0x011B, 0xed, 0x00ED, 0xee, 0x00EE, 0xef, 0x010F, 0xf0, 0x0111, 0xf1, 0x0144, 0xf2, 0x0148, 0xf3, 0x00F3, 0xf4, 0x00F4, 0xf5, 0x0151, 0xf6, 0x00F6, 0xf7, 0x00F7, 0xf8, 0x0159, 0xf9, 0x016F, 0xfa, 0x00FA, 0xfb, 0x0171, 0xfc, 0x00FC, 0xfd, 0x00FD, 0xfe, 0x0163, 0xfe, 0x021B, 0xff, 0x02D9 };

    private static final int[] encMacRomanEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x0027, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x002D, 0x2d, 0x00AD, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x0060, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0x80, 0x00C4, 0x81, 0x00C5, 0x82, 0x00C7, 0x83, 0x00C9, 0x84, 0x00D1, 0x85, 0x00D6, 0x86, 0x00DC, 0x87, 0x00E1, 0x88, 0x00E0, 0x89, 0x00E2, 0x8a, 0x00E4, 0x8b, 0x00E3, 0x8c, 0x00E5, 0x8d, 0x00E7, 0x8e, 0x00E9, 0x8f, 0x00E8, 0x90, 0x00EA, 0x91, 0x00EB, 0x92, 0x00ED, 0x93, 0x00EC, 0x94, 0x00EE, 0x95, 0x00EF, 0x96, 0x00F1, 0x97, 0x00F3, 0x98, 0x00F2, 0x99, 0x00F4, 0x9a, 0x00F6, 0x9b, 0x00F5, 0x9c, 0x00FA, 0x9d, 0x00F9, 0x9e, 0x00FB, 0x9f, 0x00FC, 0xa0, 0x2020, 0xa1, 0x00B0, 0xa2, 0x00A2, 0xa3, 0x00A3, 0xa4, 0x00A7, 0xa5, 0x2022, 0xa6, 0x00B6, 0xa7, 0x00DF, 0xa8, 0x00AE, 0xa9, 0x00A9, 0xaa, 0x2122, 0xab, 0x00B4, 0xac, 0x00A8, 0xae, 0x00C6, 0xaf, 0x00D8, 0xb1, 0x00B1, 0xb5, 0x00B5, 0xb5, 0x03BC, 0xbb, 0x00AA, 0xbc, 0x00BA, 0xbe, 0x00E6, 0xbf, 0x00F8, 0xc0, 0x00BF, 0xc1, 0x00A1, 0xc2, 0x00AC, 0xc4, 0x0192, 0xc7, 0x00AB, 0xc8, 0x00BB, 0xc9, 0x2026, 0xcb, 0x00C0, 0xcc, 0x00C3, 0xcd, 0x00D5, 0xce, 0x0152, 0xcf, 0x0153, 0xd0, 0x2013, 0xd1, 0x2014, 0xd2, 0x201C, 0xd3, 0x201D, 0xd4, 0x2018, 0xd5, 0x2019, 0xd6, 0x00F7, 0xd9, 0x0178, 0xda, 0x2044, 0xda, 0x2215, 0xdb, 0x00A4, 0xdc, 0x2039, 0xdd, 0x203A, 0xde, 0xFB01, 0xdf, 0xFB02, 0xe0, 0x2021, 0xe1, 0x00B7, 0xe1, 0x2219, 0xe2, 0x201A, 0xe3, 0x201E, 0xe4, 0x2030, 0xe5, 0x00C2, 0xe6, 0x00CA, 0xe7, 0x00C1, 0xe8, 0x00CB, 0xe9, 0x00C8, 0xea, 0x00CD, 0xeb, 0x00CE, 0xec, 0x00CF, 0xed, 0x00CC, 0xee, 0x00D3, 0xef, 0x00D4, 0xf1, 0x00D2, 0xf2, 0x00DA, 0xf3, 0x00DB, 0xf4, 0x00D9, 0xf5, 0x0131, 0xf6, 0x02C6, 0xf7, 0x02DC, 0xf8, 0x00AF, 0xf8, 0x02C9, 0xf9, 0x02D8, 0xfa, 0x02D9, 0xfb, 0x02DA, 0xfc, 0x00B8, 0xfd, 0x02DD, 0xfe, 0x02DB, 0xff, 0x02C7, 0xd8, 0x00FF, 0xb4, 0x00A5, 0x7a, 0x007A };

    private static final int[] encWinAnsiEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x0027, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x002D, 0x2d, 0x00AD, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x0060, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7a, 0x007A, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0x80, 0x20AC, 0x82, 0x201A, 0x83, 0x0192, 0x84, 0x201E, 0x85, 0x2026, 0x86, 0x2020, 0x87, 0x2021, 0x88, 0x02C6, 0x89, 0x2030, 0x8a, 0x0160, 0x8b, 0x2039, 0x8c, 0x0152, 0x8e, 0x017D, 0x91, 0x2018, 0x92, 0x2019, 0x93, 0x201C, 0x94, 0x201D, 0x95, 0x2022, 0x96, 0x2013, 0x97, 0x2014, 0x98, 0x02DC, 0x99, 0x2122, 0x9a, 0x0161, 0x9b, 0x203A, 0x9c, 0x0153, 0x9e, 0x017E, 0x9f, 0x0178, 0xa1, 0x00A1, 0xa2, 0x00A2, 0xa3, 0x00A3, 0xa4, 0x00A4, 0xa5, 0x00A5, 0xa6, 0x00A6, 0xa7, 0x00A7, 0xa8, 0x00A8, 0xa9, 0x00A9, 0xaa, 0x00AA, 0xab, 0x00AB, 0xac, 0x00AC, 0xae, 0x00AE, 0xaf, 0x00AF, 0xaf, 0x02C9, 0xb0, 0x00B0, 0xb1, 0x00B1, 0xb2, 0x00B2, 0xb3, 0x00B3, 0xb4, 0x00B4, 0xb5, 0x00B5, 0xb5, 0x03BC, 0xb6, 0x00B6, 0xb7, 0x00B7, 0xb7, 0x2219, 0xb8, 0x00B8, 0xb9, 0x00B9, 0xba, 0x00BA, 0xbb, 0x00BB, 0xbc, 0x00BC, 0xbd, 0x00BD, 0xbe, 0x00BE, 0xbf, 0x00BF, 0xc0, 0x00C0, 0xc1, 0x00C1, 0xc2, 0x00C2, 0xc3, 0x00C3, 0xc4, 0x00C4, 0xc5, 0x00C5, 0xc6, 0x00C6, 0xc7, 0x00C7, 0xc8, 0x00C8, 0xc9, 0x00C9, 0xca, 0x00CA, 0xcb, 0x00CB, 0xcc, 0x00CC, 0xcd, 0x00CD, 0xce, 0x00CE, 0xcf, 0x00CF, 0xd0, 0x00D0, 0xd1, 0x00D1, 0xd2, 0x00D2, 0xd3, 0x00D3, 0xd4, 0x00D4, 0xd5, 0x00D5, 0xd6, 0x00D6, 0xd7, 0x00D7, 0xd8, 0x00D8, 0xd9, 0x00D9, 0xda, 0x00DA, 0xdb, 0x00DB, 0xdc, 0x00DC, 0xdd, 0x00DD, 0xde, 0x00DE, 0xdf, 0x00DF, 0xe0, 0x00E0, 0xe1, 0x00E1, 0xe2, 0x00E2, 0xe3, 0x00E3, 0xe4, 0x00E4, 0xe5, 0x00E5, 0xe6, 0x00E6, 0xe7, 0x00E7, 0xe8, 0x00E8, 0xe9, 0x00E9, 0xea, 0x00EA, 0xeb, 0x00EB, 0xec, 0x00EC, 0xed, 0x00ED, 0xee, 0x00EE, 0xef, 0x00EF, 0xf0, 0x00F0, 0xf1, 0x00F1, 0xf2, 0x00F2, 0xf3, 0x00F3, 0xf4, 0x00F4, 0xf5, 0x00F5, 0xf6, 0x00F6, 0xf7, 0x00F7, 0xf8, 0x00F8, 0xf9, 0x00F9, 0xfa, 0x00FA, 0xfb, 0x00FB, 0xfc, 0x00FC, 0xfd, 0x00FD, 0xfe, 0x00FE, 0xff, 0x00FF };

    private static final int[] encPDFDocEncoding = { 0x18, 0x02D8, 0x19, 0x02C7, 0x1a, 0x02C6, 0x1b, 0x02D9, 0x1c, 0x02DD, 0x1d, 0x02DB, 0x1e, 0x02DA, 0x1f, 0x02DC, 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x0022, 0x23, 0x0023, 0x24, 0x0024, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x0027, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x002A, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x002D, 0x2d, 0x00AD, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x0040, 0x41, 0x0041, 0x42, 0x0042, 0x43, 0x0043, 0x44, 0x0044, 0x45, 0x0045, 0x46, 0x0046, 0x47, 0x0047, 0x48, 0x0048, 0x49, 0x0049, 0x4a, 0x004A, 0x4b, 0x004B, 0x4c, 0x004C, 0x4d, 0x004D, 0x4e, 0x004E, 0x4f, 0x004F, 0x50, 0x0050, 0x51, 0x0051, 0x52, 0x0052, 0x53, 0x0053, 0x54, 0x0054, 0x55, 0x0055, 0x56, 0x0056, 0x57, 0x0057, 0x58, 0x0058, 0x59, 0x0059, 0x5a, 0x005A, 0x5b, 0x005B, 0x5c, 0x005C, 0x5d, 0x005D, 0x5e, 0x005E, 0x5f, 0x005F, 0x60, 0x0060, 0x61, 0x0061, 0x62, 0x0062, 0x63, 0x0063, 0x64, 0x0064, 0x65, 0x0065, 0x66, 0x0066, 0x67, 0x0067, 0x68, 0x0068, 0x69, 0x0069, 0x6a, 0x006A, 0x6b, 0x006B, 0x6c, 0x006C, 0x6d, 0x006D, 0x6e, 0x006E, 0x6f, 0x006F, 0x70, 0x0070, 0x71, 0x0071, 0x72, 0x0072, 0x73, 0x0073, 0x74, 0x0074, 0x75, 0x0075, 0x76, 0x0076, 0x77, 0x0077, 0x78, 0x0078, 0x79, 0x0079, 0x7a, 0x007A, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x007E, 0x80, 0x2022, 0x81, 0x2020, 0x82, 0x2021, 0x83, 0x2026, 0x84, 0x2014, 0x85, 0x2013, 0x86, 0x0192, 0x87, 0x2044, 0x87, 0x2215, 0x88, 0x2039, 0x89, 0x203A, 0x8a, 0x2212, 0x8b, 0x2030, 0x8c, 0x201E, 0x8d, 0x201C, 0x8e, 0x201D, 0x8f, 0x2018, 0x90, 0x2019, 0x91, 0x201A, 0x92, 0x2122, 0x93, 0xFB01, 0x94, 0xFB02, 0x95, 0x0141, 0x96, 0x0152, 0x97, 0x0160, 0x98, 0x0178, 0x99, 0x017D, 0x9a, 0x0131, 0x9b, 0x0142, 0x9c, 0x0153, 0x9d, 0x0161, 0x9e, 0x017E, 0xa0, 0x20AC, 0xa1, 0x00A1, 0xa2, 0x00A2, 0xa3, 0x00A3, 0xa4, 0x00A4, 0xa5, 0x00A5, 0xa6, 0x00A6, 0xa7, 0x00A7, 0xa8, 0x00A8, 0xa9, 0x00A9, 0xaa, 0x00AA, 0xab, 0x00AB, 0xac, 0x00AC, 0xae, 0x00AE, 0xaf, 0x00AF, 0xaf, 0x02C9, 0xb0, 0x00B0, 0xb1, 0x00B1, 0xb2, 0x00B2, 0xb3, 0x00B3, 0xb4, 0x00B4, 0xb5, 0x00B5, 0xb5, 0x03BC, 0xb6, 0x00B6, 0xb7, 0x00B7, 0xb7, 0x2219, 0xb8, 0x00B8, 0xb9, 0x00B9, 0xba, 0x00BA, 0xbb, 0x00BB, 0xbc, 0x00BC, 0xbd, 0x00BD, 0xbe, 0x00BE, 0xbf, 0x00BF, 0xc0, 0x00C0, 0xc1, 0x00C1, 0xc2, 0x00C2, 0xc3, 0x00C3, 0xc4, 0x00C4, 0xc5, 0x00C5, 0xc6, 0x00C6, 0xc7, 0x00C7, 0xc8, 0x00C8, 0xc9, 0x00C9, 0xca, 0x00CA, 0xcb, 0x00CB, 0xcc, 0x00CC, 0xcd, 0x00CD, 0xce, 0x00CE, 0xcf, 0x00CF, 0xd0, 0x00D0, 0xd1, 0x00D1, 0xd2, 0x00D2, 0xd3, 0x00D3, 0xd4, 0x00D4, 0xd5, 0x00D5, 0xd6, 0x00D6, 0xd7, 0x00D7, 0xd8, 0x00D8, 0xd9, 0x00D9, 0xda, 0x00DA, 0xdb, 0x00DB, 0xdc, 0x00DC, 0xdd, 0x00DD, 0xde, 0x00DE, 0xdf, 0x00DF, 0xe0, 0x00E0, 0xe1, 0x00E1, 0xe2, 0x00E2, 0xe3, 0x00E3, 0xe4, 0x00E4, 0xe5, 0x00E5, 0xe6, 0x00E6, 0xe7, 0x00E7, 0xe8, 0x00E8, 0xe9, 0x00E9, 0xea, 0x00EA, 0xeb, 0x00EB, 0xec, 0x00EC, 0xed, 0x00ED, 0xee, 0x00EE, 0xef, 0x00EF, 0xf0, 0x00F0, 0xf1, 0x00F1, 0xf2, 0x00F2, 0xf3, 0x00F3, 0xf4, 0x00F4, 0xf5, 0x00F5, 0xf6, 0x00F6, 0xf7, 0x00F7, 0xf8, 0x00F8, 0xf9, 0x00F9, 0xfa, 0x00FA, 0xfb, 0x00FB, 0xfc, 0x00FC, 0xfd, 0x00FD, 0xfe, 0x00FE, 0xff, 0x00FF };

    private static final int[] encSymbolEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x0021, 0x22, 0x2200, 0x23, 0x0023, 0x24, 0x2203, 0x25, 0x0025, 0x26, 0x0026, 0x27, 0x220B, 0x28, 0x0028, 0x29, 0x0029, 0x2a, 0x2217, 0x2b, 0x002B, 0x2c, 0x002C, 0x2d, 0x2212, 0x2e, 0x002E, 0x2f, 0x002F, 0x30, 0x0030, 0x31, 0x0031, 0x32, 0x0032, 0x33, 0x0033, 0x34, 0x0034, 0x35, 0x0035, 0x36, 0x0036, 0x37, 0x0037, 0x38, 0x0038, 0x39, 0x0039, 0x3a, 0x003A, 0x3b, 0x003B, 0x3c, 0x003C, 0x3d, 0x003D, 0x3e, 0x003E, 0x3f, 0x003F, 0x40, 0x2245, 0x41, 0x0391, 0x42, 0x0392, 0x43, 0x03A7, 0x44, 0x2206, 0x44, 0x0394, 0x45, 0x0395, 0x46, 0x03A6, 0x47, 0x0393, 0x48, 0x0397, 0x49, 0x0399, 0x4a, 0x03D1, 0x4b, 0x039A, 0x4c, 0x039B, 0x4d, 0x039C, 0x4e, 0x039D, 0x4f, 0x039F, 0x50, 0x03A0, 0x51, 0x0398, 0x52, 0x03A1, 0x53, 0x03A3, 0x54, 0x03A4, 0x55, 0x03A5, 0x56, 0x03C2, 0x57, 0x2126, 0x57, 0x03A9, 0x58, 0x039E, 0x59, 0x03A8, 0x5a, 0x0396, 0x5b, 0x005B, 0x5c, 0x2234, 0x5d, 0x005D, 0x5e, 0x22A5, 0x5f, 0x005F, 0x60, 0xF8E5, 0x61, 0x03B1, 0x62, 0x03B2, 0x63, 0x03C7, 0x64, 0x03B4, 0x65, 0x03B5, 0x66, 0x03C6, 0x67, 0x03B3, 0x68, 0x03B7, 0x69, 0x03B9, 0x6a, 0x03D5, 0x6b, 0x03BA, 0x6c, 0x03BB, 0x6d, 0x00B5, 0x6d, 0x03BC, 0x6e, 0x03BD, 0x6f, 0x03BF, 0x70, 0x03C0, 0x71, 0x03B8, 0x72, 0x03C1, 0x73, 0x03C3, 0x74, 0x03C4, 0x75, 0x03C5, 0x76, 0x03D6, 0x77, 0x03C9, 0x78, 0x03BE, 0x79, 0x03C8, 0x7a, 0x03B6, 0x7b, 0x007B, 0x7c, 0x007C, 0x7d, 0x007D, 0x7e, 0x223C, 0xa0, 0x20AC, 0xa1, 0x03D2, 0xa2, 0x2032, 0xa3, 0x2264, 0xa4, 0x2044, 0xa4, 0x2215, 0xa5, 0x221E, 0xa6, 0x0192, 0xa7, 0x2663, 0xa8, 0x2666, 0xa9, 0x2665, 0xaa, 0x2660, 0xab, 0x2194, 0xac, 0x2190, 0xad, 0x2191, 0xae, 0x2192, 0xaf, 0x2193, 0xb0, 0x00B0, 0xb1, 0x00B1, 0xb2, 0x2033, 0xb3, 0x2265, 0xb4, 0x00D7, 0xb5, 0x221D, 0xb6, 0x2202, 0xb7, 0x2022, 0xb8, 0x00F7, 0xb9, 0x2260, 0xba, 0x2261, 0xbb, 0x2248, 0xbc, 0x2026, 0xbd, 0xF8E6, 0xbe, 0xF8E7, 0xbf, 0x21B5, 0xc0, 0x2135, 0xc1, 0x2111, 0xc2, 0x211C, 0xc3, 0x2118, 0xc4, 0x2297, 0xc5, 0x2295, 0xc6, 0x2205, 0xc7, 0x2229, 0xc8, 0x222A, 0xc9, 0x2283, 0xca, 0x2287, 0xcb, 0x2284, 0xcc, 0x2282, 0xcd, 0x2286, 0xce, 0x2208, 0xcf, 0x2209, 0xd0, 0x2220, 0xd1, 0x2207, 0xd2, 0xF6DA, 0xd3, 0xF6D9, 0xd4, 0xF6DB, 0xd5, 0x220F, 0xd6, 0x221A, 0xd7, 0x22C5, 0xd8, 0x00AC, 0xd9, 0x2227, 0xda, 0x2228, 0xdb, 0x21D4, 0xdc, 0x21D0, 0xdd, 0x21D1, 0xde, 0x21D2, 0xdf, 0x21D3, 0xe0, 0x25CA, 0xe1, 0x2329, 0xe2, 0xF8E8, 0xe3, 0xF8E9, 0xe4, 0xF8EA, 0xe5, 0x2211, 0xe6, 0xF8EB, 0xe7, 0xF8EC, 0xe8, 0xF8ED, 0xe9, 0xF8EE, 0xea, 0xF8EF, 0xeb, 0xF8F0, 0xec, 0xF8F1, 0xed, 0xF8F2, 0xee, 0xF8F3, 0xef, 0xF8F4, 0xf1, 0x232A, 0xf2, 0x222B, 0xf3, 0x2320, 0xf4, 0xF8F5, 0xf5, 0x2321, 0xf6, 0xF8F6, 0xf7, 0xF8F7, 0xf8, 0xF8F8, 0xf9, 0xF8F9, 0xfa, 0xF8FA, 0xfb, 0xF8FB, 0xfc, 0xF8FC, 0xfd, 0xF8FD, 0xfe, 0xF8FE };

    private static final int[] encZapfDingbatsEncoding = { 0x20, 0x0020, 0x20, 0x00A0, 0x21, 0x2701, 0x22, 0x2702, 0x23, 0x2703, 0x24, 0x2704, 0x25, 0x260E, 0x26, 0x2706, 0x27, 0x2707, 0x28, 0x2708, 0x29, 0x2709, 0x2A, 0x261B, 0x2B, 0x261E, 0x2C, 0x270C, 0x2D, 0x270D, 0x2E, 0x270E, 0x2F, 0x270F, 0x30, 0x2710, 0x31, 0x2711, 0x32, 0x2712, 0x33, 0x2713, 0x34, 0x2714, 0x35, 0x2715, 0x36, 0x2716, 0x37, 0x2717, 0x38, 0x2718, 0x39, 0x2719, 0x3A, 0x271A, 0x3B, 0x271B, 0x3C, 0x271C, 0x3D, 0x271D, 0x3E, 0x271E, 0x3F, 0x271F, 0x40, 0x2720, 0x41, 0x2721, 0x42, 0x2722, 0x43, 0x2723, 0x44, 0x2724, 0x45, 0x2725, 0x46, 0x2726, 0x47, 0x2727, 0x48, 0x2605, 0x49, 0x2729, 0x4A, 0x272A, 0x4B, 0x272B, 0x4C, 0x272C, 0x4D, 0x272D, 0x4E, 0x272E, 0x4F, 0x272F, 0x50, 0x2730, 0x51, 0x2731, 0x52, 0x2732, 0x53, 0x2733, 0x54, 0x2734, 0x55, 0x2735, 0x56, 0x2736, 0x57, 0x2737, 0x58, 0x2738, 0x59, 0x2739, 0x5A, 0x273A, 0x5B, 0x273B, 0x5C, 0x273C, 0x5D, 0x273D, 0x5E, 0x273E, 0x5F, 0x273F, 0x60, 0x2740, 0x61, 0x2741, 0x62, 0x2742, 0x63, 0x2743, 0x64, 0x2744, 0x65, 0x2745, 0x66, 0x2746, 0x67, 0x2747, 0x68, 0x2748, 0x69, 0x2749, 0x6A, 0x274A, 0x6B, 0x274B, 0x6C, 0x25CF, 0x6D, 0x274D, 0x6E, 0x25A0, 0x6F, 0x274F, 0x70, 0x2750, 0x71, 0x2751, 0x72, 0x2752, 0x73, 0x25B2, 0x74, 0x25BC, 0x75, 0x25C6, 0x76, 0x2756, 0x77, 0x25D7, 0x78, 0x2758, 0x79, 0x2759, 0x7A, 0x275A, 0x7B, 0x275B, 0x7C, 0x275C, 0x7D, 0x275D, 0x7E, 0x275E, 0x80, 0xF8D7, 0x81, 0xF8D8, 0x82, 0xF8D9, 0x83, 0xF8DA, 0x84, 0xF8DB, 0x85, 0xF8DC, 0x86, 0xF8DD, 0x87, 0xF8DE, 0x88, 0xF8DF, 0x89, 0xF8E0, 0x8A, 0xF8E1, 0x8B, 0xF8E2, 0x8C, 0xF8E3, 0x8D, 0xF8E4, 0xA1, 0x2761, 0xA2, 0x2762, 0xA3, 0x2763, 0xA4, 0x2764, 0xA5, 0x2765, 0xA6, 0x2766, 0xA7, 0x2767, 0xA8, 0x2663, 0xA9, 0x2666, 0xAA, 0x2665, 0xAB, 0x2660, 0xAC, 0x2460, 0xAD, 0x2461, 0xAE, 0x2462, 0xAF, 0x2463, 0xB0, 0x2464, 0xB1, 0x2465, 0xB2, 0x2466, 0xB3, 0x2467, 0xB4, 0x2468, 0xB5, 0x2469, 0xB6, 0x2776, 0xB7, 0x2777, 0xB8, 0x2778, 0xB9, 0x2779, 0xBA, 0x277A, 0xBB, 0x277B, 0xBC, 0x277C, 0xBD, 0x277D, 0xBE, 0x277E, 0xBF, 0x277F, 0xC0, 0x2780, 0xC1, 0x2781, 0xC2, 0x2782, 0xC3, 0x2783, 0xC4, 0x2784, 0xC5, 0x2785, 0xC6, 0x2786, 0xC7, 0x2787, 0xC8, 0x2788, 0xC9, 0x2789, 0xCA, 0x278A, 0xCB, 0x278B, 0xCC, 0x278C, 0xCD, 0x278D, 0xCE, 0x278E, 0xCF, 0x278F, 0xD0, 0x2790, 0xD1, 0x2791, 0xD2, 0x2792, 0xD3, 0x2793, 0xD4, 0x2794, 0xD5, 0x2192, 0xD6, 0x2194, 0xD7, 0x2195, 0xD8, 0x2798, 0xD9, 0x2799, 0xDA, 0x279A, 0xDB, 0x279B, 0xDC, 0x279C, 0xDD, 0x279D, 0xDE, 0x279E, 0xDF, 0x279F, 0xE0, 0x27A0, 0xE1, 0x27A1, 0xE2, 0x27A2, 0xE3, 0x27A3, 0xE4, 0x27A4, 0xE5, 0x27A5, 0xE6, 0x27A6, 0xE7, 0x27A7, 0xE8, 0x27A8, 0xE9, 0x27A9, 0xEA, 0x27AA, 0xEB, 0x27AB, 0xEC, 0x27AC, 0xED, 0x27AD, 0xEE, 0x27AE, 0xEF, 0x27AF, 0xF1, 0x27B1, 0xF2, 0x27B2, 0xF3, 0x27B3, 0xF4, 0x27B4, 0xF5, 0x27B5, 0xF6, 0x27B6, 0xF7, 0x27B7, 0xF8, 0x27B8, 0xF9, 0x27B9, 0xFA, 0x27BA, 0xFB, 0x27BB, 0xFC, 0x27BC, 0xFD, 0x27BD, 0xFE, 0x27BE };
}
