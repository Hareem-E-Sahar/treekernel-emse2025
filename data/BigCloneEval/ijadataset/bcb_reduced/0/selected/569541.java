package subget.gui;

import java.awt.Cursor;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import subget.Global;
import subget.bundles.Bundles;

/**
 *
 * @author  povder
 */
public class OptionsDatabasePanel extends javax.swing.JPanel {

    /** Creates new form OptionsDatabasePanel */
    public OptionsDatabasePanel() {
        initComponents();
        readConfig();
        dbTable.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                changed();
            }
        });
        dbTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int row = dbTable.getSelectedRow();
                if (row != -1) {
                    if (dbTable.getValueAt(row, 0).equals("NAPI Projekt")) {
                        urlLabel.setText("http://www.napiprojekt.pl");
                        infoArea.setText(Bundles.subgetBundle.getString("Database_contains_many_Polish_subtitles_and_some_English_subtitles.\n\n") + Bundles.subgetBundle.getString("NAPI_Projekt's_database_supports_only_subtitles_in_formats:_MPL2,_mDVD,_TMP.\n\n") + Bundles.subgetBundle.getString("This_database_can_have_only_one_subtitle_file_to_movie_per_language."));
                        return;
                    }
                    if (dbTable.getValueAt(row, 0).equals("OpenSubtitles")) {
                        urlLabel.setText("http://www.opensubtitles.org");
                        infoArea.setText(Bundles.subgetBundle.getString("Database_contains_subtitles_in_50_languages.") + Bundles.subgetBundle.getString("_Currently_over_50,000_subtitle_files_are_present_in_database.\n\n") + Bundles.subgetBundle.getString("OSDb's_supported_subtitle_formats:_ASS,_SSA,_SubRip,_SubViewer,_SAMI,_MPL2,_mDVD,_TMP."));
                        return;
                    }
                } else {
                    urlLabel.setText("");
                    infoArea.setText(Bundles.subgetBundle.getString("Click_on_one_of_rows_in_the_table_to_see_information."));
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        topPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dbTable = new subget.gui.DbTable();
        supportedLabel = new javax.swing.JLabel();
        infoPanel = new javax.swing.JPanel();
        urlLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoArea = new javax.swing.JTextArea();
        urlLabel = new javax.swing.JLabel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        discardButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        topPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        topPanel.setMaximumSize(new java.awt.Dimension(3200, 3200));
        topPanel.setMinimumSize(new java.awt.Dimension(400, 300));
        topPanel.setPreferredSize(new java.awt.Dimension(100, 200));
        dbTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { "NAPI Projekt", null, null }, { "OpenSubtitles", null, null } }, new String[] { "Database", "Download enabled", "Upload enabled" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class };

            boolean[] canEdit = new boolean[] { false, true, true };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        dbTable.setFillsViewportHeight(true);
        dbTable.setShowHorizontalLines(false);
        dbTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(dbTable);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("subget/bundles/Bundle");
        dbTable.getColumnModel().getColumn(0).setResizable(false);
        dbTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("OptionsDatabasePanel.dbTable.columnModel.title0"));
        dbTable.getColumnModel().getColumn(1).setResizable(false);
        dbTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("OptionsDatabasePanel.dbTable.columnModel.title1"));
        dbTable.getColumnModel().getColumn(2).setResizable(false);
        dbTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("OptionsDatabasePanel.dbTable.columnModel.title2"));
        supportedLabel.setText(bundle.getString("OptionsDatabasePanel.supportedLabel.text_1"));
        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("OptionsDatabasePanel.infoPanel.border.title_1")));
        urlLabel2.setText(bundle.getString("OptionsDatabasePanel.urlLabel2.text_1"));
        infoArea.setEditable(false);
        infoArea.setLineWrap(true);
        infoArea.setText(bundle.getString("OptionsDatabasePanel.infoArea.text_1"));
        infoArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(infoArea);
        urlLabel.setFont(urlLabel.getFont().deriveFont(urlLabel.getFont().getStyle() | java.awt.Font.BOLD));
        urlLabel.setForeground(new java.awt.Color(51, 51, 255));
        urlLabel.setText(bundle.getString("OptionsDatabasePanel.urlLabel.text_1"));
        urlLabel.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                urlLabelMouseClicked(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                urlLabelMouseExited(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                urlLabelMouseEntered(evt);
            }
        });
        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(infoPanelLayout.createSequentialGroup().addContainerGap().addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE).addGroup(infoPanelLayout.createSequentialGroup().addComponent(urlLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(urlLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))).addContainerGap()));
        infoPanelLayout.setVerticalGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(infoPanelLayout.createSequentialGroup().addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urlLabel2).addComponent(urlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE).addContainerGap()));
        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subget/gui/icons/arrowUp22.png")));
        upButton.setText(bundle.getString("OptionsDatabasePanel.upButton.text_1"));
        upButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subget/gui/icons/arrowDown22.png")));
        downButton.setText(bundle.getString("OptionsDatabasePanel.downButton.text_1"));
        downButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(topPanelLayout.createSequentialGroup().addContainerGap().addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(infoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(supportedLabel, javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, topPanelLayout.createSequentialGroup().addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 430, Short.MAX_VALUE)).addGap(8, 8, 8)));
        topPanelLayout.setVerticalGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(topPanelLayout.createSequentialGroup().addContainerGap().addComponent(supportedLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(8, 8, 8).addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
        bottomPanel.setMaximumSize(new java.awt.Dimension(32767, 40));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subget/gui/icons/save22.png")));
        saveButton.setText(bundle.getString("OptionsDatabasePanel.saveButton.text_1"));
        saveButton.setEnabled(false);
        saveButton.setMargin(new java.awt.Insets(0, 14, 0, 14));
        saveButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        discardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subget/gui/icons/cancel22.png")));
        discardButton.setText(bundle.getString("OptionsDatabasePanel.discardButton.text_1"));
        discardButton.setEnabled(false);
        discardButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButtonActionPerformed(evt);
            }
        });
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subget/gui/icons/reset22.png")));
        resetButton.setText(bundle.getString("OptionsDatabasePanel.resetButton.text_1"));
        resetButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 456, Short.MAX_VALUE).addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(bottomPanelLayout.createSequentialGroup().addGap(11, 11, 11).addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(discardButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE).addComponent(resetButton).addGap(12, 12, 12))));
        bottomPanelLayout.setVerticalGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 31, Short.MAX_VALUE).addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(bottomPanelLayout.createSequentialGroup().addGap(3, 3, 3).addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(discardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(3, 3, 3))));
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 456, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(0, 0, 0).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE).addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGap(0, 0, 0))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 350, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(0, 0, 0).addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE).addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0, 0, 0))));
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        saveChanges();
    }

    private void discardButtonActionPerformed(java.awt.event.ActionEvent evt) {
        discardChanges();
    }

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        reset();
    }

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selected = dbTable.getSelectedRow();
        if (selected != -1 && selected > 0) {
            ((DefaultTableModel) dbTable.getModel()).moveRow(selected, selected, selected - 1);
            dbTable.getSelectionModel().setSelectionInterval(selected - 1, selected - 1);
        }
    }

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selected = dbTable.getSelectedRow();
        if (selected != -1 && selected < dbTable.getRowCount() - 1) {
            ((DefaultTableModel) dbTable.getModel()).moveRow(selected, selected, selected + 1);
            dbTable.getSelectionModel().setSelectionInterval(selected + 1, selected + 1);
        }
    }

    private void urlLabelMouseEntered(java.awt.event.MouseEvent evt) {
        if (urlLabel.getText().equals("") == false) {
            setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }

    private void urlLabelMouseExited(java.awt.event.MouseEvent evt) {
        setCursor(Cursor.getDefaultCursor());
    }

    private void urlLabelMouseClicked(java.awt.event.MouseEvent evt) {
        if (urlLabel.getText().equals("") == false) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(new URI(urlLabel.getText()));
                } catch (Throwable ex) {
                    Global.dialogs.showErrorDialog(Bundles.subgetBundle.getString("Error"), Bundles.subgetBundle.getString("Could_not_open_a_default_internet_browser."));
                }
            } else {
                Global.dialogs.showErrorDialog(Bundles.subgetBundle.getString("Error"), Bundles.subgetBundle.getString("Could_not_open_a_default_internet_browser."));
            }
        }
    }

    private javax.swing.JPanel bottomPanel;

    private subget.gui.DbTable dbTable;

    private javax.swing.JButton discardButton;

    private javax.swing.JButton downButton;

    private javax.swing.JTextArea infoArea;

    private javax.swing.JPanel infoPanel;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JButton resetButton;

    private javax.swing.JButton saveButton;

    private javax.swing.JLabel supportedLabel;

    private javax.swing.JPanel topPanel;

    private javax.swing.JButton upButton;

    private javax.swing.JLabel urlLabel;

    private javax.swing.JLabel urlLabel2;

    public boolean hasChanges() {
        return saveButton.isEnabled();
    }

    private void changed() {
        saveButton.setEnabled(true);
        discardButton.setEnabled(true);
    }

    private void readConfig() {
        ((DefaultTableModel) dbTable.getModel()).setRowCount(0);
        for (int i = 0; i < Global.getSubDataBases().size(); ++i) {
            if (Global.getSubDataBases().get(i) == Global.SubDataBase.BASE_NAPI) {
                ((DefaultTableModel) dbTable.getModel()).addRow(new Object[] { "NAPI Projekt", Global.getNapiDownload(), Global.getNapiUpload() });
            }
            if (Global.getSubDataBases().get(i) == Global.SubDataBase.BASE_OSDB) {
                ((DefaultTableModel) dbTable.getModel()).addRow(new Object[] { "OpenSubtitles", Global.getOsdbDownload(), Global.getOsdbUpload() });
            }
        }
    }

    public void saveChanges() {
        Global.getSubDataBases().clear();
        for (int i = 0; i < dbTable.getRowCount(); ++i) {
            if (dbTable.getValueAt(i, 0).equals("NAPI Projekt")) {
                Global.getSubDataBases().add(Global.SubDataBase.BASE_NAPI);
                Global.setNapiDownload((Boolean) dbTable.getValueAt(i, 1));
                Global.setNapiUpload((Boolean) dbTable.getValueAt(i, 2));
            }
            if (dbTable.getValueAt(i, 0).equals("OpenSubtitles")) {
                Global.getSubDataBases().add(Global.SubDataBase.BASE_OSDB);
                Global.setOsdbDownload((Boolean) dbTable.getValueAt(i, 1));
                Global.setOsdbUpload((Boolean) dbTable.getValueAt(i, 2));
            }
        }
        try {
            Global.writeConfigFile();
        } catch (IOException ex) {
            Global.dialogs.showErrorDialog(Bundles.subgetBundle.getString("Error"), Bundles.subgetBundle.getString("Cannot_write_configuration_file."));
        }
        saveButton.setEnabled(false);
        discardButton.setEnabled(false);
    }

    public void discardChanges() {
        readConfig();
        saveButton.setEnabled(false);
        discardButton.setEnabled(false);
    }

    private void reset() {
        if (Global.dialogs.showWarningYesNoDialog(Bundles.subgetBundle.getString("Warning"), Bundles.subgetBundle.getString("Do_you_really_want_to_reset_options_to_defaults?")) == false) {
            return;
        }
        ((DefaultTableModel) dbTable.getModel()).setRowCount(0);
        ((DefaultTableModel) dbTable.getModel()).addRow(new Object[] { "NAPI Projekt", true, true });
        ((DefaultTableModel) dbTable.getModel()).addRow(new Object[] { "OpenSubtitles", true, true });
        saveChanges();
    }
}
