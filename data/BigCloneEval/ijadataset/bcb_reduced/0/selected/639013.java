package javapoint.helpmenu;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import javax.swing.ImageIcon;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

public class HelpFrame extends javax.swing.JFrame {

    public HelpFrame() {
        initComponents();
        this.setTitle("JavaPoint Version " + javapoint.StaticClasses.Utilities.getCurrentRevision());
        try {
            jHelpEditorPane.setPage(this.getClass().getResource("sample1.html"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

            @Override
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jHelpEditorPaneHyperlinkUpdate(evt);
            }
        });
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                Object o = e.getPath().getLastPathComponent();
                if (o.toString().equals("About")) {
                    try {
                        jHelpEditorPane.setPage(this.getClass().getResource("sample1.html"));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

                        public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                            jHelpEditorPaneHyperlinkUpdate(evt);
                        }
                    });
                } else if (o.toString().equals("Basics")) {
                    try {
                        jHelpEditorPane.setPage(this.getClass().getResource("sample2.html"));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

                        public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                            jHelpEditorPaneHyperlinkUpdate(evt);
                        }
                    });
                } else if (o.toString().equals("Preset Slide Types")) {
                    try {
                        jHelpEditorPane.setPage(this.getClass().getResource("sample3.html"));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

                        public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                            jHelpEditorPaneHyperlinkUpdate(evt);
                        }
                    });
                } else if (o.toString().equals("Keyboard Shortcuts")) {
                    try {
                        jHelpEditorPane.setPage(this.getClass().getResource("sample4.html"));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

                        public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                            jHelpEditorPaneHyperlinkUpdate(evt);
                        }
                    });
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jHelpEditorPane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Help");
        setIconImage(createImageIcon("../appresources/question_frame.gif", ""));
        setLocationByPlatform(true);
        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(10);
        jSplitPane1.setOneTouchExpandable(true);
        jHelpEditorPane.setContentType("text/html");
        jHelpEditorPane.setEditable(false);
        jHelpEditorPane.setBackground(Color.LIGHT_GRAY);
        jHelpEditorPane.setBorder(null);
        jHelpEditorPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jScrollPane1.setViewportView(jHelpEditorPane);
        jSplitPane1.setRightComponent(jScrollPane1);
        jTree1.setCellRenderer(new javapoint.MyTreeCellRenderer());
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("General Help");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("About");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Basics");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Preset Slide Types");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Keyboard Shortcuts");
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);
        jSplitPane1.setLeftComponent(jScrollPane2);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE));
        pack();
    }

    private void jHelpEditorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (evt.getURL().toString().equals("https://sourceforge.net/projects/javapoint/")) {
                Desktop desktop = Desktop.getDesktop();
                if (!desktop.isDesktopSupported()) {
                    System.err.println("Desktop is not supported!!");
                }
                if (!desktop.isSupported(Desktop.Action.BROWSE)) {
                    System.err.println("Desktop doesn't support the browse action!!");
                }
                try {
                    desktop.browse(new URI("https://sourceforge.net/projects/javapoint/"));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    jHelpEditorPane.setPage(this.getClass().getResource("sample3.html"));
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                jHelpEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

                    @Override
                    public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                        jHelpEditorPaneHyperlinkUpdate(evt);
                    }
                });
            }
        }
    }

    final Image createImageIcon(String path, String asdf) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    javax.swing.JEditorPane jHelpEditorPane;

    javax.swing.JScrollPane jScrollPane1;

    javax.swing.JScrollPane jScrollPane2;

    javax.swing.JSplitPane jSplitPane1;

    javax.swing.JTree jTree1;
}
