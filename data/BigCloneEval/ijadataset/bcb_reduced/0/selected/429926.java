package ie.iqda.datatool;

import ie.iqda.datastructures.PersistentMap;
import ie.iqda.datastructures.WordList;
import ie.iqda.io.ErrorLog;
import ie.iqda.io.TextFile;
import ie.iqda.locale.Language;
import java.awt.Color;
import java.awt.Font;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Iterator;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.Highlight;

/**
 * Text editor for editing transcripts. Allows for interaction with the name mapping
 * table as well so that the user can see which words have already been chosen 
 * for anonymization by providing a highlighting feature.
 * 
 * @author Keith Ó Dúlaigh <keith@keithodulaigh.com>
 */
public class TextEditor extends javax.swing.JFrame {

    private Language language;

    private JTable tableToAddWords;

    private PersistentMap regexs;

    private MarkedHighlighter markedForAnonHighlighter;

    private SuggestedHighlighter suggestedHighlighter;

    private Interface parent;

    private String fileLocation;

    private boolean highlightSuggested;

    private WordList words;

    /** Creates new form TextEditor */
    public TextEditor(Interface parent, Language language, String regexFile, String wordFileName, JTable tableToAddWords) {
        this.parent = parent;
        this.language = language;
        this.tableToAddWords = tableToAddWords;
        regexs = new PersistentMap(regexFile);
        markedForAnonHighlighter = new MarkedHighlighter();
        suggestedHighlighter = new SuggestedHighlighter();
        words = new WordList(wordFileName);
        initComponents();
        setNativeLookAndFeel();
        setWindowIcon();
        transcript.getDocument().addDocumentListener(new WordCountUpdater(lblWordCounter));
    }

    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        pmnuContext = new javax.swing.JPopupMenu();
        pmnuHighlight = new javax.swing.JMenuItem();
        pmnuAnonymizeAndAlwaysSuggest = new javax.swing.JMenuItem();
        pmnuAnonymizeAndNoLongerSuggest = new javax.swing.JMenuItem();
        pmnuDoNotAnonymize = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        pmnuSuggestAlways = new javax.swing.JMenuItem();
        pmnuSuggestNever = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        pmnuHighlightSuggested = new javax.swing.JMenuItem();
        pmnuSync = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        lblWordCountPrompt = new javax.swing.JLabel();
        lblWordCounter = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transcript = new javax.swing.JTextArea();
        lblColourLegend = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuPrint = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuIncreaseFont = new javax.swing.JMenuItem();
        mnuDecreaseFont = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuPredictWords = new javax.swing.JMenuItem();
        mnuClearSuggestedHighlights = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mnuSyncWithTable = new javax.swing.JMenuItem();
        mnuAnonymize = new javax.swing.JMenu();
        pmnuHighlight1 = new javax.swing.JMenuItem();
        pmnuAnonymizeAndAlwaysSuggest1 = new javax.swing.JMenuItem();
        pmnuAnonymizeAndNoLongerSuggest1 = new javax.swing.JMenuItem();
        pmnuDoNotAnonymize1 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        pmnuSuggestAlways1 = new javax.swing.JMenuItem();
        pmnuSuggestNever1 = new javax.swing.JMenuItem();
        pmnuHighlight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuHighlight.setText(language.translate("Anonymize Selected Text"));
        pmnuHighlight.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuHighlightActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuHighlight);
        pmnuAnonymizeAndAlwaysSuggest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuAnonymizeAndAlwaysSuggest.setText(language.translate("Anonymize Selected Text and Suggest Always"));
        pmnuAnonymizeAndAlwaysSuggest.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuAnonymizeAndAlwaysSuggestActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuAnonymizeAndAlwaysSuggest);
        pmnuAnonymizeAndNoLongerSuggest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuAnonymizeAndNoLongerSuggest.setText(language.translate("Anonymize Selected Text and Suggest Never"));
        pmnuAnonymizeAndNoLongerSuggest.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuAnonymizeAndNoLongerSuggestActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuAnonymizeAndNoLongerSuggest);
        pmnuDoNotAnonymize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/stop_16x16.png")));
        pmnuDoNotAnonymize.setText(language.translate("Do Not Anonymize"));
        pmnuDoNotAnonymize.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuDoNotAnonymizeActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuDoNotAnonymize);
        pmnuContext.add(jSeparator4);
        pmnuSuggestAlways.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/import-icon[1].png")));
        pmnuSuggestAlways.setText(language.translate("Suggest Always"));
        pmnuSuggestAlways.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuSuggestAlwaysActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuSuggestAlways);
        pmnuSuggestNever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/stop_16x16.png")));
        pmnuSuggestNever.setText(language.translate("Suggest Never"));
        pmnuSuggestNever.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuSuggestNeverActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuSuggestNever);
        pmnuContext.add(jSeparator3);
        pmnuHighlightSuggested.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/Highlighter%20Yellow-01.png")));
        pmnuHighlightSuggested.setText(language.translate("Highlight Suggested Words"));
        pmnuHighlightSuggested.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuHighlightSuggestedActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuHighlightSuggested);
        pmnuSync.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/sync.png")));
        pmnuSync.setText(language.translate("Refresh Highlighted Words"));
        pmnuSync.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuSyncActionPerformed(evt);
            }
        });
        pmnuContext.add(pmnuSync);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(language.translate("IQDA Data Anonymizer : Transcript Editor"));
        setResizable(false);
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblWordCountPrompt.setText(language.translate("Total Word Count:"));
        lblWordCounter.setText("0");
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(2, 2, 2).addComponent(lblWordCountPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(lblWordCounter).addContainerGap(577, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblWordCountPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblWordCounter)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        transcript.setColumns(20);
        transcript.setLineWrap(true);
        transcript.setRows(5);
        transcript.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                transcriptMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                transcriptMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(transcript);
        lblColourLegend.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblColourLegend.setText(language.translate("Words to be anonymized will be highlighted in green. Suggested words will be shown in yellow."));
        lblColourLegend.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu1.setMnemonic('f');
        jMenu1.setText(language.translate("File"));
        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/open_16x16.png")));
        mnuOpen.setMnemonic('o');
        mnuOpen.setText(language.translate("Open"));
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);
        mnuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/save_16x16.png")));
        mnuSave.setMnemonic('s');
        mnuSave.setText(language.translate("Save"));
        mnuSave.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);
        jMenu1.add(jSeparator1);
        mnuPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/print_16x16.png")));
        mnuPrint.setMnemonic('p');
        mnuPrint.setText(language.translate("Print"));
        mnuPrint.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrintActionPerformed(evt);
            }
        });
        jMenu1.add(mnuPrint);
        jMenu1.add(jSeparator2);
        mnuClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mnuClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/quit_16x16.png")));
        mnuClose.setMnemonic('c');
        mnuClose.setText(language.translate("Close"));
        mnuClose.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCloseActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClose);
        jMenuBar1.add(jMenu1);
        jMenu2.setMnemonic('o');
        jMenu2.setText(language.translate("Font Size"));
        mnuIncreaseFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mnuIncreaseFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/16x16-52-1474.png")));
        mnuIncreaseFont.setMnemonic('i');
        mnuIncreaseFont.setText(language.translate("Increase"));
        mnuIncreaseFont.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIncreaseFontActionPerformed(evt);
            }
        });
        jMenu2.add(mnuIncreaseFont);
        mnuDecreaseFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mnuDecreaseFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/16x16-64-4895.png")));
        mnuDecreaseFont.setMnemonic('d');
        mnuDecreaseFont.setText(language.translate("Decrease"));
        mnuDecreaseFont.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDecreaseFontActionPerformed(evt);
            }
        });
        jMenu2.add(mnuDecreaseFont);
        jMenuBar1.add(jMenu2);
        mnuTools.setMnemonic('T');
        mnuTools.setText(language.translate("Tools"));
        mnuPredictWords.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuPredictWords.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        mnuPredictWords.setText(language.translate("Suggest Words to Anonymize"));
        mnuPredictWords.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPredictWordsActionPerformed(evt);
            }
        });
        mnuTools.add(mnuPredictWords);
        mnuClearSuggestedHighlights.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuClearSuggestedHighlights.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/16x16-52-1474.png")));
        mnuClearSuggestedHighlights.setText(language.translate("Clear Suggestions"));
        mnuClearSuggestedHighlights.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearSuggestedHighlightsActionPerformed(evt);
            }
        });
        mnuTools.add(mnuClearSuggestedHighlights);
        mnuTools.add(jSeparator5);
        mnuSyncWithTable.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuSyncWithTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/sync.png")));
        mnuSyncWithTable.setText(language.translate("Refresh Highlighted Words"));
        mnuSyncWithTable.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSyncWithTableActionPerformed(evt);
            }
        });
        mnuTools.add(mnuSyncWithTable);
        jMenuBar1.add(mnuTools);
        mnuAnonymize.setText(language.translate("Selected Text Options"));
        pmnuHighlight1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuHighlight1.setText(language.translate("Anonymize Selected Text"));
        pmnuHighlight1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuHighlight1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuHighlight1);
        pmnuAnonymizeAndAlwaysSuggest1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuAnonymizeAndAlwaysSuggest1.setText(language.translate("Anonymize Selected Text and Suggest Always"));
        pmnuAnonymizeAndAlwaysSuggest1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuAnonymizeAndAlwaysSuggest1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuAnonymizeAndAlwaysSuggest1);
        pmnuAnonymizeAndNoLongerSuggest1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/questionmark.png")));
        pmnuAnonymizeAndNoLongerSuggest1.setText(language.translate("Anonymize Selected Text and Suggest Never"));
        pmnuAnonymizeAndNoLongerSuggest1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuAnonymizeAndNoLongerSuggest1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuAnonymizeAndNoLongerSuggest1);
        pmnuDoNotAnonymize1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/stop_16x16.png")));
        pmnuDoNotAnonymize1.setText(language.translate("Do Not Anonymize"));
        pmnuDoNotAnonymize1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuDoNotAnonymize1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuDoNotAnonymize1);
        mnuAnonymize.add(jSeparator6);
        pmnuSuggestAlways1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/import-icon[1].png")));
        pmnuSuggestAlways1.setText(language.translate("Suggest Always"));
        pmnuSuggestAlways1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuSuggestAlways1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuSuggestAlways1);
        pmnuSuggestNever1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/iqda/icons/stop_16x16.png")));
        pmnuSuggestNever1.setText(language.translate("Suggest Never"));
        pmnuSuggestNever1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmnuSuggestNever1ActionPerformed(evt);
            }
        });
        mnuAnonymize.add(pmnuSuggestNever1);
        jMenuBar1.add(mnuAnonymize);
        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE).addContainerGap()).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(lblColourLegend, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(lblColourLegend).addGap(18, 18, 18).addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)));
        pack();
    }

    private void mnuIncreaseFontActionPerformed(java.awt.event.ActionEvent evt) {
        changeFontSize(+2);
    }

    private void mnuDecreaseFontActionPerformed(java.awt.event.ActionEvent evt) {
        changeFontSize(-2);
    }

    private void mnuCloseActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {
        openTranscript();
    }

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {
        saveText();
    }

    private void transcriptMouseReleased(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            pmnuContext.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    private void transcriptMousePressed(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            pmnuContext.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    private void pmnuHighlightActionPerformed(java.awt.event.ActionEvent evt) {
        addForAnonymizing(transcript.getSelectedText());
    }

    private void mnuPrintActionPerformed(java.awt.event.ActionEvent evt) {
        print();
    }

    private void mnuPredictWordsActionPerformed(java.awt.event.ActionEvent evt) {
        highlightSuggestedWords();
    }

    private void mnuClearSuggestedHighlightsActionPerformed(java.awt.event.ActionEvent evt) {
        clearSuggestedHighlights();
    }

    private void pmnuHighlightSuggestedActionPerformed(java.awt.event.ActionEvent evt) {
        highlightSuggestedWords();
    }

    private void pmnuAnonymizeAndAlwaysSuggestActionPerformed(java.awt.event.ActionEvent evt) {
        alwaysSuggestSelection();
        addForAnonymizing(transcript.getSelectedText());
    }

    private void pmnuAnonymizeAndNoLongerSuggestActionPerformed(java.awt.event.ActionEvent evt) {
        ignoreSelectedSuggestion();
        addForAnonymizing(transcript.getSelectedText());
    }

    private void pmnuSuggestAlwaysActionPerformed(java.awt.event.ActionEvent evt) {
        alwaysSuggestSelection();
    }

    private void pmnuSuggestNeverActionPerformed(java.awt.event.ActionEvent evt) {
        ignoreSelectedSuggestion();
    }

    private void mnuSyncWithTableActionPerformed(java.awt.event.ActionEvent evt) {
        syncWithTable();
    }

    private void pmnuSyncActionPerformed(java.awt.event.ActionEvent evt) {
        syncWithTable();
    }

    private void pmnuDoNotAnonymizeActionPerformed(java.awt.event.ActionEvent evt) {
        doNotAnonymizeSelection();
    }

    private void pmnuHighlight1ActionPerformed(java.awt.event.ActionEvent evt) {
        addForAnonymizing(transcript.getSelectedText());
    }

    private void pmnuAnonymizeAndAlwaysSuggest1ActionPerformed(java.awt.event.ActionEvent evt) {
        alwaysSuggestSelection();
        addForAnonymizing(transcript.getSelectedText());
    }

    private void pmnuAnonymizeAndNoLongerSuggest1ActionPerformed(java.awt.event.ActionEvent evt) {
        ignoreSelectedSuggestion();
        addForAnonymizing(transcript.getSelectedText());
    }

    private void pmnuDoNotAnonymize1ActionPerformed(java.awt.event.ActionEvent evt) {
        doNotAnonymizeSelection();
    }

    private void pmnuSuggestAlways1ActionPerformed(java.awt.event.ActionEvent evt) {
        alwaysSuggestSelection();
    }

    private void pmnuSuggestNever1ActionPerformed(java.awt.event.ActionEvent evt) {
        ignoreSelectedSuggestion();
    }

    private void doNotAnonymizeSelection() {
        String selected = transcript.getSelectedText();
        if (selected != null) {
            DefaultTableModel model = (DefaultTableModel) tableToAddWords.getModel();
            String word;
            int rowCount = tableToAddWords.getRowCount();
            for (int row = rowCount - 1; row >= 0; row--) {
                word = (String) tableToAddWords.getValueAt(row, 0);
                if (word != null && word.equals(selected)) {
                    model.removeRow(row);
                }
            }
            syncWithTable();
        }
    }

    /**
     * Syncs the contents in the table with the words highlighted in the text.
     */
    private void syncWithTable() {
        removeAnonymizationHighlights();
        Iterator<String> iterator;
        String word;
        int rowCount = tableToAddWords.getRowCount();
        Set keySet = regexs.keySet();
        for (int row = 0; row < rowCount; row++) {
            word = (String) tableToAddWords.getValueAt(row, 0);
            if (word != null) {
                iterator = keySet.iterator();
                while (iterator.hasNext()) {
                    highlightWordToBeAnonymized(iterator.next().replace("%t", word));
                }
            }
        }
    }

    /**
     * Opens the transcript in the editor window.
     */
    private void openTranscript() {
        fileLocation = getFileOrFolder(false, false, new Filter("txt"));
        if (new File(fileLocation).exists()) {
            TextFile textFile = new TextFile(fileLocation);
            transcript.setText(textFile.read());
            parent.setTextFile(fileLocation);
        }
        syncWithTable();
    }

    /**
     * Adds a new word to the list of names that have to be mapped.
     */
    public void addForAnonymizing(String word) {
        if (word != null) {
            Iterator<String> iterator = regexs.keySet().iterator();
            while (iterator.hasNext()) {
                highlightWordToBeAnonymized(iterator.next().replace("%t", word));
            }
            ((DefaultTableModel) tableToAddWords.getModel()).insertRow(0, new String[] { word });
        }
    }

    /**
     * Ensures that the selection will always be flagged as a suggestion.
     */
    private void alwaysSuggestSelection() {
        String word = transcript.getSelectedText();
        if (word != null) {
            if (!word.contains(" ")) {
                words.remove(word.toLowerCase());
                words.save();
                refreshSuggestions();
            } else {
                JOptionPane.showMessageDialog(this, language.translate("Unable to add phrases to suggestions list. Choose a single word."), language.translate("Error"), JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * The selected word will no longer be shown as a suggestion.
     */
    private void ignoreSelectedSuggestion() {
        String word = transcript.getSelectedText();
        if (word != null) {
            words.add(word.toLowerCase());
            words.save();
            refreshSuggestions();
        }
    }

    /**
     * Refreshes the suggestions.
     */
    private void refreshSuggestions() {
        clearSuggestedHighlights();
        highlightSuggestedWords();
    }

    /**
     * Clears suggested highlights.
     */
    private void clearSuggestedHighlights() {
        highlightSuggested = false;
        removeSuggestedHighlights();
    }

    /**
     * Highlights text in the editor.
     * 
     * @param patternText 
     */
    private void highlightWordToBeAnonymized(String patternText) {
        if (highlightSuggested) {
            removeSuggestedHighlights();
        }
        try {
            Document document = transcript.getDocument();
            Pattern pattern = Pattern.compile(patternText, Pattern.MULTILINE);
            Matcher textMatcher = pattern.matcher(document.getText(0, document.getLength()));
            while (textMatcher.find()) {
                transcript.getHighlighter().addHighlight(textMatcher.start(), textMatcher.end() - 1, markedForAnonHighlighter);
            }
        } catch (BadLocationException error) {
            ErrorLog.instance().addEntry(error);
        }
        if (highlightSuggested) {
            highlightSuggestedWords();
        }
    }

    /**
     * Highlights suggested words for anonymization.
     */
    private void highlightSuggestedWords() {
        highlightSuggested = true;
        String text = transcript.getText();
        String[] regexPredictions = new String[] { "\\b[A-z]{3,}\\b", "'[0-9]{2}", "[1-9][0-9]{3}" };
        Highlighter lighter = transcript.getHighlighter();
        Matcher textMatcher;
        int start;
        int end;
        try {
            for (String regex : regexPredictions) {
                textMatcher = Pattern.compile(regex, Pattern.MULTILINE).matcher(text);
                while (textMatcher.find()) {
                    start = textMatcher.start();
                    end = textMatcher.end();
                    if (words.contains(text.substring(start, end).toLowerCase())) {
                        lighter.addHighlight(start, end, suggestedHighlighter);
                    }
                }
            }
        } catch (BadLocationException error) {
            ErrorLog.instance().addEntry(error);
        }
    }

    /**
     * Removes highlights from a piece of text.
     */
    private void removeSuggestedHighlights() {
        removeHighlighter(SuggestedHighlighter.class);
    }

    /**
     * Removes highlights relating to anonymization.
     */
    private void removeAnonymizationHighlights() {
        removeHighlighter(MarkedHighlighter.class);
    }

    /**
     * Removes a particular type of highlighting from the transcript.
     * @param highlighter 
     */
    private void removeHighlighter(Class highlighter) {
        Highlighter hilite = transcript.getHighlighter();
        Highlight[] hilites = hilite.getHighlights();
        for (Highlight lite : hilites) {
            if (highlighter.isInstance(lite.getPainter())) {
                hilite.removeHighlight(lite);
            }
        }
    }

    /**
     * Prints the transcript.
     */
    private void print() {
        try {
            fileLocation = new File(fileLocation).getName();
            MessageFormat headerFormat = new MessageFormat(language.translate(fileLocation));
            MessageFormat footerFormat = new MessageFormat("{0}");
            transcript.print(headerFormat, footerFormat);
        } catch (PrinterException error) {
            ErrorLog.instance().addEntry(error);
        }
    }

    /**
     * Saves the text in the editor to the file.
     */
    private void saveText() {
        String fileName = getFileOrFolder(false, true, new Filter("txt"));
        if (fileName != null) {
            TextFile textFile = new TextFile(fileName);
            textFile.write(transcript.getText(), false);
        }
    }

    /**
     * Uses a file chooser to prompt the user for a file or folder location.
     * 
     * @param allowFolders Whether or not to allow a folder to be chosen with the file chooser.
     * @param dialogTitle The title that is to be displayed on the file chooser dialog box.
     * @param filter The file filter to apply to the chooser to limit the type of files that the user may choose.
     * @return The absolute path to the file or folder that the user chose.
     */
    private String getFileOrFolder(boolean allowFolders, boolean saveTitle, Filter filter) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(allowFolders ? JFileChooser.FILES_AND_DIRECTORIES : JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle(saveTitle ? language.translate("Save") : language.translate("Open"));
        int overwrite;
        if (filter != null) {
            fileChooser.addChoosableFileFilter(filter);
        }
        do {
            fileChooser.showOpenDialog(this);
            if (saveTitle) {
                overwrite = JOptionPane.YES_OPTION;
                if (new File(fileChooser.getSelectedFile().getAbsolutePath()).exists()) {
                    overwrite = JOptionPane.showConfirmDialog(null, language.translate("You are about to write over this file, proceed?"), language.translate("Will Overwrite File"), JOptionPane.WARNING_MESSAGE);
                }
                if (overwrite == JOptionPane.YES_OPTION) {
                    break;
                }
            } else {
                break;
            }
        } while (true);
        return (fileChooser.getSelectedFile() != null) ? fileChooser.getSelectedFile().getAbsolutePath() : new String();
    }

    /**
     * Alters the font size of the document being displayed.
     * 
     * @param increase Either a positive or negative number to alter the font size.
     */
    private void changeFontSize(int increase) {
        transcript.setFont(new Font("Sans-Serif", Font.PLAIN, transcript.getFont().getSize() + increase));
    }

    /**
     * Sets the GUI to look like what the user would be accustomed to with the
     * native OS applications.
     */
    public static void setNativeLookAndFeel() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception error) {
            ErrorLog.instance().addEntry(error);
        }
    }

    /**
     * Sets the frames icon image.
     */
    private void setWindowIcon() {
        try {
            setIconImage(ImageIO.read(getClass().getResource("/ie/iqda/icons/iqda_16x16.png")));
        } catch (IOException error) {
            ErrorLog.instance().addEntry(error);
        }
    }

    /**
     * Controls the color used to highlight words in the editor pane.
     */
    private class MarkedHighlighter extends DefaultHighlighter.DefaultHighlightPainter {

        public MarkedHighlighter() {
            super(new Color(0x00, 0xFF, 0x00));
        }
    }

    /**
     * Controls the color used to highlight words in the editor pane.
     */
    private class SuggestedHighlighter extends DefaultHighlighter.DefaultHighlightPainter {

        public SuggestedHighlighter() {
            super(new Color(0xCC, 0xCC, 0x00));
        }
    }

    /**
     * Updates the status bar to show details of the document.
     */
    private class WordCountUpdater implements DocumentListener {

        private JLabel wordCount;

        /**
         * Constructs a new word count updater.
         */
        public WordCountUpdater(JLabel wordCount) {
            this.wordCount = wordCount;
        }

        /**
         * Occurs when text is inserted.
         * 
         * @param e 
         */
        public void insertUpdate(DocumentEvent e) {
            setWordCount(e);
        }

        /**
         * Occurs when text is removed.
         * 
         * @param e 
         */
        public void removeUpdate(DocumentEvent e) {
            setWordCount(e);
        }

        /**
         * Occurs for a style change.
         * @param e 
         */
        public void changedUpdate(DocumentEvent e) {
            setWordCount(e);
        }

        /**
         * Updates the label to display the number of words in the document.
         * @param e 
         */
        private void setWordCount(DocumentEvent e) {
            try {
                Document document = e.getDocument();
                int doc = document.getText(0, document.getLength()).replaceAll("\r", "").replaceAll("\n", " ").replaceAll("  ", " ").split(" ").length;
                wordCount.setText(Integer.toString(doc));
            } catch (BadLocationException error) {
                ErrorLog.instance().addEntry(error);
            }
        }
    }

    private javax.swing.JMenu jMenu1;

    private javax.swing.JMenu jMenu2;

    private javax.swing.JMenuBar jMenuBar1;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JPopupMenu.Separator jSeparator1;

    private javax.swing.JPopupMenu.Separator jSeparator2;

    private javax.swing.JPopupMenu.Separator jSeparator3;

    private javax.swing.JPopupMenu.Separator jSeparator4;

    private javax.swing.JPopupMenu.Separator jSeparator5;

    private javax.swing.JPopupMenu.Separator jSeparator6;

    private javax.swing.JLabel lblColourLegend;

    private javax.swing.JLabel lblWordCountPrompt;

    private javax.swing.JLabel lblWordCounter;

    private javax.swing.JMenu mnuAnonymize;

    private javax.swing.JMenuItem mnuClearSuggestedHighlights;

    private javax.swing.JMenuItem mnuClose;

    private javax.swing.JMenuItem mnuDecreaseFont;

    private javax.swing.JMenuItem mnuIncreaseFont;

    private javax.swing.JMenuItem mnuOpen;

    private javax.swing.JMenuItem mnuPredictWords;

    private javax.swing.JMenuItem mnuPrint;

    private javax.swing.JMenuItem mnuSave;

    private javax.swing.JMenuItem mnuSyncWithTable;

    private javax.swing.JMenu mnuTools;

    private javax.swing.JMenuItem pmnuAnonymizeAndAlwaysSuggest;

    private javax.swing.JMenuItem pmnuAnonymizeAndAlwaysSuggest1;

    private javax.swing.JMenuItem pmnuAnonymizeAndNoLongerSuggest;

    private javax.swing.JMenuItem pmnuAnonymizeAndNoLongerSuggest1;

    private javax.swing.JPopupMenu pmnuContext;

    private javax.swing.JMenuItem pmnuDoNotAnonymize;

    private javax.swing.JMenuItem pmnuDoNotAnonymize1;

    private javax.swing.JMenuItem pmnuHighlight;

    private javax.swing.JMenuItem pmnuHighlight1;

    private javax.swing.JMenuItem pmnuHighlightSuggested;

    private javax.swing.JMenuItem pmnuSuggestAlways;

    private javax.swing.JMenuItem pmnuSuggestAlways1;

    private javax.swing.JMenuItem pmnuSuggestNever;

    private javax.swing.JMenuItem pmnuSuggestNever1;

    private javax.swing.JMenuItem pmnuSync;

    private javax.swing.JTextArea transcript;
}
