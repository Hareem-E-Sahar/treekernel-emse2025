package java.lang;

/** 
 * The CharacterData00 class encapsulates the large tables once found in
 * java.lang.Character
*/
class CharacterData00 {

    static int getProperties(int ch) {
        char offset = (char) ch;
        int props = A[Y[X[offset >> 5] | ((offset >> 1) & 0xF)] | (offset & 0x1)];
        return props;
    }

    static int getType(int ch) {
        int props = getProperties(ch);
        return (props & 0x1F);
    }

    static boolean isLowerCase(int ch) {
        int type = getType(ch);
        return (type == Character.LOWERCASE_LETTER);
    }

    static boolean isUpperCase(int ch) {
        int type = getType(ch);
        return (type == Character.UPPERCASE_LETTER);
    }

    static boolean isTitleCase(int ch) {
        int type = getType(ch);
        return (type == Character.TITLECASE_LETTER);
    }

    static boolean isDigit(int ch) {
        int type = getType(ch);
        return (type == Character.DECIMAL_DIGIT_NUMBER);
    }

    static boolean isDefined(int ch) {
        int type = getType(ch);
        return (type != Character.UNASSIGNED);
    }

    static boolean isLetter(int ch) {
        int type = getType(ch);
        return (((((1 << Character.UPPERCASE_LETTER) | (1 << Character.LOWERCASE_LETTER) | (1 << Character.TITLECASE_LETTER) | (1 << Character.MODIFIER_LETTER) | (1 << Character.OTHER_LETTER)) >> type) & 1) != 0);
    }

    static boolean isLetterOrDigit(int ch) {
        int type = getType(ch);
        return (((((1 << Character.UPPERCASE_LETTER) | (1 << Character.LOWERCASE_LETTER) | (1 << Character.TITLECASE_LETTER) | (1 << Character.MODIFIER_LETTER) | (1 << Character.OTHER_LETTER) | (1 << Character.DECIMAL_DIGIT_NUMBER)) >> type) & 1) != 0);
    }

    static boolean isSpaceChar(int ch) {
        int type = getType(ch);
        return (((((1 << Character.SPACE_SEPARATOR) | (1 << Character.LINE_SEPARATOR) | (1 << Character.PARAGRAPH_SEPARATOR)) >> type) & 1) != 0);
    }

    static boolean isJavaIdentifierStart(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00007000) >= 0x00005000);
    }

    static boolean isJavaIdentifierPart(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00003000) != 0);
    }

    static boolean isUnicodeIdentifierStart(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00007000);
    }

    static boolean isUnicodeIdentifierPart(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00001000) != 0);
    }

    static boolean isIdentifierIgnorable(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00001000);
    }

    static int toLowerCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 0x00020000) != 0) {
            if ((val & 0x07FC0000) == 0x07FC0000) {
                switch(ch) {
                    case 0x0130:
                        mapChar = 0x0069;
                        break;
                    case 0x2126:
                        mapChar = 0x03C9;
                        break;
                    case 0x212A:
                        mapChar = 0x006B;
                        break;
                    case 0x212B:
                        mapChar = 0x00E5;
                        break;
                    case 0x1F88:
                        mapChar = 0x1F80;
                        break;
                    case 0x1F89:
                        mapChar = 0x1F81;
                        break;
                    case 0x1F8A:
                        mapChar = 0x1F82;
                        break;
                    case 0x1F8B:
                        mapChar = 0x1F83;
                        break;
                    case 0x1F8C:
                        mapChar = 0x1F84;
                        break;
                    case 0x1F8D:
                        mapChar = 0x1F85;
                        break;
                    case 0x1F8E:
                        mapChar = 0x1F86;
                        break;
                    case 0x1F8F:
                        mapChar = 0x1F87;
                        break;
                    case 0x1F98:
                        mapChar = 0x1F90;
                        break;
                    case 0x1F99:
                        mapChar = 0x1F91;
                        break;
                    case 0x1F9A:
                        mapChar = 0x1F92;
                        break;
                    case 0x1F9B:
                        mapChar = 0x1F93;
                        break;
                    case 0x1F9C:
                        mapChar = 0x1F94;
                        break;
                    case 0x1F9D:
                        mapChar = 0x1F95;
                        break;
                    case 0x1F9E:
                        mapChar = 0x1F96;
                        break;
                    case 0x1F9F:
                        mapChar = 0x1F97;
                        break;
                    case 0x1FA8:
                        mapChar = 0x1FA0;
                        break;
                    case 0x1FA9:
                        mapChar = 0x1FA1;
                        break;
                    case 0x1FAA:
                        mapChar = 0x1FA2;
                        break;
                    case 0x1FAB:
                        mapChar = 0x1FA3;
                        break;
                    case 0x1FAC:
                        mapChar = 0x1FA4;
                        break;
                    case 0x1FAD:
                        mapChar = 0x1FA5;
                        break;
                    case 0x1FAE:
                        mapChar = 0x1FA6;
                        break;
                    case 0x1FAF:
                        mapChar = 0x1FA7;
                        break;
                    case 0x1FBC:
                        mapChar = 0x1FB3;
                        break;
                    case 0x1FCC:
                        mapChar = 0x1FC3;
                        break;
                    case 0x1FFC:
                        mapChar = 0x1FF3;
                        break;
                }
            } else {
                int offset = val << 5 >> (5 + 18);
                mapChar = ch + offset;
            }
        }
        return mapChar;
    }

    static int toUpperCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 0x00010000) != 0) {
            if ((val & 0x07FC0000) == 0x07FC0000) {
                switch(ch) {
                    case 0x00B5:
                        mapChar = 0x039C;
                        break;
                    case 0x017F:
                        mapChar = 0x0053;
                        break;
                    case 0x1FBE:
                        mapChar = 0x0399;
                        break;
                    case 0x1F80:
                        mapChar = 0x1F88;
                        break;
                    case 0x1F81:
                        mapChar = 0x1F89;
                        break;
                    case 0x1F82:
                        mapChar = 0x1F8A;
                        break;
                    case 0x1F83:
                        mapChar = 0x1F8B;
                        break;
                    case 0x1F84:
                        mapChar = 0x1F8C;
                        break;
                    case 0x1F85:
                        mapChar = 0x1F8D;
                        break;
                    case 0x1F86:
                        mapChar = 0x1F8E;
                        break;
                    case 0x1F87:
                        mapChar = 0x1F8F;
                        break;
                    case 0x1F90:
                        mapChar = 0x1F98;
                        break;
                    case 0x1F91:
                        mapChar = 0x1F99;
                        break;
                    case 0x1F92:
                        mapChar = 0x1F9A;
                        break;
                    case 0x1F93:
                        mapChar = 0x1F9B;
                        break;
                    case 0x1F94:
                        mapChar = 0x1F9C;
                        break;
                    case 0x1F95:
                        mapChar = 0x1F9D;
                        break;
                    case 0x1F96:
                        mapChar = 0x1F9E;
                        break;
                    case 0x1F97:
                        mapChar = 0x1F9F;
                        break;
                    case 0x1FA0:
                        mapChar = 0x1FA8;
                        break;
                    case 0x1FA1:
                        mapChar = 0x1FA9;
                        break;
                    case 0x1FA2:
                        mapChar = 0x1FAA;
                        break;
                    case 0x1FA3:
                        mapChar = 0x1FAB;
                        break;
                    case 0x1FA4:
                        mapChar = 0x1FAC;
                        break;
                    case 0x1FA5:
                        mapChar = 0x1FAD;
                        break;
                    case 0x1FA6:
                        mapChar = 0x1FAE;
                        break;
                    case 0x1FA7:
                        mapChar = 0x1FAF;
                        break;
                    case 0x1FB3:
                        mapChar = 0x1FBC;
                        break;
                    case 0x1FC3:
                        mapChar = 0x1FCC;
                        break;
                    case 0x1FF3:
                        mapChar = 0x1FFC;
                        break;
                }
            } else {
                int offset = val << 5 >> (5 + 18);
                mapChar = ch - offset;
            }
        }
        return mapChar;
    }

    static int toTitleCase(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 0x00008000) != 0) {
            if ((val & 0x00010000) == 0) {
                mapChar = ch + 1;
            } else if ((val & 0x00020000) == 0) {
                mapChar = ch - 1;
            }
        } else if ((val & 0x00010000) != 0) {
            mapChar = toUpperCase(ch);
        }
        return mapChar;
    }

    static int digit(int ch, int radix) {
        int value = -1;
        if (radix >= Character.MIN_RADIX && radix <= Character.MAX_RADIX) {
            int val = getProperties(ch);
            int kind = val & 0x1F;
            if (kind == Character.DECIMAL_DIGIT_NUMBER) {
                value = ch + ((val & 0x3E0) >> 5) & 0x1F;
            } else if ((val & 0xC00) == 0x00000C00) {
                value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
            }
        }
        return (value < radix) ? value : -1;
    }

    static int getNumericValue(int ch) {
        int val = getProperties(ch);
        int retval = -1;
        switch(val & 0xC00) {
            default:
            case (0x00000000):
                retval = -1;
                break;
            case (0x00000400):
                retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
                break;
            case (0x00000800):
                switch(ch) {
                    case 0x0BF1:
                        retval = 100;
                        break;
                    case 0x0BF2:
                        retval = 1000;
                        break;
                    case 0x1375:
                        retval = 40;
                        break;
                    case 0x1376:
                        retval = 50;
                        break;
                    case 0x1377:
                        retval = 60;
                        break;
                    case 0x1378:
                        retval = 70;
                        break;
                    case 0x1379:
                        retval = 80;
                        break;
                    case 0x137A:
                        retval = 90;
                        break;
                    case 0x137B:
                        retval = 100;
                        break;
                    case 0x137C:
                        retval = 10000;
                        break;
                    case 0x215F:
                        retval = 1;
                        break;
                    case 0x216C:
                        retval = 50;
                        break;
                    case 0x216D:
                        retval = 100;
                        break;
                    case 0x216E:
                        retval = 500;
                        break;
                    case 0x216F:
                        retval = 1000;
                        break;
                    case 0x217C:
                        retval = 50;
                        break;
                    case 0x217D:
                        retval = 100;
                        break;
                    case 0x217E:
                        retval = 500;
                        break;
                    case 0x217F:
                        retval = 1000;
                        break;
                    case 0x2180:
                        retval = 1000;
                        break;
                    case 0x2181:
                        retval = 5000;
                        break;
                    case 0x2182:
                        retval = 10000;
                        break;
                    case 0x325C:
                        retval = 32;
                        break;
                    case 0x325D:
                        retval = 33;
                        break;
                    case 0x325E:
                        retval = 34;
                        break;
                    case 0x325F:
                        retval = 35;
                        break;
                    case 0x32B1:
                        retval = 36;
                        break;
                    case 0x32B2:
                        retval = 37;
                        break;
                    case 0x32B3:
                        retval = 38;
                        break;
                    case 0x32B4:
                        retval = 39;
                        break;
                    case 0x32B5:
                        retval = 40;
                        break;
                    case 0x32B6:
                        retval = 41;
                        break;
                    case 0x32B7:
                        retval = 42;
                        break;
                    case 0x32B8:
                        retval = 43;
                        break;
                    case 0x32B9:
                        retval = 44;
                        break;
                    case 0x32BA:
                        retval = 45;
                        break;
                    case 0x32BB:
                        retval = 46;
                        break;
                    case 0x32BC:
                        retval = 47;
                        break;
                    case 0x32BD:
                        retval = 48;
                        break;
                    case 0x32BE:
                        retval = 49;
                        break;
                    case 0x32BF:
                        retval = 50;
                        break;
                    default:
                        retval = -2;
                        break;
                }
                break;
            case (0x00000C00):
                retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
                break;
        }
        return retval;
    }

    static boolean isWhitespace(int ch) {
        int props = getProperties(ch);
        return ((props & 0x00007000) == 0x00004000);
    }

    static byte getDirectionality(int ch) {
        int val = getProperties(ch);
        byte directionality = (byte) ((val & 0x78000000) >> 27);
        if (directionality == 0xF) {
            switch(ch) {
                case 0x202A:
                    directionality = Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
                    break;
                case 0x202B:
                    directionality = Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
                    break;
                case 0x202C:
                    directionality = Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
                    break;
                case 0x202D:
                    directionality = Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
                    break;
                case 0x202E:
                    directionality = Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
                    break;
                default:
                    directionality = Character.DIRECTIONALITY_UNDEFINED;
                    break;
            }
        }
        return directionality;
    }

    static boolean isMirrored(int ch) {
        int props = getProperties(ch);
        return ((props & 0x80000000) != 0);
    }

    static int toUpperCaseEx(int ch) {
        int mapChar = ch;
        int val = getProperties(ch);
        if ((val & 0x00010000) != 0) {
            if ((val & 0x07FC0000) != 0x07FC0000) {
                int offset = val << 5 >> (5 + 18);
                mapChar = ch - offset;
            } else {
                switch(ch) {
                    case 0x00B5:
                        mapChar = 0x039C;
                        break;
                    case 0x017F:
                        mapChar = 0x0053;
                        break;
                    case 0x1FBE:
                        mapChar = 0x0399;
                        break;
                    default:
                        mapChar = Character.ERROR;
                        break;
                }
            }
        }
        return mapChar;
    }

    static char[] toUpperCaseCharArray(int ch) {
        char[] upperMap = { (char) ch };
        int location = findInCharMap(ch);
        if (location != -1) {
            upperMap = charMap[location][1];
        }
        return upperMap;
    }

    /**
     * Finds the character in the uppercase mapping table.
     *
     * @param ch the <code>char</code> to search
     * @return the index location ch in the table or -1 if not found
     * @since 1.4
     */
    static int findInCharMap(int ch) {
        if (charMap == null || charMap.length == 0) {
            return -1;
        }
        int top, bottom, current;
        bottom = 0;
        top = charMap.length;
        current = top / 2;
        while (top - bottom > 1) {
            if (ch >= charMap[current][0][0]) {
                bottom = current;
            } else {
                top = current;
            }
            current = (top + bottom) / 2;
        }
        if (ch == charMap[current][0][0]) return current; else return -1;
    }

    static final char[][][] charMap;

    static final char X[] = ("\000\020\040\060\100\120\140\160\200\220\240\260\300\320\340\360\200Ā" + "ĐĠİŀŐŠŰŰƀƐƠưǀ" + "ǐǠǰȀ\200Ȑ\200ȠȰɀɐɠɰ" + "ʀʐʠʰˀːˠ˰̠̰̀̀̐" + "̀͐̀͠Ͱ͠͠͠͠͠͠͠͠" + "͠͠΀ΐΠΰπϐϠϰЀАР" + "арѐѠѰπҀҐҠҰӀӐӠ" + "ӰԀԐԠ԰ՀՐԠ԰ՠհԠր" + "֐ְ֠׀אנ͠װ؀ؐ͠ؠذ" + "ـِ٠ٰڀ͠ڐڠڰ͠͠ۀې" + "۠ڐڐ۰ڐڐ܀ڐܐܠڐܰڐ" + "݀ݐݠݰݐڐހސ͠ڐڐޠ׀" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐް߀ڐڐߐߠ߰ࠀ" + "ࠐڐࠠ࠰ࡀࡐڐࡠࡰڐࢀ͠͠" + "࢐ࢠࢰࣀ࣐͠͠͠͠͠͠͠͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "ࣰ࣠͠͠͠͠͠͠ऀऐ͠͠͠" + "͠\200\200\200\200ठ\200\200रीॐॠ॰ঀঐ" + "ঠরী৐ৠৰ਀ਐਠਰੀ੐੠" + "ੰ઀ઐઠરીૐૠ૰଀ଐଠର" + "ୀ୐ୠ୰஀ஐ஠࣐͠ரீௐ௠" + "௰ఀఐ࣐࣐࣐࣐࣐ఠరీ౐࣐" + "࣐ౠ౰ಀ͠͠ಐಠರೀ೐ೠ೰" + "ഀ࣐࣐࣐࣐࣐࣐࣐࣐ഐഐഐഐ" + "ഠരീ൐ൠ൰඀ඐචධවැ෠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠෰࣐࣐฀࣐࣐࣐࣐࣐࣐ฐภ" + "ะเ׀ڐ๐๠ڐ๰຀ຐڐڐຠ" + "ࡰ͠ະເ໐໠໰໐ༀ༐༠ୠୠ" + "ୠ༰ୠୠཀཐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐའ࣐࣐ڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐ཰͠͠ڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐྀ࣐ர͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠͠͠͠͠͠͠͠͠͠͠͠͠" + "͠͠͠͠ڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐڐڐڐڐڐڐڐڐڐڐڐ" + "ڐڐྐ͠͠ྠྠྠྠྠྠྠྠ" + "ྠྠྠྠྠྠྠྠྠྠྠྠྠ" + "ྠྠྠྠྠྠྠྠྠྠྠྠྠ" + "ྠྠྠྠྠྠྠྠྠྠྠྠྠ" + "ྠྠྠྠྠྠྠྠྠྠྠྠྠ" + "ྠྠྠྠྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰྰྰྰྰ" + "ྰྰྰྰྰྰྰྰྰڐڐڐڐ" + "ڐڐڐڐڐ࿀ڐ࿐͠͠͠͠࿠" + "࿰က̀̀တဠ̀̀̀̀̀̀̀" + "̀̀̀ူ၀̀ၐ̀ၠၰႀ႐Ⴀ" + "Ⴐ̀̀̀Ⴠა\040რჰᄀᄐᄠᄰ").toCharArray();

    static final char Y[] = ("\000\000\000\000\002\004\006\000\000\000\000\000\000\000\010\004\012\014\016" + "\020\022\024\026\030\032\032\032\032\032\034\036\040\042\044\044\044\044\044" + "\044\044\044\044\044\044\044\046\050\052\054\056\056\056\056\056\056\056\056" + "\056\056\056\056\060\062\064\000\000\066\000\000\000\000\000\000\000\000\000" + "\000\000\000\000\070\072\072\074\076\100\102\104\106\110\112\114\116\120\122" + "\124\126\126\126\126\126\126\126\126\126\126\126\130\126\126\126\132\134\134" + "\134\134\134\134\134\134\134\134\134\136\134\134\134\140\142\142\142\142\142" + "\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142" + "\144\142\142\142\146\150\150\150\150\150\150\150\152\142\142\142\142\142\142" + "\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\154\150" + "\150\152\156\142\142\160\162\164\166\170\172\162\174\176\142\200\202\204\142" + "\142\142\206\210\200\142\206\212\214\150\216\142\220\142\222\224\224\226\230" + "\232\226\234\150\150\150\150\150\150\150\236\142\142\142\142\142\142\142\142" + "\142\240\232\142\242\142\142\142\142\244\142\142\142\142\142\142\142\142\142" + "\200\246\250\250\250\250\250\250\250\250\250\250\250\250\200\252\254\256\260" + "\262\200\200\264\266\200\200\270\200\200\272\200\274\276\200\200\200\200\200" + "\300\302\200\200\300\304\200\200\200\306\200\200\200\200\200\200\200\200\200" + "\200\200\200\200\200\310\310\310\310\312\314\310\310\310\316\316\320\320\320" + "\320\320\310\316\316\316\316\316\316\316\310\310\322\316\316\316\316\322\316" + "\316\316\316\316\316\316\316\324\324\324\324\324\324\324\324\324\324\324\324" + "\324\324\324\324\324\324\326\324\324\324\324\324\324\324\324\324\250\250\330" + "\324\324\324\324\324\324\324\324\324\250\250\316\250\250\332\250\334\250\250" + "\316\336\340\342\344\346\350\126\126\126\126\126\126\126\126\352\126\126\126" + "\126\354\356\360\134\134\134\134\134\134\134\134\362\134\134\134\134\364\366" + "\370\372\374\376\142\142\142\142\142\142\142\142\142\142\142\142ĀĂ" + "ĄĆĈ\142\250\250ĊĊĊĊĊĊĊĊ" + "\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\126\134\134\134" + "\134\134\134\134\134\134\134\134\134\134\134\134\134ČČČČ" + "ČČČČ\142Ď\324ĐĒ\142\142\142\142\142\142" + "\142\142\142\142\142Ĕ\150\150\150\150\150\150Ė\142\142\142\142\142" + "\142\142\142\142\142\142\142\142\142\142\142\142\142\142\250\142\250\250\250" + "\142\142\142\142\142\142\142\142\250\250\250\250\250\250\250\250\250\250\250" + "\250\250\250\250\250ĘĚĚĚĚĚĚĚĚ" + "ĚĚĚĚĚĚĚĚĚĚĜĞĠ" + "ĠĠĢĤĤĤĤĤĤĤĤĤĤ" + "ĤĤĤĤĤĤĤĤĦĨĪ\250\250" + "\330\324\324\324\324\324\324\324\324\330\324\324\324\324\324\324\324\324\324" + "\324\324\330\324ĬĬĮĐ\250\250\250\250\250İİİ" + "İİİİİİİİİİĲ\250\250" + "İĴĶ\250\250\250\250\250ĸĸ\250\250\250\250ĺ\074" + "\324\324\324\250\250ļ\250ļľŀŀŀŀŀŀ" + "ŀŀŀŀŀŀł\250\250ńŀŀŀ" + "ŀņ\324\324\324\324\324\324Đ\250\250\250ňňňň" + "ňŊŌŀŎŀŀŀŀŀŀŀŀ" + "ŀŀŀŀŀŀŀŀŀŀŀŀŀ" + "ŀŀŀŀŀŀŀŀŀŀŀŀŐ" + "\324\324\324ŒŔ\324\324ŖŘŚ\324\324ŀ\032\032\032" + "\032\032ŀŜŞŠŠŠŠŠŠŠŢ" + "ņŀŀŀŀŀŀŀŀŀŀŀŀ" + "ŀŀŀ\324\324\324\324\324\324\324\324\324\324\324\324\324Đ" + "ľŀ\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250" + "\250\250\250\250\250\250\250\250ŀŀŀ\324\324\324\324\324Ŏ" + "\250\250\250\250\250\250\250\330Ť\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\250" + "ŦŨŪ\324\324\324ŤŨŪ\250Ŭ\324Đ\250\224" + "\224\224\224\224\324ĠŮŮŮŮŮŰ\250\250\250" + "\250\250\250\250\330ŨŲ\224\224\224ŴŲŴŲ\224\224" + "\224\224\224\224\224\224\224\224Ŵ\224\224\224ŴŴ\250\224\224" + "\250ŦŨŪ\324ĐŶŸŶŪ\250\250\250\250Ŷ" + "\250\250\224Ų\224\324\250ŮŮŮŮŮ\224\072ź" + "źżž\250\250\330ŤŲ\224\224Ŵ\250ŲŴŲ" + "\224\224\224\224\224\224\224\224\224\224Ŵ\224\224\224Ŵ\224Ų" + "Ŵ\224\250ĐŨŪĐ\250\330Đ\330\324\250\250\250\250" + "\250Ų\224ŴŴ\250\250\250ŮŮŮŮŮ\324\224" + "Ŵ\250\250\250\250\250\330ŤŲ\224\224\224\224Ų\224Ų" + "\224\224\224\224\224\224\224\224\224\224Ŵ\224\224\224Ŵ\224Ų" + "\224\224\250ŦŨŪ\324\324\330ŤŶŪ\250Ŵ\250" + "\250\250\250\250\250\250\224\324\250ŮŮŮŮŮƀ\250" + "\250\250\250\250\250\250\224\224\224\224Ŵ\224\224\224Ŵ\224Ų" + "\224\224\250ŦŪŪ\324\250ŶŸŶŪ\250\250\250" + "\250Ť\250\250\224Ų\224\250\250ŮŮŮŮŮƂ" + "\250\250\250\250\250\250\250\250ŦŲ\224\224Ŵ\250\224Ŵ\224" + "\224\250ŲŴŴ\224\250ŲŴ\250\224Ŵ\250\224\224\224" + "\224Ų\224\250\250ŨŤŸ\250ŨŸŨŪ\250\250" + "\250\250Ŷ\250\250\250\250\250\250\250ƄŮŮŮŮƆ" + "ƈ\074\074Ɗƌ\250\250ŶŨŲ\224\224\224Ŵ\224" + "Ŵ\224\224\224\224\224\224\224\224\224\224\224Ŵ\224\224\224\224\224" + "Ų\224\224\250\250\324ŤŨŸ\324Đ\324\324\250\250\250" + "\330Đ\250\250\250\250\224\250\250ŮŮŮŮŮ\250\250" + "\250\250\250\250\250\250\250ŨŲ\224\224\224Ŵ\224Ŵ\224\224" + "\224\224\224\224\224\224\224\224\224Ŵ\224\224\224\224\224Ų\224\224" + "\250ŦƎŨŨŸƐŸŨ\324\250\250\250Ŷ" + "Ÿ\250\250\250Ŵ\224\224\224\224Ŵ\224\224\224\224\224\224\224" + "\224\250\250ŨŪ\324\250ŨŸŨŪ\250\250\250\250Ŷ" + "\250\250\250\250\250ŨŲ\224\224\224\224\224\224\224\224Ŵ\250" + "\224\224\224\224\224\224\224\224\224\224\224\224Ų\224\224\224\224Ų" + "\250\224\224\224Ŵ\250Đ\250ŶŨ\324ĐĐŨŨ" + "ŨŨ\250\250\250\250\250\250\250\250\250ŨŰ\250\250\250\250" + "\250Ų\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224Ŭ\224\324\324\324Đ\250ƀ\224\224" + "\224ƒ\324\324\324ƔƖƖƖƖƖĠ\250\250Ų" + "ŴŴŲŴŴŲ\250\250\250\224\224Ų\224\224\224" + "Ų\224ŲŲ\250\224Ų\224Ŭ\224\324\324\324\330Ŧ\250" + "\224\224Ŵ\332\324\324\324\250ƖƖƖƖƖ\250\224\250" + "ƘƚĠĠĠĠĠĠĠƜƚƚ\324" + "ƚƚƚƞƞƞƞƞƠƠƠƠƠ" + "ĎĎĎƢƢŨ\224\224\224\224Ų\224\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224Ŵ\250\250\330\324\324" + "\324\324\324\324Ť\324\324Ɣ\324\224\224\250\250\324\324\324\324\330" + "\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324\324Đ" + "ƚƚƚƚƤƚƚžƦ\250\250\250\250\250" + "\250\250\250\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224" + "\224Ų\224\224ŲŴŪ\324ŤĐ\250\324Ū\250\250" + "\250ƞƞƞƞƞĠĠĠ\224\224\224Ũ\324" + "\250\250\250\372\372\372\372\372\372\372\372\372\372\372\372\372\372\372\372" + "\372\372\372\250\250\250\250\250\224\224\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224ŴĨ\250\250\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\250\250Ų\224Ŵ\250\250\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224" + "\224\224\224\250\250\250\224\224\224Ŵ\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224ŴŴ\224\224\250\224\224\224ŴŴ" + "\224\224\250\224\224\224ŴŴ\224\224\250\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224ŴŴ\224\224\250\224\224\224Ŵ" + "Ŵ\224\224\250\224\224\224Ŵ\224\224\224Ŵ\224\224\224\224\224" + "\224\224\224\224\224\224Ŵ\224\224\224\224\224\224\224\224\224\224\224" + "Ŵ\224\224\224\224\224\224\224\224\224Ŵ\250\250ĨĠĠ" + "ĠƨƪƪƪƪƬƮƠƠƠư\250" + "\224\224\224\224\224\224\224\224\224\224Ŵ\250\250\250\250\250\224\224" + "\224\224\224\224Ʋƴ\224\224\224Ŵ\250\250\250\250ƶ\224\224" + "\224\224\224\224\224\224\224\224\224\224Ƹƺ\250\224\224\224\224\224" + "ƲĠƼƾ\250\250\250\250\250\250\250\224\224\224\224\224\224" + "Ŵ\224\224\324Đ\250\250\250\250\250\224\224\224\224\224\224\224\224" + "\224\324ƔŰ\250\250\250\250\224\224\224\224\224\224\224\224\224\324" + "\250\250\250\250\250\250\224\224\224\224\224\224Ŵ\224Ŵ\324\250\250" + "\250\250\250\250\224\224\224\224\224\224\224\224\224\224ǀŪ\324\324" + "\324ŨŨŨŨŤŪ\324\324\324\324\324ĠǂĠ" + "ǄŬ\250ƞƞƞƞƞ\250\250\250ǆǆǆ" + "ǆǆ\250\250\250\020\020\020ǈ\020Ǌ\324ǌƖƖ" + "ƖƖƖ\250\250\250\224ǎ\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\250\250" + "\250\250\224\224\224\224Ŭ\250\250\250\250\250\250\250\250\250\250\250" + "\224\224\224\224\224\224\224\224\224\224\224\224\224\224Ŵ\250\324Ť" + "ŨŪǐǒ\250\250ŨŤŨŨŪ\324\250\250" + "ƌ\250\020ŮŮŮŮŮ\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\250\224\224Ŵ\250\250\250\250\250\074\074" + "\074\074\074\074\074\074\074\074\074\074\074\074\074\074\200\200\200\200\200" + "\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\200\310\310" + "\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310\310" + "\310\310\310\310\310\310\200\200\200\200\200\250\250\250\250\250\250\250\250" + "\250\250\142\142\142\142\142\142\142\142\142\142\142ǔǔǖ\250" + "\250\142\142\142\142\142\142\142\142\142\142\142\142\142\250\250\250ǘ" + "ǘǘǘǚǚǚǚǘǘǘ\250ǚǚ" + "ǚ\250ǘǘǘǘǚǚǚǚǘǘǘ" + "ǘǚǚǚǚǘǘǘ\250ǚǚǚ\250" + "ǜǜǜǜǞǞǞǞǘǘǘǘǚ" + "ǚǚǚǠǢǢǤǦǨǪ\250ǔǔ" + "ǔǔǬǬǬǬǔǔǔǔǬǬǬ" + "ǬǔǔǔǔǬǬǬǬǘǔǮǔ" + "ǚǰǲǴ\316ǔǮǔǶǶǲ\316ǘ" + "ǔ\250ǔǚǸǺ\316ǘǔǼǔǚǾ" + "Ȁ\316\250ǔǮǔȂȄǲȆȈȈȈ" + "ȊȈȌȎȐȒȒȒ\020ȔȖȔȖ" + "\020\020\020\020ȘȚȚȜȞȞȠ\020ȢȤ" + "\020ȦȨ\020ȪȬ\020\020\020\020\020ȮȰȲ\250" + "\250\250ȴȎȎ\250\250\250ȎȎȎȶ\250\110\110" + "\110ȸȪȺȼȼȼȼȼȸȪȾ\250" + "\250\250\250\250\250\250\250\072\072\072\072\072\072\072\072\072\250\250\250" + "\250\250\250\250\250\250\250\250\250\250\250\250\324\324\324\324\324\324ɀ" + "ĒŔĒŔ\324\324Đ\250\250\250\250\250\250\250\250\250" + "\250\074ɂ\074Ʉ\074Ɇ\372\200\372ɈɄ\074Ʉ\372\372" + "\074\074\074ɂɊɂɌ\372Ɏ\372Ʉ\220\224ɐ\074" + "ɒ\372\036ɔɖ\200\200ɘ\250\250\250ɚ\122\122\122\122" + "\122\122ɜɜɜɜɜɜɞɞɠɠɠ" + "ɠɠɠɢɢɤɦ\250\250\250\250\250\250ɔɔ" + "ɨ\074\074ɔ\074\074ɨɘ\074ɨ\074\074\074ɨ\074\074" + "\074\074\074\074\074\074\074\074\074\074\074\074\074ɔ\074ɨɨ" + "\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074ɔɔɔ" + "ɔɔɔɪɬ\036ɔɬɬɬɔɪȸ" + "ɪ\036ɔɬɬɪɬ\036\036\036ɔɪɬɬ" + "ɬɬɔɔɪɪɬɬɬɬɬɬɬ" + "ɬ\036ɔɔɬɬɔɔɔɔɪ\036\036ɬ" + "ɬɬɬɔɬɬɬɬɬɬɬɬɬ" + "ɬɬɬɬɬɬ\036ɪɬ\036ɔɔ\036ɔ" + "ɔɔɔɬɔɬɬɬɬɬɬɬɬ" + "ɬ\036ɔɔɬɔɔɔɔɪɬɬɔ" + "ɬɔɔɬɬɬɬɬɬɬɬɬɬ" + "ɬɬɔɬɬɬɬɬɬɬɬ\074\074" + "\074\074ɬɬ\074\074\074\074\074\074\074\074\074\074ɬ\074\074" + "\074ɮɰ\074\074\074\074\074ƚƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚƚƚƚƚƚƚ" + "ƚɲɨ\074\074\074\074\074\074\074\074\074\074\074ɴ\074\074" + "ɘɔɔɔɔɔɔɔɔɔɔɔɔ" + "Ƣɶ\074\074\074\074\074\074\074\074\074\074\074\074ƌ\250\250" + "\250\250\250\250\250\074\074\074ƌ\250\250\250\250\250\250\250\250\250" + "\250\250\250\074\074\074\074\074ƌ\250\250\250\250\250\250\250\250\250" + "\250ɸɸɸɸɸɸɸɸɸɸɺɺ" + "ɺɺɺɺɺɺɺɺɼɼɼɼɼ" + "ɼɼɼɼɼƚƚƚƚƚƚƚƚ" + "ƚƚƚƚƚɾɾɾɾɾɾɾɾ" + "ɾɾɾɾɾʀʀʀʀʀʀʀʀ" + "ʀʀʀʀʀʂʄʄʄʄʆʈʈ" + "ʈʈʊ\074\074\074\074\074\074\074\074\074\074\074ɘ\074\074" + "\074\074ɘ\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074" + "\074\074\074\074\074\074\074\074\074\074\074\074ɔɔɔɔ\074" + "\074\074\074\074\074\074\074\074\074\074\074ʌ\074\074\074\074\074\074" + "\074\074\074\074ɘ\074\074\074\074\074\074\074\250\074\074\074\074\074" + "\074\074\074\074\250\250\250\250\250\250\250\074\250\250\250\250\250\250\250" + "\250\250\250\250\250\250\250\250ʌ\074ƌ\074\074\250\074\074\074\074" + "\074\074\074\074\074\074\074\074\074\074ʌ\074\074\074\074\074\074\074" + "\074\074\074\074\074\074\074\074\074\074ʌʌ\074ƌ\250ƌ\074" + "\074\074ƌʌ\074\074\074\022\022\022\022\022\022\022ʎʎʎ" + "ʎʎʐʐʐʐʐʒʒʒʒʒƌ" + "\250\074\074\074\074\074\074\074\074\074\074\074\074ʌ\074\074\074\074" + "\074\074ƌ\250\250\250\250\250\250\250\250ɔɪɬ\036ɔ" + "ɔɬ\036ɔɬɬ\022\022\022\250\250ɔɔɔɔ" + "ɔɔɔɔɔɔɔɔɔɔɔɔɔ" + "ɔɔɔɔɔɔɔɔȪʔʔʔʔ" + "ʔʔʔʔʔʔʖɪɬɬɬɬɬ" + "ɬɬɬɬɬɔɔɔɔ\036ɔɔɔ" + "ɬɬɬɔɪɔɔɬɬ\036ɬɔ\022" + "\022\036ɔɪɪɬɔɬɔɔɔɔɔ" + "ɬɬɬɔ\022ɔɔɔɔɔɔɬɬ" + "ɬɬɬɬɬɬɬ\036ɬɬɔ\036\036ɪ" + "ɪɬ\036ɔɔɬɔɔɔɬ\036ɔɔ" + "ɔɔɔɔɔɔɔɔɔɪ\036ɔɔ" + "ɔɔɔɬɔɔɬɬɪ\036ɪ\036ɔ" + "ɪɬɬɬɬɬɬɬɬɬɬɬɬ" + "ɬɬɬɬɬɬɬɬɬɔɬɬɬ" + "ɬɪɬɬɬɬɬɬɬɬɬɬɬ" + "ɬɬɬɬɬɬɬɬ\036ɔɔ\036\036ɔ" + "ɬɬ\036ɔɔɬ\036ɔɪɔɪɬɬ" + "ɪɔ\074\074\074\074\074\074\074\250\250\250\250\250\250\250\250\250" + "\074\074\074\074\074\074\074\074\074\074\074\074\074ʌ\074\074\074\074" + "\074\074\074\074\074\074\074\074\250\250\250\250\250\250\074\074\074\074\074" + "\074\074\074\074\074\074\250\250\250\250\250\250\250\250\250\250\250\250\250" + "\074\074\074\074\074\074\250\250\012\020ʘʚ\022\022\022\022\022\074" + "\022\022\022\022ʜʞʠʢʢʢʢ\324\324\324ʤ" + "\310\310\074ʦʨʪ\074\224\224\224\224\224\224\224\224\224\224" + "\224Ŵ\330ʬʮʰʲ\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224\224" + "ʴ\310ʰ\250\250Ų\224\224\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224Ŵ\250Ų\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224Ŵƚʶʶƚƚƚƚ" + "ƚ\250\250\250\250\250\250\250\250\224\224\224\224\224\224\224\224ƚ" + "ƚƚƚƚƚƚƚƚƚƚƚƚƚ" + "ɲƌʸʸʸʸʸƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚ\250\250\250\250\250\250ʺʼ" + "ʼʼʼʼ\122\122ƚƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚ\074Ʀƚƚƚƚ" + "ƚƚƚƚʾ\122\122\122\122\122\122\122ƚƚƚ" + "ƚƚƚ\074\074ƚƚƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚƚƚƚƚƚƚ" + "ƚƚžƚƚƚƚƚƚƚƚƚƚ" + "ƚɲ\074ɴƚƚƚƚƚƚƚƚƚ" + "ƚƚƚƚƚƚƚƚ\074ƚƚƚƚ" + "ƚƚƚƚƚƚƚƚƚƚƚɲ\224" + "\224\224\224\224\224\224\224\224\224\224\250\250\250\250\250\224\224\224\250" + "\250\250\250\250\250\250\250\250\250\250\250\250\224\224\224\224\224\224Ŵ" + "\250\074\074\074\074\074\074\074\074\224\224\250\250\250\250\250\250\250\250" + "\250\250\250\250\250\250ˀˀˀˀˀˀˀˀˀ" + "ˀˀˀˀˀˀˀ˂˂˂˂˂˂" + "˂˂˂˂˂˂˂˂˂˂\224\224\224\224" + "\224\224\224\250\224\224\224\224\224\224\224\224\224\224\224\224\224Ŵ" + "\250\250\250\250\250\250\250\250\250\250ǔǔǔǮ\250\250\250" + "\250\250˄ǔǔ\250\250ˆˈİİİİˊ" + "İİİİİİĲİİĲĲİˆ" + "Ĳİİİİİŀŀŀŀŀŀŀ" + "ŀŀŀŀŀŀŀŀŀŀ\250\250\250\250" + "\250\250\250\250\250\250\250\250\250\250\250\250ľŀŀŀŀ" + "ŀŀŀŀŀŀŀŀŀŀŀŀŀ" + "ŀŀŀŀƢ\250\250\250\250\250\250\250\250ŀŀ" + "ŀŀŀŀŀŀŀŀŀŀŀŀŀ" + "ŀ\250ŀŀŀŀŀŀŀŀŀŀŀ" + "\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250\250" + "\250ŀŀŀŀŀŀˌ\250\324\324\324\324\324\324" + "\324\324\250\250\250\250\250\250\250\250\324\324\250\250\250\250\250\250ˎ" + "ː˒˔˔˔˔˔˔˔˖˘˖\020" + "Ȧ˚\034˜˞\020ʜ˔˔ˠ\020ˢɔˤ" + "˦Ƞ\250\250ŀŀłŀŀŀŀŀŀ" + "ŀŀŀŀŀŀŀŀŀŀŀŀŀ" + "łŢȲ\014\016\020\022\024\026\030\032\032\032\032\032\034\036" + "\040\054\056\056\056\056\056\056\056\056\056\056\056\056\060\062ȪȬ" + "\022Ȧ\224\224\224\224\224ʰ\224\224\224\224\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224\224\224\224\310\224\224\224\224\224\224" + "\224\224\224\224\224\224\224\224\224Ŵ\250\224\224\224\250\224\224\224" + "\250\224\224\224\250\224Ŵ\250\072˨Ɗ˪ɘɔɨ" + "ƌ\250\250\250\250ŢȎ\074\250").toCharArray();

    static final int A[] = new int[748];

    static final String A_DATA = "䠀ဏ䠀ဏ䠀ဏ堀䀏倀䀏堀䀏怀" + "䀏倀䀏倀䀏倀䀏怀䀌栀\030栀\030" + "⠀\030⠀怚⠀\030栀\030栀\030\025\026栀" + "\030⠀\031㠀\030⠀\024㠀\030 \030᠀㘉᠀㘉" + "㠀\030栀\030\031栀\031\031栀\030栀\030\202" + "翡\202翡\202翡\202翡\025栀\030\026栀\033" + "栀倗栀\033\201翢\201翢\201翢\201翢\025栀" + "\031\026栀\031䠀ဏ䠀ဏ倀ဏ㠀\014栀" + "\030⠀怚⠀怚栀\034栀\034栀\033栀\034\000瀂" + "\035栀\031栀တ栀\034栀\033⠀\034⠀\031᠀" + "؋᠀؋栀\033߽瀂栀\034栀\030栀\033᠀" + "ԋ\000瀂\036栀ࠋ栀ࠋ栀ࠋ栀\030\202" + "瀁\202瀁\202瀁栀\031\202瀁߽瀂\201瀂\201瀂" + "\201瀂栀\031\201瀂؝瀂\006瀁\005瀂߿" + "Ρ瀂\000瀂\006瀁\005瀂\006瀁\005瀂߽瀂" + "؞瀁\006瀁\000瀂͊瀁̺瀁\006瀁\005瀂" + "̶瀁̶瀁\006瀁\005瀂\000瀂ľ瀁̪瀁" + "̮瀁\006瀁̾瀁ٽ瀂͎瀁͆瀁\000" + "瀂\000瀂͎瀁͖瀁׹瀂͚瀁ͪ瀁" + "\006瀁\005瀂ͪ瀁\005瀂ͦ瀁ͦ瀁\006瀁" + "\005瀂ͮ瀁\000瀂\000瀅\000瀂ܡ瀂\000瀅" + "\000瀅\012\007\011\012\007\011\011" + "\006瀁\005瀂Ľ瀂߽瀂\012پ瀁ܢ" + "瀁׺瀁\000瀂\000瀂砀\000砀\000砀\000\000瀂" + "͉瀂̹瀂\000瀂̵瀂̵瀂\000瀂̩" + "瀂\000瀂̭瀂̵瀂\000瀂\000瀂̽瀂ͅ" + "瀂͍瀂\000瀂͍瀂͕瀂\000瀂\000瀂͙" + "瀂ͩ瀂\000瀂\000瀂ͩ瀂ͥ瀂ͥ瀂" + "ͭ瀂\000瀂\000瀄\000瀄\000瀄栀瀄栀瀄" + "\000瀄栀\033栀\033栀瀄栀瀄\000瀄栀\033" + "䀀〆䀀〆䀀〆䚱〆砀\000䀀〆\000" + "瀄砀\000栀\030砀\000\232瀁栀\030\226瀁\226瀁" + "\226瀁砀\000Ă瀁砀\000\376瀁\376瀁߽瀂" + "\202瀁砀\000\202瀁\231瀂\225瀂\225瀂\225瀂߽" + "瀂\201瀂\175瀂\201瀂ā瀂\375瀂\375瀂砀" + "\000\371瀂\345瀂\000瀁\000瀁\000瀁\275瀂\331瀂" + "\000瀂ř瀂Ł瀂ߥ瀂\000瀂ܒ瀁Ɓ" + "瀂栀\031\006瀁\005瀂ߦ瀁ł瀁ł瀁Ł" + "瀂Ł瀂\000\034䀀〆䀀〆砀\000䀀\007䀀" + "\007\000瀁\006瀁\005瀂砀\000砀\000\302瀁\302瀁" + "\302瀁\302瀁砀\000砀\000\000瀄\000\030\000\030砀\000" + "\301瀂\301瀂\301瀂\301瀂߽瀂砀\000\000\030栀" + "\024砀\000ࠀ\030䀀〆䀀〆ࠀ\030ࠀ瀅ࠀ" + "瀅ࠀ瀅砀\000ࠀ瀅ࠀ\030ࠀ\030砀\000က" + "တကတ㠀\030က\030砀\000က\030砀\000က" + "瀅က瀅က瀅က瀅砀\000က瀄က瀅" + "က瀅䀀〆　㐉　㐉⠀\030　\030　" + "\030က\030䀀〆က瀅က\030က瀅䀀〆က" + "တ䀀\007䀀〆䀀〆က瀄က瀄䀀〆" + "䀀〆栀\034က瀅က\034က\034က瀅က\030" + "က\030砀\000䠀တ䀀〆\000〈䀀〆\000瀅" + "\000〈\000〈\000〈䀀〆\000瀅䀀〆\000㝉" + "\000㝉\000\030砀\000砀\000\000瀅\000瀅砀\000砀" + "\000\000〈\000〈砀\000\000֫\000֫\000\013\000۫\000" + "\034砀\000砀\000⠀怚\000\034\000瀅砀\000\000㝉" + "\000݋\000ࠋ\000ࠋ栀\034栀\034⠀怚栀\034砀" + "\000\000〈\000〆\000〆\000〈\000瀄䀀〆䀀〆" + "\000\030\000㘉\000㘉\000瀅\000\034\000\034\000\034\000\030\000" + "\034\000㐉\000㐉\000ࠋ\000ࠋ栀\025栀\026䀀〆" + "\000\034砀\000\000\034\000\030\000㜉\000㜉\000㜉\000܋" + "\000Ы\000Ջ\000ࠋ\000ࠋ砀\000\000瀅\000\030\000\030" + "\000瀅怀䀌\000瀅\000瀅栀\025栀\026砀\000\000" + "瑪\000瑪\000瑪砀\000\000တ\000တ\000\030\000瀄" + "\000\030⠀怚栀؋栀؋栀\024栀\030栀\030" + "䀀〆怀䀌砀\000\000瀅\000瀄䀀〆䀀〈" + "䀀〈䀀〈߽瀂߽瀂߽瀂\355瀂ߡ" + "瀂ߡ瀂ߢ瀁ߢ瀁߽瀂ߡ瀂砀\000" + "ߢ瀁ۙ瀂ۙ瀂ک瀂ک瀂ٱ瀂ٱ" + "瀂؁瀂؁瀂ف瀂ف瀂؉瀂؉瀂" + "߿߿߽瀂砀\000ۚ瀁ۚ瀁߿" + "栀\033߽瀂栀\033ڪ瀁ڪ瀁ٲ瀁" + "ٲ瀁砀\000栀\033߽瀂ߥ瀂ق瀁ق" + "瀁ߦ瀁栀\033؂瀁؂瀁؊瀁؊瀁" + "栀\033砀\000怀䀌怀䀌怀䀌怀\014怀䀌" + "䠀䀌䠀တ䠀တ\000တࠀတ栀\024栀" + "\024栀\035栀\036栀\025栀\035怀䀍倀䀎砀" + "တ砀တ砀တ怀\014⠀\030⠀\030⠀\030栀" + "\030栀\030\035\036栀\030栀\030栀倗栀倗" + "栀\030栀\031\025\026栀\030栀\031栀\030栀" + "倗砀\000砀\000栀\030砀\000怀䀌᠀؋\000" + "瀂⠀\031⠀\031\026\000瀂᠀Ћ᠀Ћ" + "\026砀\000䀀〆䀀\007\000瀁栀\034栀\034\000瀁" + "\000瀂\000瀁\000瀁\000瀂߾瀁栀\034߾瀁" + "߾瀁⠀\034\000瀂\000瀅\000瀂砀\000\000瀂栀" + "\031栀\031栀\031\000瀁栀\034栀\031砀\000栀ࠋ" + "\102琪\102琪\102砊\102砊\101瘪\101瘪\101砊\101" + "砊\000砊\000砊\000砊\000瀊栀\031栀\034栀\031" + "\031\031\031栀\034\025\026栀\034\000" + "\034栀\034栀\034\000\034栀\030栀\034᠀Ы᠀Ы" + "᠀֫᠀֫᠀ܫ᠀ܫ\152\034\152\034\151\034\151" + "\034᠀ۋ栀Ћ栀Ћ栀Ћ栀Ћ栀֋" + "栀֋栀֋栀֋栀Ы砀\000栀\034栀" + "ի栀ի栀Ы栀Ы栀۫栀۫\026" + "\025\026栀\031栀\034\000瀄\000瀅\000眪栀" + "\024栀\025栀\026栀\026栀\034\000琊\000琊\000琊" + "栀\024\000瀄\000癊\000睪\000璊\000瀄\000瀅栀" + "\030䀀〆栀\033栀\033\000瀄\000瀄\000瀅栀\024" + "\000瀅\000瀅栀倗\000׫\000׫\000Ы\000Ы栀" + "\034栀ҋ栀ҋ栀ҋ\000\034栀ࠋ\000\023\000\023" + "\000\022\000\022砀\000߽瀂砀\000ࠀ瀅䀀〆ࠀ" + "瀅ࠀ瀅⠀\031က怚栀\034栀\030栀\024栀" + "\024栀倗栀倗栀\025栀\026栀\025栀\026栀" + "\030栀\030栀\025栀倗栀倗㠀\030砀\000栀" + "\030㠀\030栀\026⠀\030⠀\031⠀\024栀\031砀\000" + "栀\030⠀怚栀\031栀\033⠀怚砀\000";

    static {
        charMap = new char[][][] { { { 'ß' }, { 'S', 'S' } }, { { 'İ' }, { 'İ' } }, { { 'ŉ' }, { 'ʼ', 'N' } }, { { 'ǰ' }, { 'J', '̌' } }, { { 'ΐ' }, { 'Ι', '̈', '́' } }, { { 'ΰ' }, { 'Υ', '̈', '́' } }, { { 'և' }, { 'Ե', 'Ւ' } }, { { 'ẖ' }, { 'H', '̱' } }, { { 'ẗ' }, { 'T', '̈' } }, { { 'ẘ' }, { 'W', '̊' } }, { { 'ẙ' }, { 'Y', '̊' } }, { { 'ẚ' }, { 'A', 'ʾ' } }, { { 'ὐ' }, { 'Υ', '̓' } }, { { 'ὒ' }, { 'Υ', '̓', '̀' } }, { { 'ὔ' }, { 'Υ', '̓', '́' } }, { { 'ὖ' }, { 'Υ', '̓', '͂' } }, { { 'ᾀ' }, { 'Ἀ', 'Ι' } }, { { 'ᾁ' }, { 'Ἁ', 'Ι' } }, { { 'ᾂ' }, { 'Ἂ', 'Ι' } }, { { 'ᾃ' }, { 'Ἃ', 'Ι' } }, { { 'ᾄ' }, { 'Ἄ', 'Ι' } }, { { 'ᾅ' }, { 'Ἅ', 'Ι' } }, { { 'ᾆ' }, { 'Ἆ', 'Ι' } }, { { 'ᾇ' }, { 'Ἇ', 'Ι' } }, { { 'ᾈ' }, { 'Ἀ', 'Ι' } }, { { 'ᾉ' }, { 'Ἁ', 'Ι' } }, { { 'ᾊ' }, { 'Ἂ', 'Ι' } }, { { 'ᾋ' }, { 'Ἃ', 'Ι' } }, { { 'ᾌ' }, { 'Ἄ', 'Ι' } }, { { 'ᾍ' }, { 'Ἅ', 'Ι' } }, { { 'ᾎ' }, { 'Ἆ', 'Ι' } }, { { 'ᾏ' }, { 'Ἇ', 'Ι' } }, { { 'ᾐ' }, { 'Ἠ', 'Ι' } }, { { 'ᾑ' }, { 'Ἡ', 'Ι' } }, { { 'ᾒ' }, { 'Ἢ', 'Ι' } }, { { 'ᾓ' }, { 'Ἣ', 'Ι' } }, { { 'ᾔ' }, { 'Ἤ', 'Ι' } }, { { 'ᾕ' }, { 'Ἥ', 'Ι' } }, { { 'ᾖ' }, { 'Ἦ', 'Ι' } }, { { 'ᾗ' }, { 'Ἧ', 'Ι' } }, { { 'ᾘ' }, { 'Ἠ', 'Ι' } }, { { 'ᾙ' }, { 'Ἡ', 'Ι' } }, { { 'ᾚ' }, { 'Ἢ', 'Ι' } }, { { 'ᾛ' }, { 'Ἣ', 'Ι' } }, { { 'ᾜ' }, { 'Ἤ', 'Ι' } }, { { 'ᾝ' }, { 'Ἥ', 'Ι' } }, { { 'ᾞ' }, { 'Ἦ', 'Ι' } }, { { 'ᾟ' }, { 'Ἧ', 'Ι' } }, { { 'ᾠ' }, { 'Ὠ', 'Ι' } }, { { 'ᾡ' }, { 'Ὡ', 'Ι' } }, { { 'ᾢ' }, { 'Ὢ', 'Ι' } }, { { 'ᾣ' }, { 'Ὣ', 'Ι' } }, { { 'ᾤ' }, { 'Ὤ', 'Ι' } }, { { 'ᾥ' }, { 'Ὥ', 'Ι' } }, { { 'ᾦ' }, { 'Ὦ', 'Ι' } }, { { 'ᾧ' }, { 'Ὧ', 'Ι' } }, { { 'ᾨ' }, { 'Ὠ', 'Ι' } }, { { 'ᾩ' }, { 'Ὡ', 'Ι' } }, { { 'ᾪ' }, { 'Ὢ', 'Ι' } }, { { 'ᾫ' }, { 'Ὣ', 'Ι' } }, { { 'ᾬ' }, { 'Ὤ', 'Ι' } }, { { 'ᾭ' }, { 'Ὥ', 'Ι' } }, { { 'ᾮ' }, { 'Ὦ', 'Ι' } }, { { 'ᾯ' }, { 'Ὧ', 'Ι' } }, { { 'ᾲ' }, { 'Ὰ', 'Ι' } }, { { 'ᾳ' }, { 'Α', 'Ι' } }, { { 'ᾴ' }, { 'Ά', 'Ι' } }, { { 'ᾶ' }, { 'Α', '͂' } }, { { 'ᾷ' }, { 'Α', '͂', 'Ι' } }, { { 'ᾼ' }, { 'Α', 'Ι' } }, { { 'ῂ' }, { 'Ὴ', 'Ι' } }, { { 'ῃ' }, { 'Η', 'Ι' } }, { { 'ῄ' }, { 'Ή', 'Ι' } }, { { 'ῆ' }, { 'Η', '͂' } }, { { 'ῇ' }, { 'Η', '͂', 'Ι' } }, { { 'ῌ' }, { 'Η', 'Ι' } }, { { 'ῒ' }, { 'Ι', '̈', '̀' } }, { { 'ΐ' }, { 'Ι', '̈', '́' } }, { { 'ῖ' }, { 'Ι', '͂' } }, { { 'ῗ' }, { 'Ι', '̈', '͂' } }, { { 'ῢ' }, { 'Υ', '̈', '̀' } }, { { 'ΰ' }, { 'Υ', '̈', '́' } }, { { 'ῤ' }, { 'Ρ', '̓' } }, { { 'ῦ' }, { 'Υ', '͂' } }, { { 'ῧ' }, { 'Υ', '̈', '͂' } }, { { 'ῲ' }, { 'Ὼ', 'Ι' } }, { { 'ῳ' }, { 'Ω', 'Ι' } }, { { 'ῴ' }, { 'Ώ', 'Ι' } }, { { 'ῶ' }, { 'Ω', '͂' } }, { { 'ῷ' }, { 'Ω', '͂', 'Ι' } }, { { 'ῼ' }, { 'Ω', 'Ι' } }, { { 'ﬀ' }, { 'F', 'F' } }, { { 'ﬁ' }, { 'F', 'I' } }, { { 'ﬂ' }, { 'F', 'L' } }, { { 'ﬃ' }, { 'F', 'F', 'I' } }, { { 'ﬄ' }, { 'F', 'F', 'L' } }, { { 'ﬅ' }, { 'S', 'T' } }, { { 'ﬆ' }, { 'S', 'T' } }, { { 'ﬓ' }, { 'Մ', 'Ն' } }, { { 'ﬔ' }, { 'Մ', 'Ե' } }, { { 'ﬕ' }, { 'Մ', 'Ի' } }, { { 'ﬖ' }, { 'Վ', 'Ն' } }, { { 'ﬗ' }, { 'Մ', 'Խ' } } };
        {
            char[] data = A_DATA.toCharArray();
            assert (data.length == (748 * 2));
            int i = 0, j = 0;
            while (i < (748 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }
    }
}
