package org.yccheok.jstock.gui;

import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.yccheok.jstock.engine.Country;
import org.yccheok.jstock.gui.analysis.MemoryLogJDialog;
import org.yccheok.jstock.internationalization.GUIBundle;
import org.yccheok.jstock.internationalization.MessagesBundle;
import org.yccheok.jstock.network.Utils.Type;

/**
 *
 * @author yccheok
 */
public class SaveToCloudJDialog extends javax.swing.JDialog {

    /** Creates new form LoadFromCloudJDialog */
    public SaveToCloudJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.jLabel3.setVisible(false);
        this.jLabel4.setVisible(false);
        this.jLabel5.setVisible(false);
        final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        if (jStockOptions.isRememberGoogleAccountEnabled()) {
            this.jCheckBox1.setSelected(true);
            this.jTextField1.setText(Utils.decrypt(jStockOptions.getGoogleUsername()));
            this.jPasswordField1.setText(Utils.decrypt(jStockOptions.getGooglePassword()));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/yccheok/jstock/data/gui");
        setTitle(bundle.getString("SaveToCloudJDialog_Title"));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));
        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);
        getContentPane().add(jPanel6, java.awt.BorderLayout.EAST);
        jXHeader1.setDescription(bundle.getString("SaveToCloudJDialog_Description"));
        jXHeader1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/32x32/upload_to_cloud.png")));
        jXHeader1.setTitle(bundle.getString("SaveToCloudJDialog_Title"));
        getContentPane().add(jXHeader1, java.awt.BorderLayout.NORTH);
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/apply.png")));
        jButton1.setText(bundle.getString("SaveToCloudJDialog_OK"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/button_cancel.png")));
        jButton2.setText(bundle.getString("SaveToCloudJDialog_Cancel"));
        jButton2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText(bundle.getString("SaveToCloudJDialog_SavingToCloud..."));
        jPanel4.add(jLabel3);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16x16/spinner.gif")));
        jPanel4.add(jLabel4);
        jLabel5.setText(bundle.getString("WizardDownloadlIndicatorJPanel_ViewLog"));
        this.jLabel3.setVisible(false);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });
        jPanel4.add(jLabel5);
        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SaveToCloudJDialog_GoogleAccount")));
        jLabel1.setText(bundle.getString("SaveToCloudJDialog_Username"));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jLabel2.setText(bundle.getString("SaveToCloudJDialog_Password"));
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });
        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getSize() - 1f));
        jLabel6.setText(bundle.getString("SaveToCloudJDialog_EmailExample"));
        jCheckBox1.setText(bundle.getString("SaveToCloudJDialog_KeepMeSignedIn"));
        jLabel7.setText(bundle.getString("SaveToCloudJDialog_ViewPrivacyInformation"));
        this.jLabel3.setVisible(false);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
        });
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jCheckBox1).addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addComponent(jLabel2)).addGap(10, 10, 10).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE).addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel6)).addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel2Layout.createSequentialGroup().addContainerGap().addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel6)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jCheckBox1).addContainerGap(9, Short.MAX_VALUE)));
        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 420) / 2, (screenSize.height - 331) / 2, 420, 331);
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
        cancel();
        final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        if (this.jCheckBox1.isSelected() == false) {
            jStockOptions.setRememberGoogleAccountEnabled(false);
            jStockOptions.setGoogleUsername("");
            jStockOptions.setGooglePassword("");
        }
    }

    private void cancel() {
        if (saveToCloudTask != null) {
            saveToCloudTask.cancel(true);
            saveToCloudTask = null;
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
        this.dispose();
    }

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {
        MemoryLogJDialog memoryLogJDialog = new MemoryLogJDialog(MainFrame.getInstance(), true);
        memoryLogJDialog.setLocationRelativeTo(this);
        memoryLogJDialog.setLog(memoryLog);
        memoryLogJDialog.setVisible(true);
    }

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {
        this.setCursor(Cursor.getDefaultCursor());
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.jTextField1.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, MessagesBundle.getString("warning_message_username_cannot_be_empty"), MessagesBundle.getString("warning_title_username_cannot_be_empty"), JOptionPane.WARNING_MESSAGE);
            this.jTextField1.requestFocus();
            return;
        }
        if (false == org.apache.commons.validator.EmailValidator.getInstance().isValid(this.jTextField1.getText().trim())) {
            JOptionPane.showMessageDialog(this, MessagesBundle.getString("warning_message_invalid_email_address"), MessagesBundle.getString("warning_title_invalid_email_address"), JOptionPane.WARNING_MESSAGE);
            this.jTextField1.requestFocus();
            return;
        }
        if (this.jPasswordField1.getPassword().length == 0) {
            JOptionPane.showMessageDialog(this, MessagesBundle.getString("warning_message_password_cannot_be_empty"), MessagesBundle.getString("warning_title_password_cannot_be_empty"), JOptionPane.WARNING_MESSAGE);
            this.jPasswordField1.requestFocus();
            return;
        }
        final String password = new String(jPasswordField1.getPassword()).trim();
        if (password.length() == 0) {
            JOptionPane.showMessageDialog(this, MessagesBundle.getString("warning_message_password_cannot_be_empty"), MessagesBundle.getString("warning_title_password_cannot_be_empty"), JOptionPane.WARNING_MESSAGE);
            this.jPasswordField1.requestFocus();
            return;
        }
        this.jButton1.setEnabled(false);
        this.jTextField1.setEnabled(false);
        this.jPasswordField1.setEnabled(false);
        this.jCheckBox1.setEnabled(false);
        jLabel3.setText(GUIBundle.getString("SaveToCloudJDialog_PreparingData..."));
        jLabel4.setIcon(Icons.BUSY);
        jLabel3.setVisible(true);
        jLabel4.setVisible(true);
        this.saveToCloudTask = this.getSaveToCloudTask();
        this.saveToCloudTask.execute();
    }

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {
        Utils.launchWebBrowser(org.yccheok.jstock.network.Utils.getURL(Type.PRIVACY_HTML));
    }

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {
        this.setCursor(Cursor.getDefaultCursor());
    }

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
    }

    private static class Status {

        public final String message;

        public final Icon icon;

        private Status(String message, Icon icon) {
            if (message == null || icon == null) {
                throw new IllegalArgumentException("Method arguments cannot be null");
            }
            this.message = message;
            this.icon = icon;
        }

        public static Status newInstance(String message, Icon icon) {
            return new Status(message, icon);
        }
    }

    private SwingWorker<Boolean, Status> getSaveToCloudTask() {
        SwingWorker<Boolean, Status> worker = new SwingWorker<Boolean, Status>() {

            @Override
            protected void done() {
                boolean result = false;
                if (this.isCancelled() == false) {
                    try {
                        result = this.get();
                    } catch (InterruptedException ex) {
                        log.error(null, ex);
                    } catch (ExecutionException ex) {
                        log.error(null, ex);
                    } catch (CancellationException ex) {
                        log.error(null, ex);
                    }
                }
                jButton1.setEnabled(true);
                jTextField1.setEnabled(true);
                jPasswordField1.setEnabled(true);
                jCheckBox1.setEnabled(true);
                if (result == true) {
                    JOptionPane.showMessageDialog(SaveToCloudJDialog.this, GUIBundle.getString("SaveToCloudJDialog_Success"));
                    final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
                    if (jCheckBox1.isSelected() == true) {
                        jStockOptions.setRememberGoogleAccountEnabled(true);
                        jStockOptions.setGoogleUsername(Utils.encrypt(jTextField1.getText().trim()));
                        jStockOptions.setGooglePassword(Utils.encrypt(new String(jPasswordField1.getPassword())).trim());
                    }
                    setVisible(false);
                    dispose();
                }
            }

            @Override
            protected void process(java.util.List<Status> statuses) {
                for (Status status : statuses) {
                    writeToMemoryLog(status.message);
                    jLabel3.setText(status.message);
                    jLabel4.setIcon(status.icon);
                    jLabel3.setVisible(true);
                    jLabel4.setVisible(true);
                    if (status.icon == Icons.ERROR || status.icon == Icons.WARNING) {
                        jLabel3.setForeground(Color.RED);
                        jLabel5.setVisible(true);
                    } else {
                        jLabel3.setForeground(Color.BLUE);
                        jLabel5.setVisible(false);
                    }
                }
            }

            @Override
            protected Boolean doInBackground() {
                if (isCancelled()) {
                    return false;
                }
                memoryLog.clear();
                publish(Status.newInstance(GUIBundle.getString("SaveToCloudJDialog_PreparingData..."), Icons.BUSY));
                MainFrame.getInstance().commitBeforeUploadToCloud();
                final File zipFile = getJStockZipFile();
                if (isCancelled()) {
                    return false;
                }
                if (zipFile == null) {
                    publish(Status.newInstance(GUIBundle.getString("SaveToCloudJDialog_PreparingDataFail"), Icons.ERROR));
                    return false;
                }
                publish(Status.newInstance(GUIBundle.getString("SaveToCloudJDialog_VerifyGoogleAccount..."), Icons.BUSY));
                final String username = jTextField1.getText().trim();
                final String password = new String(jPasswordField1.getPassword()).trim();
                if (false == Utils.saveToCloud(username, password, zipFile)) {
                    publish(Status.newInstance(GUIBundle.getString("SaveToCloudJDialog_VerifyGoogleAccountFail"), Icons.ERROR));
                    return false;
                }
                publish(Status.newInstance(GUIBundle.getString("SaveToCloudJDialog_Success"), Icons.OK));
                return true;
            }
        };
        return worker;
    }

    private static class FileEx {

        final File input;

        final String output;

        private FileEx(File input, String output) {
            this.input = input;
            this.output = output;
        }

        public static FileEx newInstance(File input, String output) {
            return new FileEx(input, output);
        }
    }

    private List<FileEx> getFileEx(List<FileEx> fileExs, String name) {
        final File dir = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + name);
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (String child : children) {
                getFileEx(fileExs, name + File.separator + child);
            }
        } else {
            if (name.equalsIgnoreCase("config" + File.separator + "options.xml")) {
            } else {
                fileExs.add(FileEx.newInstance(dir, name));
            }
        }
        return fileExs;
    }

    private File getJStockZipFile() {
        final List<File> files = getUserDefinedDatabaseFiles();
        final List<FileEx> fileExs = new ArrayList<FileEx>();
        for (File file : files) {
            final String filename;
            try {
                filename = file.getCanonicalPath();
            } catch (IOException ex) {
                log.error(null, ex);
                continue;
            }
            final int index = filename.indexOf(Utils.getApplicationVersionString());
            if (index < 0) {
                continue;
            }
            final String output = filename.substring(index + Utils.getApplicationVersionString().length() + File.separator.length());
            fileExs.add(FileEx.newInstance(file, output));
        }
        final JStockOptions jStockOptions = MainFrame.getInstance().getJStockOptions();
        final JStockOptions insensitiveJStockOptions = jStockOptions.insensitiveClone();
        try {
            final File tempJStockOptions = File.createTempFile(Utils.getJStockUUID(), ".xml");
            tempJStockOptions.deleteOnExit();
            org.yccheok.jstock.gui.Utils.toXML(insensitiveJStockOptions, tempJStockOptions);
            fileExs.add(FileEx.newInstance(tempJStockOptions, "config" + File.separator + "options.xml"));
        } catch (IOException ex) {
            log.error(null, ex);
        }
        getFileEx(fileExs, "config");
        getFileEx(fileExs, "indicator");
        getFileEx(fileExs, "logos");
        for (Country country : Country.values()) {
            getFileEx(fileExs, country + File.separator + "portfolios");
            getFileEx(fileExs, country + File.separator + "config");
            getFileEx(fileExs, country + File.separator + "watchlist");
        }
        final byte[] buf = new byte[1024];
        ZipOutputStream out = null;
        File temp = null;
        try {
            temp = File.createTempFile(Utils.getJStockUUID(), ".zip");
            temp.deleteOnExit();
            out = new ZipOutputStream(new FileOutputStream(temp));
            for (FileEx fileEx : fileExs) {
                FileInputStream in = null;
                try {
                    in = new FileInputStream(fileEx.input);
                    final String zipEntryName = fileEx.output;
                    out.putNextEntry(Utils.getZipEntry(zipEntryName));
                    int len;
                    while ((len = in.read(buf)) > 0) {
                        out.write(buf, 0, len);
                    }
                } catch (IOException exp) {
                    log.error(null, exp);
                    continue;
                } finally {
                    Utils.closeEntry(out);
                    Utils.close(in);
                }
            }
        } catch (IOException exp) {
            log.error(null, exp);
        } finally {
            Utils.close(out);
        }
        return temp;
    }

    private List<File> getUserDefinedDatabaseFiles() {
        final List<File> files = new ArrayList<File>();
        for (Country country : Country.values()) {
            final File file = new File(org.yccheok.jstock.gui.Utils.getUserDataDirectory() + country + File.separator + "database" + File.separator + "user-defined-database.xml");
            if (file.exists()) {
                files.add(file);
            }
        }
        return files;
    }

    private void writeToMemoryLog(String message) {
        final DateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy hh:mm:ss a");
        final String s = dateFormat.format(new Date()) + "\n" + message;
        this.memoryLog.add(s);
    }

    private volatile SwingWorker<Boolean, Status> saveToCloudTask = null;

    private final List<String> memoryLog = new ArrayList<String>();

    private static final Log log = LogFactory.getLog(LoadFromCloudJDialog.class);

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton2;

    private javax.swing.JCheckBox jCheckBox1;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel6;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JPanel jPanel5;

    private javax.swing.JPanel jPanel6;

    private javax.swing.JPasswordField jPasswordField1;

    private javax.swing.JTextField jTextField1;

    private org.jdesktop.swingx.JXHeader jXHeader1;
}
