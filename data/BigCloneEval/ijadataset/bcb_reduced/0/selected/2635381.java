package resourcemanager;

import java.awt.Desktop;
import java.io.File;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerModel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.SingleFrameApplication;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

/**
 * The application's main frame.
 */
public class ResourceManagerView extends FrameView {

    public ResourceManagerView(SingleFrameApplication app) {
        super(app);
        initComponents();
        this.getFrame().setResizable(false);
        File fileXML = new File("conf" + File.separator + "RMSystem.conf");
        SAXBuilder builder = new SAXBuilder(false);
        try {
            Document docXML = builder.build(fileXML);
            Element root = docXML.getRootElement();
            List list = root.getChildren("imagesName");
            Iterator l = list.iterator();
            while (l.hasNext()) {
                Element element = (Element) l.next();
                G.imagesName = element.getText();
            }
            list = root.getChildren("databaseName");
            l = list.iterator();
            while (l.hasNext()) {
                Element element = (Element) l.next();
                G.databaseName = element.getText();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        importDBButton = new javax.swing.JButton();
        exportDBButton = new javax.swing.JButton();
        addImageButton = new javax.swing.JButton();
        deleteImageButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        importDBDialog = new javax.swing.JDialog();
        importDBDialogInputButton = new javax.swing.JButton();
        importDBDialogOutputButton = new javax.swing.JButton();
        importDBDialogInputLabel = new javax.swing.JLabel();
        importDBDialogProgressBar = new javax.swing.JProgressBar();
        importDBDialogInputButtonProgressBarLabel = new javax.swing.JLabel();
        importDBOKButton = new javax.swing.JButton();
        importDBCancelButton = new javax.swing.JButton();
        importDBDialogOutputLabel = new javax.swing.JLabel();
        exportDBDialog = new javax.swing.JDialog();
        exportDBDialogInputButton = new javax.swing.JButton();
        exportDBDialogOutputButton = new javax.swing.JButton();
        exportDBDialogInputLabel = new javax.swing.JLabel();
        exportDBDialogProgressBar = new javax.swing.JProgressBar();
        exportDBDialogInputButtonProgressBarLabel = new javax.swing.JLabel();
        exportDBOKButton = new javax.swing.JButton();
        exportDBCancelButton = new javax.swing.JButton();
        exportDBDialogOutputLabel = new javax.swing.JLabel();
        addImageDialog = new javax.swing.JDialog();
        addImageDBDialogInputButtonPictogramToAdd = new javax.swing.JButton();
        addImageDBDialogInputLabelPictogramToAdd = new javax.swing.JLabel();
        addImageDBDialogLanguageLabel = new javax.swing.JLabel();
        addImageDBDialogLanguageSpinner = new javax.swing.JSpinner();
        addImageDBDialogKeyWordsLabel = new javax.swing.JLabel();
        addImageDBDialogKeyWordsTextField = new javax.swing.JTextField();
        addImageDBDialogOKButton = new javax.swing.JButton();
        addImageDBDialogCancelButton = new javax.swing.JButton();
        addImageDBDialogInputButtonPictograms = new javax.swing.JButton();
        addImageDBDialogInputLabelPictograms = new javax.swing.JLabel();
        addImageDBDialogTypeLabel = new javax.swing.JLabel();
        addImageDBDialogTypeSpinner = new javax.swing.JSpinner();
        deleteImageDialog = new javax.swing.JDialog();
        deleteImageDBDialogKeyWordsLabel = new javax.swing.JLabel();
        deleteImageDBDialogKeyWordsTextField = new javax.swing.JTextField();
        deleteImageDBDialogOKButton = new javax.swing.JButton();
        deleteImageDBDialogCancelButton = new javax.swing.JButton();
        deleteImageDBDialogPictogramsButton = new javax.swing.JButton();
        deleteImageDBDialogPictogramsLabel = new javax.swing.JLabel();
        deleteImageDBDialogSearchButton = new javax.swing.JButton();
        deleteImageDBScrollPane = new javax.swing.JScrollPane();
        deleteImageDBTable = new javax.swing.JTable();
        deleteImageDBDialogShowImageButton = new javax.swing.JButton();
        mainPanel.setName("mainPanel");
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(resourcemanager.ResourceManagerApp.class).getContext().getResourceMap(ResourceManagerView.class);
        importDBButton.setText(resourceMap.getString("importDBButton.text"));
        importDBButton.setName("importDBButton");
        importDBButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDBButtonActionPerformed(evt);
            }
        });
        exportDBButton.setText(resourceMap.getString("exportDBButton.text"));
        exportDBButton.setName("exportDBButton");
        exportDBButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBButtonActionPerformed(evt);
            }
        });
        addImageButton.setText(resourceMap.getString("addImageButton.text"));
        addImageButton.setName("addImageButton");
        addImageButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });
        deleteImageButton.setText(resourceMap.getString("deleteImageButton.text"));
        deleteImageButton.setName("deleteImageButton");
        deleteImageButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageButtonActionPerformed(evt);
            }
        });
        exitButton.setText(resourceMap.getString("exitButton.text"));
        exitButton.setName("exitButton");
        exitButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup().addContainerGap().addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(addImageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE).addComponent(exportDBButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE).addComponent(importDBButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE).addComponent(deleteImageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE).addComponent(exitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)).addContainerGap()));
        mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(mainPanelLayout.createSequentialGroup().addContainerGap().addComponent(importDBButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exportDBButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(deleteImageButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exitButton).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        importDBDialog.setTitle(resourceMap.getString("importDBDialog.title"));
        importDBDialog.setModal(true);
        importDBDialog.setName("importDBDialog");
        importDBDialog.setResizable(false);
        importDBDialogInputButton.setText(resourceMap.getString("importDBDialogInputButton.text"));
        importDBDialogInputButton.setName("importDBDialogInputButton");
        importDBDialogInputButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDBDialogInputButtonActionPerformed(evt);
            }
        });
        importDBDialogOutputButton.setText(resourceMap.getString("importDBDialogOutputButton.text"));
        importDBDialogOutputButton.setName("importDBDialogOutputButton");
        importDBDialogOutputButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDBDialogOutputButtonActionPerformed(evt);
            }
        });
        importDBDialogInputLabel.setText(resourceMap.getString("importDBDialogInputLabel.text"));
        importDBDialogInputLabel.setName("importDBDialogInputLabel");
        importDBDialogProgressBar.setName("importDBDialogProgressBar");
        importDBDialogInputButtonProgressBarLabel.setText(resourceMap.getString("importDBDialogInputButtonProgressBarLabel.text"));
        importDBDialogInputButtonProgressBarLabel.setName("importDBDialogInputButtonProgressBarLabel");
        importDBOKButton.setText(resourceMap.getString("importDBOKButton.text"));
        importDBOKButton.setName("importDBOKButton");
        importDBOKButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDBOKButtonActionPerformed(evt);
            }
        });
        importDBCancelButton.setText(resourceMap.getString("importDBCancelButton.text"));
        importDBCancelButton.setName("importDBCancelButton");
        importDBCancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDBCancelButtonActionPerformed(evt);
            }
        });
        importDBDialogOutputLabel.setText(resourceMap.getString("importDBDialogOutputLabel.text"));
        importDBDialogOutputLabel.setName("importDBDialogOutputLabel");
        javax.swing.GroupLayout importDBDialogLayout = new javax.swing.GroupLayout(importDBDialog.getContentPane());
        importDBDialog.getContentPane().setLayout(importDBDialogLayout);
        importDBDialogLayout.setHorizontalGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(importDBDialogLayout.createSequentialGroup().addContainerGap().addGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(importDBDialogLayout.createSequentialGroup().addComponent(importDBDialogInputLabel).addContainerGap(191, Short.MAX_VALUE)).addGroup(importDBDialogLayout.createSequentialGroup().addComponent(importDBDialogOutputLabel).addContainerGap(191, Short.MAX_VALUE)).addGroup(importDBDialogLayout.createSequentialGroup().addGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(importDBDialogOutputButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE).addComponent(importDBDialogInputButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)).addContainerGap()).addGroup(importDBDialogLayout.createSequentialGroup().addGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addGroup(javax.swing.GroupLayout.Alignment.LEADING, importDBDialogLayout.createSequentialGroup().addComponent(importDBOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(importDBCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, importDBDialogLayout.createSequentialGroup().addComponent(importDBDialogInputButtonProgressBarLabel).addGap(18, 18, 18).addComponent(importDBDialogProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap(12, Short.MAX_VALUE)))));
        importDBDialogLayout.setVerticalGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(importDBDialogLayout.createSequentialGroup().addGap(17, 17, 17).addComponent(importDBDialogInputButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(importDBDialogInputLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(importDBDialogOutputButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(importDBDialogOutputLabel).addGap(18, 18, 18).addGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(importDBDialogInputButtonProgressBarLabel).addComponent(importDBDialogProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(importDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(importDBOKButton).addComponent(importDBCancelButton)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        exportDBDialog.setTitle(resourceMap.getString("exportDBDialog.title"));
        exportDBDialog.setModal(true);
        exportDBDialog.setName("exportDBDialog");
        exportDBDialog.setResizable(false);
        exportDBDialogInputButton.setText(resourceMap.getString("exportDBDialogInputButton.text"));
        exportDBDialogInputButton.setName("exportDBDialogInputButton");
        exportDBDialogInputButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBDialogInputButtonActionPerformed(evt);
            }
        });
        exportDBDialogOutputButton.setText(resourceMap.getString("exportDBDialogOutputButton.text"));
        exportDBDialogOutputButton.setName("exportDBDialogOutputButton");
        exportDBDialogOutputButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBDialogOutputButtonActionPerformed(evt);
            }
        });
        exportDBDialogInputLabel.setText(resourceMap.getString("exportDBDialogInputLabel.text"));
        exportDBDialogInputLabel.setName("exportDBDialogInputLabel");
        exportDBDialogProgressBar.setName("exportDBDialogProgressBar");
        exportDBDialogInputButtonProgressBarLabel.setText(resourceMap.getString("exportDBDialogInputButtonProgressBarLabel.text"));
        exportDBDialogInputButtonProgressBarLabel.setName("exportDBDialogInputButtonProgressBarLabel");
        exportDBOKButton.setText(resourceMap.getString("exportDBOKButton.text"));
        exportDBOKButton.setName("exportDBOKButton");
        exportDBOKButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBOKButtonActionPerformed(evt);
            }
        });
        exportDBCancelButton.setText(resourceMap.getString("exportDBCancelButton.text"));
        exportDBCancelButton.setName("exportDBCancelButton");
        exportDBCancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBCancelButtonActionPerformed(evt);
            }
        });
        exportDBDialogOutputLabel.setText(resourceMap.getString("exportDBDialogOutputLabel.text"));
        exportDBDialogOutputLabel.setName("exportDBDialogOutputLabel");
        javax.swing.GroupLayout exportDBDialogLayout = new javax.swing.GroupLayout(exportDBDialog.getContentPane());
        exportDBDialog.getContentPane().setLayout(exportDBDialogLayout);
        exportDBDialogLayout.setHorizontalGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(exportDBDialogLayout.createSequentialGroup().addContainerGap().addGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(exportDBDialogLayout.createSequentialGroup().addComponent(exportDBDialogInputLabel).addContainerGap(191, Short.MAX_VALUE)).addGroup(exportDBDialogLayout.createSequentialGroup().addComponent(exportDBDialogOutputLabel).addContainerGap(191, Short.MAX_VALUE)).addGroup(exportDBDialogLayout.createSequentialGroup().addGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(exportDBDialogOutputButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE).addComponent(exportDBDialogInputButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)).addContainerGap()).addGroup(exportDBDialogLayout.createSequentialGroup().addGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addGroup(javax.swing.GroupLayout.Alignment.LEADING, exportDBDialogLayout.createSequentialGroup().addComponent(exportDBOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(exportDBCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, exportDBDialogLayout.createSequentialGroup().addComponent(exportDBDialogInputButtonProgressBarLabel).addGap(18, 18, 18).addComponent(exportDBDialogProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap(12, Short.MAX_VALUE)))));
        exportDBDialogLayout.setVerticalGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(exportDBDialogLayout.createSequentialGroup().addGap(17, 17, 17).addComponent(exportDBDialogInputButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exportDBDialogInputLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exportDBDialogOutputButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exportDBDialogOutputLabel).addGap(18, 18, 18).addGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(exportDBDialogInputButtonProgressBarLabel).addComponent(exportDBDialogProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(exportDBDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(exportDBOKButton).addComponent(exportDBCancelButton)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        addImageDialog.setTitle(resourceMap.getString("addImageDialog.title"));
        addImageDialog.setModal(true);
        addImageDialog.setName("addImageDialog");
        addImageDialog.setResizable(false);
        addImageDBDialogInputButtonPictogramToAdd.setText(resourceMap.getString("addImageDBDialogInputButtonPictogramToAdd.text"));
        addImageDBDialogInputButtonPictogramToAdd.setName("addImageDBDialogInputButtonPictogramToAdd");
        addImageDBDialogInputButtonPictogramToAdd.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageDBDialogInputButtonPictogramToAddActionPerformed(evt);
            }
        });
        addImageDBDialogInputLabelPictogramToAdd.setText(resourceMap.getString("addImageDBDialogInputLabelPictogramToAdd.text"));
        addImageDBDialogInputLabelPictogramToAdd.setName("addImageDBDialogInputLabelPictogramToAdd");
        addImageDBDialogLanguageLabel.setText(resourceMap.getString("addImageDBDialogLanguageLabel.text"));
        addImageDBDialogLanguageLabel.setName("addImageDBDialogLanguageLabel");
        addImageDBDialogLanguageSpinner.setName("addImageDBDialogLanguageSpinner");
        addImageDBDialogKeyWordsLabel.setText(resourceMap.getString("addImageDBDialogKeyWordsLabel.text"));
        addImageDBDialogKeyWordsLabel.setName("addImageDBDialogKeyWordsLabel");
        addImageDBDialogKeyWordsTextField.setText(resourceMap.getString("addImageDBDialogKeyWordsTextField.text"));
        addImageDBDialogKeyWordsTextField.setName("addImageDBDialogKeyWordsTextField");
        addImageDBDialogOKButton.setText(resourceMap.getString("addImageDBDialogOKButton.text"));
        addImageDBDialogOKButton.setName("addImageDBDialogOKButton");
        addImageDBDialogOKButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageDBDialogOKButtonActionPerformed(evt);
            }
        });
        addImageDBDialogCancelButton.setText(resourceMap.getString("addImageDBDialogCancelButton.text"));
        addImageDBDialogCancelButton.setName("addImageDBDialogCancelButton");
        addImageDBDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageDBDialogCancelButtonActionPerformed(evt);
            }
        });
        addImageDBDialogInputButtonPictograms.setText(resourceMap.getString("addImageDBDialogInputButtonPictograms.text"));
        addImageDBDialogInputButtonPictograms.setName("addImageDBDialogInputButtonPictograms");
        addImageDBDialogInputButtonPictograms.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageDBDialogInputButtonPictogramsActionPerformed(evt);
            }
        });
        addImageDBDialogInputLabelPictograms.setText(resourceMap.getString("addImageDBDialogInputLabelPictograms.text"));
        addImageDBDialogInputLabelPictograms.setName("addImageDBDialogInputLabelPictograms");
        addImageDBDialogTypeLabel.setText(resourceMap.getString("addImageDBDialogTypeLabel.text"));
        addImageDBDialogTypeLabel.setName("addImageDBDialogTypeLabel");
        addImageDBDialogTypeSpinner.setName("addImageDBDialogTypeSpinner");
        javax.swing.GroupLayout addImageDialogLayout = new javax.swing.GroupLayout(addImageDialog.getContentPane());
        addImageDialog.getContentPane().setLayout(addImageDialogLayout);
        addImageDialogLayout.setHorizontalGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(addImageDialogLayout.createSequentialGroup().addContainerGap().addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addGroup(addImageDialogLayout.createSequentialGroup().addComponent(addImageDBDialogOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addImageDBDialogCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(addImageDBDialogKeyWordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addImageDBDialogKeyWordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(addImageDBDialogInputLabelPictogramToAdd).addComponent(addImageDBDialogInputLabelPictograms).addGroup(addImageDialogLayout.createSequentialGroup().addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(addImageDBDialogInputButtonPictograms, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addImageDBDialogInputButtonPictogramToAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, addImageDialogLayout.createSequentialGroup().addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(addImageDBDialogLanguageLabel).addComponent(addImageDBDialogTypeLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(addImageDBDialogTypeSpinner).addComponent(addImageDBDialogLanguageSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))).addContainerGap()));
        addImageDialogLayout.setVerticalGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addImageDialogLayout.createSequentialGroup().addContainerGap().addComponent(addImageDBDialogInputButtonPictograms).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageDBDialogInputLabelPictograms).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageDBDialogInputButtonPictogramToAdd).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageDBDialogInputLabelPictogramToAdd).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addImageDBDialogLanguageLabel).addComponent(addImageDBDialogLanguageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addImageDBDialogTypeLabel).addComponent(addImageDBDialogTypeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageDBDialogKeyWordsLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(addImageDBDialogKeyWordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(addImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(addImageDBDialogOKButton).addComponent(addImageDBDialogCancelButton)).addContainerGap()));
        deleteImageDialog.setTitle(resourceMap.getString("deleteImageDialog.title"));
        deleteImageDialog.setModal(true);
        deleteImageDialog.setName("deleteImageDialog");
        deleteImageDialog.setResizable(false);
        deleteImageDBDialogKeyWordsLabel.setText(resourceMap.getString("deleteImageDBDialogKeyWordsLabel.text"));
        deleteImageDBDialogKeyWordsLabel.setName("deleteImageDBDialogKeyWordsLabel");
        deleteImageDBDialogKeyWordsTextField.setName("deleteImageDBDialogKeyWordsTextField");
        deleteImageDBDialogOKButton.setText(resourceMap.getString("deleteImageDBDialogOKButton.text"));
        deleteImageDBDialogOKButton.setName("deleteImageDBDialogOKButton");
        deleteImageDBDialogOKButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageDBDialogOKButtonActionPerformed(evt);
            }
        });
        deleteImageDBDialogCancelButton.setText(resourceMap.getString("deleteImageDBDialogCancelButton.text"));
        deleteImageDBDialogCancelButton.setName("deleteImageDBDialogCancelButton");
        deleteImageDBDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageDBDialogCancelButtonActionPerformed(evt);
            }
        });
        deleteImageDBDialogPictogramsButton.setText(resourceMap.getString("deleteImageDBDialogPictogramsButton.text"));
        deleteImageDBDialogPictogramsButton.setName("deleteImageDBDialogPictogramsButton");
        deleteImageDBDialogPictogramsButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageDBDialogPictogramsButtonActionPerformed(evt);
            }
        });
        deleteImageDBDialogPictogramsLabel.setText(resourceMap.getString("deleteImageDBDialogPictogramsLabel.text"));
        deleteImageDBDialogPictogramsLabel.setName("deleteImageDBDialogPictogramsLabel");
        deleteImageDBDialogSearchButton.setText(resourceMap.getString("deleteImageDBDialogSearchButton.text"));
        deleteImageDBDialogSearchButton.setName("deleteImageDBDialogSearchButton");
        deleteImageDBDialogSearchButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageDBDialogSearchButtonActionPerformed(evt);
            }
        });
        deleteImageDBScrollPane.setName("deleteImageDBScrollPane");
        deleteImageDBTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null }, { null, null, null, null, null } }, new String[] { "Palabra", "Lenguaje", "Tipo", "Nombre", "Nombre NN" }) {

            boolean[] canEdit = new boolean[] { false, false, false, false, true };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        deleteImageDBTable.setName("deleteImageDBTable");
        deleteImageDBTable.getTableHeader().setReorderingAllowed(false);
        deleteImageDBScrollPane.setViewportView(deleteImageDBTable);
        deleteImageDBTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("deleteImageDBTable.columnModel.title0"));
        deleteImageDBTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("deleteImageDBTable.columnModel.title1"));
        deleteImageDBTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("deleteImageDBTable.columnModel.title2"));
        deleteImageDBTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("deleteImageDBTable.columnModel.title3"));
        deleteImageDBTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("deleteImageDBTable.columnModel.title4"));
        deleteImageDBDialogShowImageButton.setText(resourceMap.getString("deleteImageDBDialogShowImageButton.text"));
        deleteImageDBDialogShowImageButton.setName("deleteImageDBDialogShowImageButton");
        deleteImageDBDialogShowImageButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageDBDialogShowImageButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout deleteImageDialogLayout = new javax.swing.GroupLayout(deleteImageDialog.getContentPane());
        deleteImageDialog.getContentPane().setLayout(deleteImageDialogLayout);
        deleteImageDialogLayout.setHorizontalGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(deleteImageDialogLayout.createSequentialGroup().addContainerGap().addGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteImageDialogLayout.createSequentialGroup().addComponent(deleteImageDBDialogKeyWordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(deleteImageDBDialogKeyWordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(25, 25, 25).addComponent(deleteImageDBDialogSearchButton)).addGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(deleteImageDBScrollPane, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING, deleteImageDialogLayout.createSequentialGroup().addComponent(deleteImageDBDialogOKButton).addGap(44, 44, 44).addComponent(deleteImageDBDialogShowImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(57, 57, 57).addComponent(deleteImageDBDialogCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(javax.swing.GroupLayout.Alignment.LEADING, deleteImageDialogLayout.createSequentialGroup().addComponent(deleteImageDBDialogPictogramsButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(deleteImageDBDialogPictogramsLabel)))).addContainerGap()));
        deleteImageDialogLayout.setVerticalGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteImageDialogLayout.createSequentialGroup().addContainerGap().addGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(deleteImageDBDialogPictogramsButton).addComponent(deleteImageDBDialogPictogramsLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(deleteImageDBDialogKeyWordsLabel).addComponent(deleteImageDBDialogKeyWordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(deleteImageDBDialogSearchButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(deleteImageDBScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(deleteImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(deleteImageDBDialogOKButton).addComponent(deleteImageDBDialogCancelButton).addComponent(deleteImageDBDialogShowImageButton)).addContainerGap()));
        setComponent(mainPanel);
    }

    private void importDBButtonActionPerformed(java.awt.event.ActionEvent evt) {
        importDBDialog.pack();
        importDBDialog.setLocationRelativeTo(null);
        importDBDialogInputLabel.setText("(no elegida)");
        importDBDialogOutputLabel.setText("(no elegida)");
        importDBDialog.setVisible(true);
    }

    private void exportDBButtonActionPerformed(java.awt.event.ActionEvent evt) {
        exportDBDialog.pack();
        exportDBDialog.setLocationRelativeTo(null);
        exportDBDialogInputLabel.setText("(no elegida)");
        exportDBDialogOutputLabel.setText("(no elegida)");
        exportDBDialog.setVisible(true);
    }

    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        addImageDialog.pack();
        addImageDialog.setLocationRelativeTo(null);
        addImageDBDialogInputButtonPictogramToAdd.setEnabled(false);
        addImageDBDialogKeyWordsTextField.setEnabled(false);
        addImageDBDialogLanguageSpinner.setEnabled(false);
        addImageDBDialogTypeSpinner.setEnabled(false);
        addImageDBDialogOKButton.setEnabled(false);
        addImageDBDialogInputLabelPictogramToAdd.setText("(no elegida)");
        addImageDBDialogInputLabelPictograms.setText("(no elegida)");
        addImageDialog.setVisible(true);
    }

    private void deleteImageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        deleteImageDialog.pack();
        deleteImageDialog.setLocationRelativeTo(null);
        deleteImageDBDialogSearchButton.setEnabled(false);
        deleteImageDBDialogShowImageButton.setEnabled(false);
        deleteImageDBDialogOKButton.setEnabled(false);
        DefaultTableModel model = new DefaultTableModel();
        deleteImageDBTable.setModel(model);
        model.addColumn("Palabra");
        model.addColumn("Lenguaje");
        model.addColumn("Tipo");
        model.addColumn("Nombre");
        model.addColumn("Nombre NN");
        deleteImageDBTable.setEnabled(false);
        deleteImageDBTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ((DefaultTableModel) deleteImageDBTable.getModel()).setRowCount(0);
        deleteImageDBDialogPictogramsLabel.setText("(no elegida)");
        deleteImageDialog.setVisible(true);
    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void importDBOKButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (G.importDBDialogInputPath.equals("") || G.importDBDialogOutputPath.equals("")) {
            JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar directorio de entrada y de salida", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            MenuActions.importDB(G.importDBDialogInputPath, G.importDBDialogOutputPath);
            JOptionPane.showMessageDialog(getFrame(), "Importación lograda con éxito!!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            importDBDialog.setVisible(false);
        }
    }

    private void importDBCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        importDBDialog.setVisible(false);
    }

    private void importDBDialogInputButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.importDBDialogInputPath = RelativePath.getRelativePath(new File("."), file);
                importDBDialogInputLabel.setText(G.importDBDialogInputPath);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void importDBDialogOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.importDBDialogOutputPath = RelativePath.getRelativePath(new File("."), file);
                importDBDialogOutputLabel.setText(G.importDBDialogOutputPath);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void exportDBDialogInputButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.exportDBDialogInputPath = RelativePath.getRelativePath(new File("."), file);
                exportDBDialogInputLabel.setText(G.exportDBDialogInputPath);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void exportDBDialogOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.exportDBDialogOutputPath = RelativePath.getRelativePath(new File("."), file);
                exportDBDialogOutputLabel.setText(G.exportDBDialogOutputPath);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void exportDBOKButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (G.exportDBDialogInputPath.equals("") || G.exportDBDialogOutputPath.equals("")) {
            JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar directorio de entrada y de salida", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            MenuActions.exportDB(G.exportDBDialogInputPath, G.exportDBDialogOutputPath);
            JOptionPane.showMessageDialog(getFrame(), "Exportación lograda con éxito!!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            exportDBDialog.setVisible(false);
        }
    }

    private void exportDBCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        exportDBDialog.setVisible(false);
    }

    private void addImageDBDialogInputButtonPictogramToAddActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.addImagesToDBDialogInputPictogramToAddPath = RelativePath.getRelativePath(new File("."), new File(file.getCanonicalPath()));
                if (G.addImagesToDBDialogInputPictogramToAddPath.length() > 30) addImageDBDialogInputLabelPictogramToAdd.setText(G.addImagesToDBDialogInputPictogramToAddPath.substring(0, 30) + "..."); else addImageDBDialogInputLabelPictogramToAdd.setText(G.addImagesToDBDialogInputPictogramToAddPath);
                Statement stat = G.conn.createStatement();
                ResultSet rs = stat.executeQuery("select name from language order by name");
                int i = 0;
                while (rs.next()) {
                    i++;
                }
                int cont = i;
                i = 0;
                rs = stat.executeQuery("select name from language order by name");
                G.documentLanguages = new String[cont];
                while (rs.next()) {
                    G.documentLanguages[i] = rs.getString("name");
                    i++;
                }
                stat.close();
                stat = G.conn.createStatement();
                rs = stat.executeQuery("select name from type order by name");
                i = 0;
                while (rs.next()) {
                    i++;
                }
                cont = i;
                i = 0;
                rs = stat.executeQuery("select name from type order by name");
                G.types = new String[cont];
                while (rs.next()) {
                    G.types[i] = rs.getString("name");
                    i++;
                }
                stat.close();
                SpinnerModel model = new SpinnerListModel(G.documentLanguages);
                addImageDBDialogLanguageSpinner.setModel(model);
                SpinnerModel model2 = new SpinnerListModel(G.types);
                addImageDBDialogTypeSpinner.setModel(model2);
                addImageDBDialogKeyWordsTextField.setEnabled(true);
                addImageDBDialogLanguageSpinner.setEnabled(true);
                addImageDBDialogTypeSpinner.setEnabled(true);
                addImageDBDialogOKButton.setEnabled(true);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void addImageDBDialogOKButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (G.addImagesToDBDialogInputPictogramsPath.equals("") || G.addImagesToDBDialogInputPictogramToAddPath.equals("")) {
            JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar directorio de pictogramas e imagen a agregar", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String language = ((String) addImageDBDialogLanguageSpinner.getValue());
            String type = ((String) addImageDBDialogTypeSpinner.getValue());
            String word = addImageDBDialogKeyWordsTextField.getText();
            MenuActions.addImageDB(G.addImagesToDBDialogInputPictogramsPath, G.addImagesToDBDialogInputPictogramToAddPath, language, type, word);
            JOptionPane.showMessageDialog(getFrame(), "Imagen agregada con éxito!!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            addImageDialog.setVisible(false);
        }
    }

    private void addImageDBDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        addImageDialog.setVisible(false);
    }

    private void addImageDBDialogInputButtonPictogramsActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.addImagesToDBDialogInputPictogramsPath = RelativePath.getRelativePath(new File("."), file);
                if (G.addImagesToDBDialogInputPictogramsPath.length() > 30) addImageDBDialogInputLabelPictograms.setText(G.addImagesToDBDialogInputPictogramsPath.substring(0, 30) + "..."); else addImageDBDialogInputLabelPictograms.setText(G.addImagesToDBDialogInputPictogramsPath);
                Class.forName("org.sqlite.JDBC");
                String fileName = G.addImagesToDBDialogInputPictogramsPath + File.separator + G.databaseName;
                File dataBase = new File(fileName);
                if (!dataBase.exists()) {
                    JOptionPane.showMessageDialog(null, "No se encuentra el fichero DB", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    G.conn = DriverManager.getConnection("jdbc:sqlite:" + fileName);
                    addImageDBDialogInputButtonPictogramToAdd.setEnabled(true);
                }
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void deleteImageDBDialogOKButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if ((G.deleteImagesFromDBDialogInputPictogramsPath.equals("")) || (deleteImageDBTable.getSelectedRow() == -1)) {
                JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar directorio de pictogramas e imagen a eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int row = deleteImageDBTable.getSelectedRow();
                String word = (String) deleteImageDBTable.getValueAt(row, 0);
                int idL = G.getKeyFromValue(G.languageHM, (String) deleteImageDBTable.getValueAt(row, 1));
                int idT = G.getKeyFromValue(G.typeHM, (String) deleteImageDBTable.getValueAt(row, 2));
                String name = (String) deleteImageDBTable.getValueAt(row, 3);
                Statement stat = G.conn.createStatement();
                stat.execute("delete from main where word = \"" + word + "\" and idL = " + idL + " and idT = " + idT + " and name = \"" + name + "\"");
                JOptionPane.showMessageDialog(getFrame(), "Imagen eliminada con éxito!!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                File f = new File(G.deleteImagesFromDBDialogInputPictogramsPath + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name);
                f.delete();
                deleteImageDialog.setVisible(false);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void deleteImageDBDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        deleteImageDialog.setVisible(false);
    }

    private void deleteImageDBDialogPictogramsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser fc = new JFileChooser(".");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                G.deleteImagesFromDBDialogInputPictogramsPath = RelativePath.getRelativePath(new File("."), file);
                if (G.deleteImagesFromDBDialogInputPictogramsPath.length() > 30) deleteImageDBDialogPictogramsLabel.setText(G.deleteImagesFromDBDialogInputPictogramsPath.substring(0, 30) + "..."); else deleteImageDBDialogPictogramsLabel.setText(G.deleteImagesFromDBDialogInputPictogramsPath);
                Class.forName("org.sqlite.JDBC");
                String fileName = G.deleteImagesFromDBDialogInputPictogramsPath + File.separator + G.databaseName;
                File dataBase = new File(fileName);
                if (!dataBase.exists()) {
                    JOptionPane.showMessageDialog(null, "No se encuentra el fichero DB", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    G.conn = DriverManager.getConnection("jdbc:sqlite:" + fileName);
                    deleteImageDBDialogSearchButton.setEnabled(true);
                    Statement stat = G.conn.createStatement();
                    ResultSet rs = stat.executeQuery("select * from language order by name");
                    while (rs.next()) G.languageHM.put(rs.getInt("id"), rs.getString("name"));
                    ResultSet rs2 = stat.executeQuery("select * from type order by name");
                    while (rs2.next()) G.typeHM.put(rs2.getInt("id"), rs2.getString("name"));
                    rs.close();
                    rs2.close();
                    stat.close();
                }
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void deleteImageDBDialogSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (G.deleteImagesFromDBDialogInputPictogramsPath.equals("")) {
                JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar directorio de pictogramas e imagen a agregar", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                ((DefaultTableModel) deleteImageDBTable.getModel()).setRowCount(0);
                Statement stat = G.conn.createStatement();
                ResultSet rs = stat.executeQuery("select * from main where word like \"" + deleteImageDBDialogKeyWordsTextField.getText().replaceAll("[*]", "%") + "\"");
                while (rs.next()) {
                    ((DefaultTableModel) deleteImageDBTable.getModel()).addRow(new Object[] { rs.getString("word"), G.languageHM.get(rs.getInt("idL")), G.typeHM.get(rs.getInt("idT")), rs.getString("name"), rs.getString("nameNN") });
                }
                stat.close();
                deleteImageDBTable.setEnabled(true);
                deleteImageDBDialogOKButton.setEnabled(true);
                deleteImageDBDialogShowImageButton.setEnabled(true);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private void deleteImageDBDialogShowImageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (deleteImageDBTable.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(getFrame(), "Debe seleccionar imagen a mostrar", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int row = deleteImageDBTable.getSelectedRow();
                String name = (String) deleteImageDBTable.getValueAt(row, 4);
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        String whereIsImage = new File(G.deleteImagesFromDBDialogInputPictogramsPath + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name).getCanonicalPath();
                        desktop.open(new File(whereIsImage));
                    } catch (Exception exc) {
                        System.out.println(exc);
                    }
                } else {
                    JOptionPane.showMessageDialog(getFrame(), "Imposible mostrar imagen, error interno", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
    }

    private javax.swing.JButton addImageButton;

    private javax.swing.JButton addImageDBDialogCancelButton;

    private javax.swing.JButton addImageDBDialogInputButtonPictogramToAdd;

    private javax.swing.JButton addImageDBDialogInputButtonPictograms;

    private javax.swing.JLabel addImageDBDialogInputLabelPictogramToAdd;

    private javax.swing.JLabel addImageDBDialogInputLabelPictograms;

    private javax.swing.JLabel addImageDBDialogKeyWordsLabel;

    private javax.swing.JTextField addImageDBDialogKeyWordsTextField;

    private javax.swing.JLabel addImageDBDialogLanguageLabel;

    private javax.swing.JSpinner addImageDBDialogLanguageSpinner;

    private javax.swing.JButton addImageDBDialogOKButton;

    private javax.swing.JLabel addImageDBDialogTypeLabel;

    private javax.swing.JSpinner addImageDBDialogTypeSpinner;

    private javax.swing.JDialog addImageDialog;

    private javax.swing.JButton deleteImageButton;

    private javax.swing.JButton deleteImageDBDialogCancelButton;

    private javax.swing.JLabel deleteImageDBDialogKeyWordsLabel;

    private javax.swing.JTextField deleteImageDBDialogKeyWordsTextField;

    private javax.swing.JButton deleteImageDBDialogOKButton;

    private javax.swing.JButton deleteImageDBDialogPictogramsButton;

    private javax.swing.JLabel deleteImageDBDialogPictogramsLabel;

    private javax.swing.JButton deleteImageDBDialogSearchButton;

    private javax.swing.JButton deleteImageDBDialogShowImageButton;

    private javax.swing.JScrollPane deleteImageDBScrollPane;

    private javax.swing.JTable deleteImageDBTable;

    private javax.swing.JDialog deleteImageDialog;

    private javax.swing.JButton exitButton;

    private javax.swing.JButton exportDBButton;

    private javax.swing.JButton exportDBCancelButton;

    private javax.swing.JDialog exportDBDialog;

    private javax.swing.JButton exportDBDialogInputButton;

    private javax.swing.JLabel exportDBDialogInputButtonProgressBarLabel;

    private javax.swing.JLabel exportDBDialogInputLabel;

    private javax.swing.JButton exportDBDialogOutputButton;

    private javax.swing.JLabel exportDBDialogOutputLabel;

    private javax.swing.JProgressBar exportDBDialogProgressBar;

    private javax.swing.JButton exportDBOKButton;

    private javax.swing.JButton importDBButton;

    private javax.swing.JButton importDBCancelButton;

    private javax.swing.JDialog importDBDialog;

    private javax.swing.JButton importDBDialogInputButton;

    private javax.swing.JLabel importDBDialogInputButtonProgressBarLabel;

    private javax.swing.JLabel importDBDialogInputLabel;

    private javax.swing.JButton importDBDialogOutputButton;

    private javax.swing.JLabel importDBDialogOutputLabel;

    private javax.swing.JProgressBar importDBDialogProgressBar;

    private javax.swing.JButton importDBOKButton;

    private javax.swing.JPanel mainPanel;
}
