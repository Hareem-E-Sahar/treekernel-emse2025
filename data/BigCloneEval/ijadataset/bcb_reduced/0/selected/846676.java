package com.recordsforliving.ohs.cda;

import com.recordsforliving.ohs.ccd.*;
import com.recordsforliving.ohs.ccr.CCRNamespaceURI;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class ClinicalDocument {

    private void init() {
        mCDA = null;
        mCCR = null;
        mRootElement = null;
        mXPath = null;
        mCurDate = null;
        mPatientBirthDate = null;
        mAssignedAuthorId = null;
        XPathFactory xfactory = XPathFactory.newInstance();
        mXPath = xfactory.newXPath();
        mXPath.setNamespaceContext(new CCRNamespaceURI());
    }

    public ClinicalDocument(String CCR) {
        init();
        DocumentBuilderFactory factory = null;
        try {
            factory = DocumentBuilderFactory.newInstance();
            mCDA = factory.newDocumentBuilder().newDocument();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            mCCR = dbf.newDocumentBuilder().parse(new InputSource(new StringReader(CCR)));
        } catch (FactoryConfigurationError exp) {
            exp.printStackTrace();
        } catch (ParserConfigurationException exp) {
            exp.printStackTrace();
        } catch (SAXException exp) {
            exp.printStackTrace();
        } catch (IOException exp) {
            exp.printStackTrace();
        }
    }

    public ClinicalDocument(Document CCR) {
        init();
        DocumentBuilderFactory factory = null;
        try {
            factory = DocumentBuilderFactory.newInstance();
            mCDA = factory.newDocumentBuilder().newDocument();
            mCCR = CCR;
        } catch (FactoryConfigurationError exp) {
            exp.printStackTrace();
        } catch (ParserConfigurationException exp) {
            exp.printStackTrace();
        }
    }

    private void createCDAheader() {
        mRootElement = mCDA.createElement("ClinicalDocument");
        mRootElement.setAttribute("xmlns", "urn:hl7-org:v3");
        mRootElement.setAttribute("xmlns:voc", "urn:hl7-org:v3/voc");
        mRootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        mCDA.appendChild(mRootElement);
        mRootElement.appendChild(mCDA.createComment("******************************"));
        mRootElement.appendChild(mCDA.createComment("          CDA Header          "));
        mRootElement.appendChild(mCDA.createComment("******************************"));
        Element el = mCDA.createElement("typeId");
        el.setAttribute("root", "2.16.840.1.113883.1.3");
        el.setAttribute("extension", "POCD_HD000040");
        mRootElement.appendChild(el);
        mRootElement.appendChild(mCDA.createComment("CCD v1.0 Templates Root"));
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "2.16.840.1.113883.10.20.1");
        mRootElement.appendChild(el);
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "1.3.6.1.4.1.19376.1.5.3.1.1.2");
        mRootElement.appendChild(el);
        el = mCDA.createElement("templateId");
        el.setAttribute("root", "1.3.6.1.4.1.19376.1.5.3.1.1.5");
        mRootElement.appendChild(el);
        el = mCDA.createElement("id");
        el.setAttribute("root", UUID.randomUUID().toString());
        mRootElement.appendChild(el);
        el = mCDA.createElement("code");
        el.setAttribute("code", "34133-9");
        el.setAttribute("codeSystem", "2.16.840.1.113883.6.1");
        el.setAttribute("displayName", "Summarization of episode note");
        el.setAttribute("codeSystemName", "LOINC");
        mRootElement.appendChild(el);
        el = mCDA.createElement("title");
        el.setTextContent("Generated by MPOWER-ExportServices");
        mRootElement.appendChild(el);
        el = mCDA.createElement("effectiveTime");
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssZ");
        mCurDate = cal.getTime();
        el.setAttribute("value", sdf.format(mCurDate));
        mRootElement.appendChild(el);
        el = mCDA.createElement("confidentialityCode");
        el.setAttribute("code", "N");
        el.setAttribute("codeSystem", "2.16.840.1.113883.5.25");
        mRootElement.appendChild(el);
        el = mCDA.createElement("languageCode");
        el.setAttribute("code", "en-US");
        mRootElement.appendChild(el);
        el = mCDA.createElement("recordTarget");
        mRootElement.appendChild(el);
        Element el2 = mCDA.createElement("patientRole");
        el.appendChild(el2);
        Element el3 = mCDA.createElement("id");
        el3.setAttribute("root", "2.16.840.1.113883.19.5");
        el2.appendChild(el3);
        el3 = mCDA.createElement("patient");
        el2.appendChild(el3);
        try {
            XPathExpression expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Patient/ns0:ActorID");
            String patientID = (String) expression.evaluate(mCCR, XPathConstants.STRING);
            String patientXPath = "/ns0:ContinuityOfCareRecord/ns0:Actors/ns0:Actor[ns0:ActorObjectID = 'ActorID']/".replaceAll("ActorID", patientID);
            addPatientName(el3, patientXPath);
            Element el4 = mCDA.createElement("administrativeGenderCode");
            expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:Gender/ns0:Text").toString());
            String gender = (String) expression.evaluate(mCCR, XPathConstants.STRING);
            if (gender.trim().equalsIgnoreCase("Male")) el4.setAttribute("code", "M"); else if (gender.trim().equalsIgnoreCase("Female")) el4.setAttribute("code", "F"); else el4.setAttribute("code", "U");
            el4.setAttribute("codeSystem", "2.16.840.1.113883.5.1");
            el4.setAttribute("codeSystemName", "Gender:USA:HL7");
            el3.appendChild(el4);
            el4 = mCDA.createElement("birthTime");
            el3.appendChild(el4);
            expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:DateOfBirth/ns0:ExactDateTime").toString());
            SimpleDateFormat sdf_in = new SimpleDateFormat("yyyy-MM-dd");
            mPatientBirthDate = sdf_in.parse((String) expression.evaluate(mCCR, XPathConstants.STRING));
            SimpleDateFormat sdf_out = new SimpleDateFormat("yyyyMMdd");
            el4.setAttribute("value", sdf_out.format(Long.valueOf(mPatientBirthDate.getTime())));
            el = mCDA.createElement("author");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("time");
            sdf = new SimpleDateFormat("yyyyMMddHHmmssZ");
            el2.setAttribute("value", sdf.format(mCurDate));
            el.appendChild(el2);
            el2 = mCDA.createElement("assignedAuthor");
            el.appendChild(el2);
            el3 = mCDA.createElement("id");
            mAssignedAuthorId = UUID.randomUUID().toString();
            el3.setAttribute("root", mAssignedAuthorId);
            el2.appendChild(el3);
            el3 = mCDA.createElement("assignedAuthoringDevice");
            el2.appendChild(el3);
            el4 = mCDA.createElement("softwareName");
            el4.setTextContent("MPOWER-ExportServices 0.1");
            el3.appendChild(el4);
            el3 = mCDA.createElement("representedOrganization");
            el2.appendChild(el3);
            el4 = mCDA.createElement("id");
            el4.setAttribute("root", "2.16.840.1.113883.19.5");
            el3.appendChild(el4);
            el = mCDA.createElement("custodian");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("assignedCustodian");
            el.appendChild(el2);
            el3 = mCDA.createElement("representedCustodianOrganization");
            el2.appendChild(el3);
            el4 = mCDA.createElement("id");
            el4.setAttribute("root", "2.16.840.1.113883.19.5");
            el3.appendChild(el4);
            el = mCDA.createElement("documentationOf");
            mRootElement.appendChild(el);
            el2 = mCDA.createElement("serviceEvent");
            el2.setAttribute("classCode", "PCPR");
            el.appendChild(el2);
            el3 = mCDA.createElement("effectiveTime");
            el2.appendChild(el3);
            sdf = new SimpleDateFormat("yyyyMMdd");
            el4 = mCDA.createElement("low");
            sdf_out = new SimpleDateFormat("yyyyMMdd");
            el4.setAttribute("value", sdf_out.format(Long.valueOf(mPatientBirthDate.getTime())));
            el3.appendChild(el4);
            el4 = mCDA.createElement("high");
            el4.setAttribute("value", sdf.format(mCurDate));
            el3.appendChild(el4);
            el3 = mCDA.createElement("performer");
            el3.setAttribute("typeCode", "PRF");
            el2.appendChild(el3);
            el4 = mCDA.createElement("assignedEntity");
            el3.appendChild(el4);
            Element el5 = mCDA.createElement("id");
            el5.setAttribute("root", UUID.randomUUID().toString());
            el4.appendChild(el5);
            el5 = mCDA.createElement("representedOrganization");
            el4.appendChild(el5);
        } catch (XPathExpressionException exp) {
            exp.printStackTrace();
        } catch (ParseException exp) {
            exp.printStackTrace();
        }
    }

    private void addPatientName(Element parent, String patientXPath) {
        try {
            Element el = mCDA.createElement("name");
            parent.appendChild(el);
            Element el2 = mCDA.createElement("prefix");
            el.appendChild(el2);
            XPathExpression expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:Name/ns0:CurrentName/ns0:Given").toString());
            el2 = mCDA.createElement("given");
            el2.setTextContent((String) expression.evaluate(mCCR, XPathConstants.STRING));
            el.appendChild(el2);
            expression = mXPath.compile((new StringBuilder(String.valueOf(patientXPath))).append("/ns0:Person/ns0:Name/ns0:CurrentName/ns0:Family").toString());
            el2 = mCDA.createElement("family");
            el2.setTextContent((String) expression.evaluate(mCCR, XPathConstants.STRING));
            el.appendChild(el2);
            el2 = mCDA.createElement("suffix");
            el.appendChild(el2);
        } catch (XPathExpressionException exp) {
            exp.printStackTrace();
        }
    }

    private void createCDAbody() {
        mRootElement.appendChild(mCDA.createComment("******************************"));
        mRootElement.appendChild(mCDA.createComment("           CDA Body           "));
        mRootElement.appendChild(mCDA.createComment("******************************"));
        Element el = mCDA.createElement("component");
        mRootElement.appendChild(el);
        Element el2 = mCDA.createElement("structuredBody");
        el.appendChild(el2);
        try {
            XPathExpression expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Payers/ns0:Payer");
            Payers payers = new Payers(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            payers.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Problems/ns0:Problem");
            Problems probs = new Problems(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            probs.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Medications/ns0:Medication");
            Medications meds = new Medications(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            meds.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Immunizations/ns0:Immunization");
            Immunizations immunizations = new Immunizations(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            immunizations.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Results/ns0:Result");
            Results results = new Results(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            results.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Procedures/ns0:Procedure");
            Procedures procedures = new Procedures(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            procedures.createCCDSection();
            expression = mXPath.compile("/ns0:ContinuityOfCareRecord/ns0:Body/ns0:Encounters/ns0:Encounter");
            Encounters encounters = new Encounters(mXPath, (NodeList) expression.evaluate(mCCR, XPathConstants.NODESET), mCDA, el2);
            encounters.createCCDSection();
        } catch (XPathExpressionException exp) {
            exp.printStackTrace();
        }
    }

    public void createCCD() {
        createCDAheader();
        createCDAbody();
    }

    public void exportCCD(Result destination) {
        exportCCD(destination, true);
    }

    public void exportCCD(Result destination, boolean insertDeclaration) {
        try {
            TransformerFactory tranFactory = TransformerFactory.newInstance();
            tranFactory.setAttribute("indent-number", new Integer(3));
            Transformer transformer = tranFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            if (insertDeclaration == true) {
                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            } else {
                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            }
            javax.xml.transform.Source src = new DOMSource(mCDA);
            transformer.transform(src, destination);
        } catch (TransformerConfigurationException exp) {
            exp.printStackTrace();
        } catch (TransformerException exp) {
            exp.printStackTrace();
        }
    }

    public String toString() {
        return toString(true);
    }

    public String toString(boolean insertDeclaration) {
        StringWriter sw = new StringWriter();
        Result dest = new StreamResult(sw);
        exportCCD(dest, insertDeclaration);
        return sw.toString();
    }

    private Document mCDA;

    private Document mCCR;

    private Element mRootElement;

    private XPath mXPath;

    private Date mCurDate;

    private Date mPatientBirthDate;

    private String mAssignedAuthorId;
}
