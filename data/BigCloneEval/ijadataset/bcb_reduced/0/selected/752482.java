package org.jacex.compiler;

import static org.objectweb.asm.Opcodes.ACC_FINAL;
import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.PUTFIELD;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.V1_5;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.concurrent.atomic.AtomicLong;
import javax.script.CompiledScript;
import org.jacex.JacexEngine;
import org.jacex.compiler.attributes.ScriptContextAttributeBuilder;
import org.jacex.compiler.attributes.AutoBaseAttributeBuilder;
import org.jacex.expressions.ExpressionAppender;
import org.jacex.script.Script;
import org.jacex.utils.Appenders;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.util.TraceClassVisitor;

public class ExpressionCompiler {

    /**
	 * Trace writer: if set, generated bytecode traced to it.
	 */
    public static PrintWriter traceWriter = null;

    private static final AtomicLong expId = new AtomicLong(0);

    private final ExpressionLoader loader = new ExpressionLoader();

    private final AccessBuilder accessBuilder = new AccessBuilder();

    private final JacexEngine engine;

    public ExpressionCompiler(JacexEngine engine) {
        this.engine = engine;
    }

    public CompiledScript compile(Script script) throws CompilationException {
        String className = "Exp" + expId.incrementAndGet();
        ExpressionAppender appender;
        try {
            appender = script.expression.apply(createCodeBuilder(script));
        } catch (Throwable e) {
            throw new CompilationException("Error building expression", e);
        }
        byte[] bytecode;
        try {
            bytecode = buildClass(className, appender);
        } catch (Throwable e) {
            throw new CompilationException("Error generating bytecode", e);
        }
        Class<? extends CompiledScript> clazz;
        try {
            clazz = loader.defineClass(className, bytecode);
        } catch (Throwable e) {
            throw new CompilationException("Error defining expression class", e);
        }
        try {
            return clazz.getConstructor(JacexEngine.class).newInstance(engine);
        } catch (Throwable e) {
            throw new CompilationException("Error instantianting expression class", e);
        }
    }

    public boolean registerMethod(Method method) {
        return accessBuilder.registerMethod(method);
    }

    public boolean unregisterMethod(Method method) {
        return accessBuilder.unregisterMethod(method);
    }

    private ExpressionCodeBuilder createCodeBuilder(Script script) {
        return new ExpressionCodeBuilder(accessBuilder, new AutoBaseAttributeBuilder("self", new ScriptContextAttributeBuilder(script.attributes)));
    }

    private byte[] buildClass(String className, ExpressionAppender appender) throws CompilationException {
        ClassWriter cww = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
        ClassVisitor cw = traceWriter == null ? cww : new TraceClassVisitor(cww, traceWriter);
        cw.visit(V1_5, ACC_PUBLIC, className, null, "javax/script/CompiledScript", new String[] {});
        cw.visitField(ACC_PRIVATE | ACC_FINAL, "engine", "Lorg/jacex/JacexEngine;", null, null);
        addConstructor(cw, className);
        addEngineGetter(cw, className);
        addEvalMethod(cw, appender);
        cw.visitEnd();
        return cww.toByteArray();
    }

    private void addConstructor(ClassVisitor cw, String className) {
        MethodVisitor mw = cw.visitMethod(ACC_PUBLIC, "<init>", "(Lorg/jacex/JacexEngine;)V", null, null);
        mw.visitCode();
        mw.visitVarInsn(ALOAD, 0);
        mw.visitMethodInsn(INVOKESPECIAL, "javax/script/CompiledScript", "<init>", "()V");
        mw.visitVarInsn(ALOAD, 0);
        mw.visitVarInsn(ALOAD, 1);
        mw.visitFieldInsn(PUTFIELD, className, "engine", "Lorg/jacex/JacexEngine;");
        mw.visitInsn(RETURN);
        mw.visitMaxs(0, 0);
        mw.visitEnd();
    }

    private void addEngineGetter(ClassVisitor cw, String className) {
        MethodVisitor mw = cw.visitMethod(ACC_PUBLIC, "getEngine", "()Ljavax/script/ScriptEngine;", null, null);
        mw.visitCode();
        mw.visitVarInsn(ALOAD, 0);
        mw.visitFieldInsn(GETFIELD, className, "engine", "Lorg/jacex/JacexEngine;");
        mw.visitInsn(ARETURN);
        mw.visitMaxs(0, 0);
        mw.visitEnd();
    }

    private void addEvalMethod(ClassVisitor cw, ExpressionAppender appender) throws CompilationException {
        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "eval", "(Ljavax/script/ScriptContext;)Ljava/lang/Object;", null, null);
        mv.visitCode();
        appender.appendEval(mv);
        if (appender.type.isPrimitive()) Appenders.appendBox(mv, appender.type);
        mv.visitInsn(ARETURN);
        mv.visitMaxs(0, 0);
        mv.visitEnd();
    }
}
