package org.sodbeans.tutorial;

import org.sodbeans.phonemic.TextToSpeechFactory;
import org.sodbeans.phonemic.tts.TextToSpeech;
import org.sodbeans.phonemic.SpeechPriority;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author user
 */
public class HelpWindow extends javax.swing.JDialog {

    static TextToSpeech speech = TextToSpeechFactory.getDefaultTextToSpeech();

    String instructionsString;

    HelpWindowMode tableMode;

    private class HotkeysTableModel extends AbstractTableModel {

        HotkeysReferencer referencer = new HotkeysReferencer();

        @Override
        public String getColumnName(int col) {
            if (col == 0) return "Hot key Description"; else return "Hot key";
        }

        @Override
        public int getRowCount() {
            return referencer.getNumberOfHotkeys();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return referencer.getDescription(row);
            } else if (col == 1) {
                return referencer.getHotkey(row);
            }
            return "";
        }
    }

    private class KeywordsTableModel extends AbstractTableModel {

        KeywordsReferencer referencer = new KeywordsReferencer();

        @Override
        public String getColumnName(int col) {
            if (col == 0) return "Keyword"; else return "Keyword Description";
        }

        @Override
        public int getRowCount() {
            return referencer.getNumberOfKeywords();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return referencer.getKeyword(row);
            } else if (col == 1) {
                return referencer.getDescription(row);
            }
            return "";
        }
    }

    /** Creates new form HelpWindow */
    public HelpWindow(java.awt.Frame parent, boolean modal, HelpWindowMode mode) {
        super(parent, modal);
        initComponents();
        this.tableMode = mode;
        if (mode.equals(HelpWindowMode.HOTKEYS)) {
            hotkeysTable.setModel(new HotkeysTableModel());
        } else {
            hotkeysTable.setModel(new KeywordsTableModel());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        sodbeanLbl = new javax.swing.JLabel();
        titleLbl = new java.awt.Label();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        hotkeysTable = new javax.swing.JTable();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        sodbeanLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sodbeans/tutorial/Resources/SodbeansLogoTransparent3.png")));
        sodbeanLbl.setText(org.openide.util.NbBundle.getMessage(HelpWindow.class, "HelpWindow.sodbeanLbl.text"));
        titleLbl.setAlignment(java.awt.Label.CENTER);
        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 40));
        titleLbl.setText(org.openide.util.NbBundle.getMessage(HelpWindow.class, "HelpWindow.titleLbl.text"));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 22));
        backBtn.setText(org.openide.util.NbBundle.getMessage(HelpWindow.class, "HelpWindow.backBtn.text"));
        backBtn.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        backBtn.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                HelpWindow.this.keyPressed(evt);
            }
        });
        hotkeysTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null } }, new String[] { "Title 1", "Title 2", "Title 3", "Title 4" }));
        hotkeysTable.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                hotkeysTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(hotkeysTable);
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().addContainerGap().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE).add(layout.createSequentialGroup().add(100, 100, 100).add(sodbeanLbl).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(titleLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).addContainerGap()).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(backBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 377, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(179, 179, 179)))));
        layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false).add(layout.createSequentialGroup().addContainerGap().add(sodbeanLbl).add(10, 10, 10)).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(titleLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(21, 21, 21))).add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE).add(18, 18, 18).add(backBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(24, 24, 24)));
        pack();
    }

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (tableMode.equals(HelpWindowMode.HOTKEYS)) {
            speech.speak("Returning to main tutorials window");
        } else {
            speech.speak("Returning to Quorum tutorials window");
        }
        goBack();
    }

    private void goToWebsite(URI uri) {
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        } else {
        }
    }

    private void keyPressed(java.awt.event.KeyEvent evt) {
        Component c = evt.getComponent();
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            goBack();
        }
    }

    private void hotkeysTableKeyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            goBack();
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            hotkeysTable.transferFocus();
        }
    }

    private void goBack() {
        if (tableMode.equals(HelpWindowMode.HOTKEYS)) {
            speech.speak("Returning to main tutorials menu", SpeechPriority.MEDIUM);
            this.setVisible(false);
            MainWindowSingleton.getInstance().setVisible(true);
        } else {
            speech.speak("Returning to Quorum tutorials menu", SpeechPriority.MEDIUM);
            this.setVisible(false);
            SelectionWindowSingleton.getInstance().setVisible(true);
        }
    }

    private void keyDown(Component c) {
        c.transferFocus();
    }

    private void keyUp(Component c) {
        c.transferFocusBackward();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                HelpWindow dialog = new HelpWindow(new javax.swing.JFrame(), true, HelpWindowMode.HOTKEYS);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Override
    public void setVisible(boolean bln) {
        if (bln) {
            Dimension dim = getToolkit().getScreenSize();
            Rectangle abounds = getBounds();
            super.setLocation((dim.width - abounds.width) / 2, (dim.height - abounds.height) / 2);
            if (tableMode.equals(HelpWindowMode.HOTKEYS)) {
                speech.speak("Hot keys Reference Window");
                titleLbl.setText("Hotkeys Reference");
            } else {
                speech.speak("Quorum Keyword Reference Window");
                titleLbl.setText("Keyword Reference");
            }
        }
        super.setVisible(bln);
    }

    private javax.swing.JButton backBtn;

    private javax.swing.JTable hotkeysTable;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JLabel sodbeanLbl;

    private java.awt.Label titleLbl;
}
