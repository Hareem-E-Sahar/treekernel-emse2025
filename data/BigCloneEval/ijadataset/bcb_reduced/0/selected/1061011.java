package magtest;

import com.sun.awt.AWTUtilities;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 * A simple magnifier.
 * 
 * How it works:
 * - The window is given an opacity of 80%. This setting allows us to
 * still somewhat see what is below ourselves.
 * - To capture what is below us, we must use this basic algorithm:
 *      - capture a screenshot of ourselves
 *      - paint said screenshot (un-zoomed) onto ourselves
 *      - and repeat this 5 times (less may be required)
 *  - After the above algorithm finishes, we can zoom the image.
 * 
 * It's a little wacky, but... it seems to work, and it appears to be the
 * same method used in that other project.
 * 
 * Usage:
 *  - Use the arrow keys to move the thing around. It is incredibly slow at
 *      re-drawing, but it can be likely be refactored to go faster.
 * - Use the '0' key to zoom in, and the - key to zoom out.
 * @author Jeffrey
 */
public class Magnifier extends javax.swing.JFrame implements ActionListener {

    private BufferedImage screen = null;

    private int zoomLevel = 2;

    /** Creates new form Magnifier */
    public Magnifier() {
        this.setUndecorated(true);
        initComponents();
        AWTUtilities.setWindowOpacity(this, 0.8f);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D gr = (Graphics2D) g;
        if (screen != null) {
            gr.drawImage(screen, 0, 0, null);
        }
        gr.setColor(Color.RED);
        gr.drawRect(0, 0, this.getWidth() - 1, this.getHeight() - 1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));
        pack();
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        int k = evt.getKeyCode();
        boolean validKey = false;
        if (k == KeyEvent.VK_UP) {
            this.setLocation(this.getX(), this.getY() - 15);
            validKey = true;
        } else if (k == KeyEvent.VK_DOWN) {
            this.setLocation(this.getX(), this.getY() + 15);
            validKey = true;
        } else if (k == KeyEvent.VK_LEFT) {
            this.setLocation(this.getX() - 15, this.getY());
            validKey = true;
        } else if (k == KeyEvent.VK_RIGHT) {
            this.setLocation(this.getX() + 15, this.getY());
            validKey = true;
        } else if (k == KeyEvent.VK_0) {
            zoomLevel++;
            validKey = true;
        } else if (k == KeyEvent.VK_MINUS && zoomLevel > 1) {
            zoomLevel--;
            validKey = true;
        }
        if (validKey) {
            captureScreen();
        }
    }

    private void formKeyReleased(java.awt.event.KeyEvent evt) {
        int k = evt.getKeyCode();
        if (k == KeyEvent.VK_UP || k == KeyEvent.VK_DOWN || k == KeyEvent.VK_LEFT || k == KeyEvent.VK_RIGHT || k == KeyEvent.VK_0 || k == KeyEvent.VK_MINUS) {
            captureScreen();
            drawScreen(zoomLevel);
        }
    }

    static int shot = 0;

    /**
     * Take a screenshot and put it in the 'screen 'variable.
     */
    private void captureScreen() {
        for (int x = 0; x < 1; x++) {
            try {
                Rectangle cap = new Rectangle();
                cap.x = this.getX();
                cap.y = this.getY();
                cap.width = this.getWidth();
                cap.height = this.getHeight();
                AWTUtilities.setWindowOpacity(this, 0.0f);
                screen = new Robot().createScreenCapture(cap);
                AWTUtilities.setWindowOpacity(this, 1.0f);
                drawScreen(1);
            } catch (AWTException ex) {
                Logger.getLogger(Magnifier.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        shot++;
    }

    private void drawScreen(int scale) {
        Graphics2D g = (Graphics2D) this.getGraphics();
        if (screen != null) {
            AffineTransform s = AffineTransform.getScaleInstance(scale, scale);
            g.drawRenderedImage(screen, s);
        }
        g.setColor(Color.BLACK);
        g.drawRect(0, 0, this.getWidth() - 1, this.getHeight() - 1);
    }

    /**
     * A public method to recapture and redraw the screen.
     */
    public void recapture() {
        captureScreen();
        drawScreen(zoomLevel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Magnifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Magnifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Magnifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Magnifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        captureScreen();
        this.repaint();
    }

    private void clearWindow() {
        Graphics g = this.getGraphics();
        g.clearRect(0, 0, this.getWidth(), this.getHeight());
    }
}
