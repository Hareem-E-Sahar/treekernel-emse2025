package annone.ui.swing.laf;

import static annone.util.Log.log;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JTextField;
import javax.swing.UIDefaults;
import javax.swing.UIDefaults.LazyValue;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.DimensionUIResource;
import javax.swing.plaf.InsetsUIResource;
import javax.swing.plaf.basic.BasicLookAndFeel;
import javax.swing.text.DefaultEditorKit;
import sun.swing.SwingLazyValue;
import sun.swing.SwingUtilities2;
import annone.ui.swing.SwingColors;
import annone.util.Text;

public class MyLookAndFeel extends BasicLookAndFeel {

    private static final long serialVersionUID = 114106077885165144L;

    private static class MyLazyValue implements LazyValue {

        private final String methodName;

        public MyLazyValue(String methodName) {
            this.methodName = methodName;
        }

        @Override
        public Object createValue(UIDefaults table) {
            try {
                Method method = MyLookAndFeel.class.getMethod(methodName);
                Object value = method.invoke(null);
                return value;
            } catch (Throwable xp) {
                log(Level.WARNING, xp, Text.get("Can''t create lazy value."));
                return null;
            }
        }
    }

    @Override
    public String getName() {
        return "My Look & Feel";
    }

    @Override
    public String getID() {
        return "MyLookAndFeel";
    }

    @Override
    public String getDescription() {
        return "My Look & Feel";
    }

    @Override
    public boolean isNativeLookAndFeel() {
        return false;
    }

    @Override
    public boolean isSupportedLookAndFeel() {
        return true;
    }

    @Override
    protected void initClassDefaults(UIDefaults table) {
        super.initClassDefaults(table);
    }

    @Override
    protected void initSystemColorDefaults(UIDefaults table) {
        String[] defaultSystemColors = { "desktop", "#005C5C", "activeCaption", "#000080", "activeCaptionText", SwingColors.White.toHtml(), "activeCaptionBorder", "#C0C0C0", "inactiveCaption", "#808080", "inactiveCaptionText", "#C0C0C0", "inactiveCaptionBorder", "#C0C0C0", "window", SwingColors.White.toHtml(), "windowBorder", SwingColors.Black.toHtml(), "windowText", SwingColors.Black.toHtml(), "menu", SwingColors.Gainsboro.toHtml(), "menuText", SwingColors.Black.toHtml(), "text", SwingColors.White.toHtml(), "textText", SwingColors.Black.toHtml(), "textHighlight", SwingColors.Navy.toHtml(), "textHighlightText", SwingColors.White.toHtml(), "textInactiveText", SwingColors.DarkSlateGray.toHtml(), "control", SwingColors.Wheat.toHtml(), "controlText", SwingColors.Black.toHtml(), "controlHighlight", "#A0A0A0", "controlLtHighlight", "#B0B0B0", "controlShadow", "#909090", "controlDkShadow", "#808080", "scrollbar", "#E0E0E0", "info", SwingColors.LightGoldenRodYellow.toHtml(), "infoText", SwingColors.Black.toHtml() };
        loadSystemColors(table, defaultSystemColors, isNativeLookAndFeel());
    }

    private void initResourceBundle(UIDefaults table) {
        table.setDefaultLocale(Locale.getDefault());
        table.addResourceBundle("com.sun.swing.internal.plaf.basic.resources.basic");
    }

    public static Border getFocusCellHighlightBorder() {
        return new BorderUIResource.CompoundBorderUIResource(new LineBorder(SwingColors.Beige), new EmptyBorder(2, 4, 2, 4));
    }

    public static Border getCellNoFocusBorder() {
        return new BorderUIResource.EmptyBorderUIResource(3, 5, 3, 5);
    }

    public static Border getPopupMenuBorder() {
        return new BorderUIResource.LineBorderUIResource(SwingColors.Black);
    }

    public static Border getButtonBorder() {
        return new BorderUIResource.LineBorderUIResource(SwingColors.Black);
    }

    public static Border getToggleButtonBorder() {
        return new BorderUIResource.LineBorderUIResource(SwingColors.Black);
    }

    public static Border getRadioButtonBorder() {
        return new BorderUIResource.LineBorderUIResource(SwingColors.Black);
    }

    @Override
    protected void initComponentDefaults(UIDefaults table) {
        initResourceBundle(table);
        initStandardFont();
        Integer fiveHundred = new Integer(500);
        Long oneThousand = new Long(1000);
        Integer twelve = new Integer(12);
        Integer fontSizeDefault = new Integer(17);
        Integer fontPlain = new Integer(Font.PLAIN);
        Integer fontBold = new Integer(Font.BOLD);
        String fontFamilySerif = "DeJavu Serif";
        String fontFamilySans = "DeJavu Sans";
        String fontFamilyMonospace = "DeJavu Sans Mono";
        Object dialogPlainDefault = new SwingLazyValue("javax.swing.plaf.FontUIResource", null, new Object[] { fontFamilySans, fontPlain, fontSizeDefault });
        Object serifPlainDefault = new SwingLazyValue("javax.swing.plaf.FontUIResource", null, new Object[] { fontFamilySans, fontPlain, fontSizeDefault });
        Object sansSerifPlainDefault = new SwingLazyValue("javax.swing.plaf.FontUIResource", null, new Object[] { fontFamilySans, fontPlain, fontSizeDefault });
        Object monospacedPlainDefault = new SwingLazyValue("javax.swing.plaf.FontUIResource", null, new Object[] { fontFamilyMonospace, fontPlain, fontSizeDefault });
        Object dialogBoldDefault = new SwingLazyValue("javax.swing.plaf.FontUIResource", null, new Object[] { fontFamilySans, fontBold, fontSizeDefault });
        ColorUIResource red = new ColorUIResource(Color.red);
        ColorUIResource black = new ColorUIResource(Color.black);
        ColorUIResource white = new ColorUIResource(Color.white);
        ColorUIResource yellow = new ColorUIResource(SwingColors.DarkGoldenRod);
        ColorUIResource gray = new ColorUIResource(Color.gray);
        ColorUIResource lightGray = new ColorUIResource(Color.lightGray);
        ColorUIResource darkGray = new ColorUIResource(Color.darkGray);
        ColorUIResource scrollBarTrack = new ColorUIResource(224, 224, 224);
        Color control = table.getColor("control");
        Color controlDkShadow = table.getColor("controlDkShadow");
        Color controlHighlight = table.getColor("controlHighlight");
        Color controlLtHighlight = table.getColor("controlLtHighlight");
        Color controlShadow = table.getColor("controlShadow");
        Color controlText = table.getColor("controlText");
        Color menu = table.getColor("menu");
        Color menuText = table.getColor("menuText");
        Color textHighlight = table.getColor("textHighlight");
        Color textHighlightText = table.getColor("textHighlightText");
        Color textInactiveText = table.getColor("textInactiveText");
        Color textText = table.getColor("textText");
        Color window = table.getColor("window");
        InsetsUIResource zeroInsets = new InsetsUIResource(0, 0, 0, 0);
        InsetsUIResource twoInsets = new InsetsUIResource(2, 2, 2, 2);
        InsetsUIResource threeInsets = new InsetsUIResource(3, 3, 3, 3);
        Object marginBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders$MarginBorder");
        Object etchedBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource", "getEtchedBorderUIResource");
        Object loweredBevelBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource", "getLoweredBevelBorderUIResource");
        Object popupMenuBorder = new MyLazyValue("getPopupMenuBorder");
        Object blackLineBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource", "getBlackLineBorderUIResource");
        Object focusCellHighlightBorder = new MyLazyValue("getFocusCellHighlightBorder");
        Object cellNoFocusBorder = new MyLazyValue("getCellNoFocusBorder");
        Object tableHeaderBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource$BevelBorderUIResource", null, new Object[] { new Integer(BevelBorder.RAISED), controlLtHighlight, control, controlDkShadow, controlShadow });
        Object buttonBorder = new MyLazyValue("getButtonBorder");
        Object buttonToggleBorder = new MyLazyValue("getToggleButtonBorder");
        Object radioButtonBorder = new MyLazyValue("getRadioButtonBorder");
        Object newFolderIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/NewFolder.gif");
        Object upFolderIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/UpFolder.gif");
        Object homeFolderIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/HomeFolder.gif");
        Object detailsViewIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/DetailsView.gif");
        Object listViewIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/ListView.gif");
        Object directoryIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Directory.gif");
        Object fileIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/File.gif");
        Object computerIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Computer.gif");
        Object hardDriveIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/HardDrive.gif");
        Object floppyDriveIcon = SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/FloppyDrive.gif");
        Object internalFrameBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getInternalFrameBorder");
        Object listCellRendererActiveValue = new UIDefaults.ActiveValue() {

            @Override
            public Object createValue(UIDefaults table) {
                return new DefaultListCellRenderer.UIResource();
            }
        };
        Object menuBarBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getMenuBarBorder");
        Object menuItemCheckIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getMenuItemCheckIcon");
        Object menuItemArrowIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getMenuItemArrowIcon");
        Object menuArrowIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getMenuArrowIcon");
        Object checkBoxIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getCheckBoxIcon");
        Object radioButtonIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getRadioButtonIcon");
        Object checkBoxMenuItemIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getCheckBoxMenuItemIcon");
        Object radioButtonMenuItemIcon = new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "getRadioButtonMenuItemIcon");
        Object menuItemAcceleratorDelimiter = new String("+");
        Object optionPaneMinimumSize = new DimensionUIResource(262, 90);
        Integer zero = new Integer(0);
        Object zeroBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource$EmptyBorderUIResource", new Object[] { zero, zero, zero, zero });
        Integer ten = new Integer(10);
        Object optionPaneBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource$EmptyBorderUIResource", new Object[] { ten, ten, twelve, ten });
        Object optionPaneButtonAreaBorder = new SwingLazyValue("javax.swing.plaf.BorderUIResource$EmptyBorderUIResource", new Object[] { new Integer(6), zero, zero, zero });
        Object progressBarBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getProgressBarBorder");
        Object minimumThumbSize = new DimensionUIResource(8, 8);
        Object maximumThumbSize = new DimensionUIResource(4096, 4096);
        Object sliderFocusInsets = twoInsets;
        Object toolBarSeparatorSize = new DimensionUIResource(10, 10);
        Object splitPaneBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getSplitPaneBorder");
        Object splitPaneDividerBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getSplitPaneDividerBorder");
        Object tabbedPaneTabInsets = new InsetsUIResource(0, 4, 1, 4);
        Object tabbedPaneTabPadInsets = new InsetsUIResource(2, 2, 2, 1);
        Object tabbedPaneTabAreaInsets = new InsetsUIResource(3, 2, 0, 2);
        Object tabbedPaneContentBorderInsets = new InsetsUIResource(2, 2, 3, 3);
        Object textFieldBorder = new SwingLazyValue("javax.swing.plaf.basic.BasicBorders", "getTextFieldBorder");
        Object editorMargin = threeInsets;
        Object caretBlinkRate = fiveHundred;
        Integer four = new Integer(4);
        Object[] allAuditoryCues = new Object[] { "CheckBoxMenuItem.commandSound", "InternalFrame.closeSound", "InternalFrame.maximizeSound", "InternalFrame.minimizeSound", "InternalFrame.restoreDownSound", "InternalFrame.restoreUpSound", "MenuItem.commandSound", "OptionPane.errorSound", "OptionPane.informationSound", "OptionPane.questionSound", "OptionPane.warningSound", "PopupMenu.popupSound", "RadioButtonMenuItem.commandSound" };
        Object[] noAuditoryCues = new Object[] { "mute" };
        List<Object> defaults = new ArrayList<Object>(1000);
        defaults.add("AuditoryCues.cueList");
        defaults.add(allAuditoryCues);
        defaults.add("AuditoryCues.allAuditoryCues");
        defaults.add(allAuditoryCues);
        defaults.add("AuditoryCues.noAuditoryCues");
        defaults.add(noAuditoryCues);
        defaults.add("AuditoryCues.playList");
        defaults.add(null);
        defaults.add("Button.defaultButtonFollowsFocus");
        defaults.add(Boolean.TRUE);
        defaults.add("Button.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Button.background");
        defaults.add(control);
        defaults.add("Button.foreground");
        defaults.add(controlText);
        defaults.add("Button.shadow");
        defaults.add(controlShadow);
        defaults.add("Button.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("Button.light");
        defaults.add(controlHighlight);
        defaults.add("Button.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("Button.border");
        defaults.add(buttonBorder);
        defaults.add("Button.margin");
        defaults.add(new InsetsUIResource(2, 14, 2, 14));
        defaults.add("Button.textIconGap");
        defaults.add(four);
        defaults.add("Button.textShiftOffset");
        defaults.add(zero);
        defaults.add("Button.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released", "ENTER", "pressed", "released ENTER", "released" }));
        defaults.add("ToggleButton.font");
        defaults.add(dialogPlainDefault);
        defaults.add("ToggleButton.background");
        defaults.add(control);
        defaults.add("ToggleButton.foreground");
        defaults.add(controlText);
        defaults.add("ToggleButton.shadow");
        defaults.add(controlShadow);
        defaults.add("ToggleButton.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("ToggleButton.light");
        defaults.add(controlHighlight);
        defaults.add("ToggleButton.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("ToggleButton.border");
        defaults.add(buttonToggleBorder);
        defaults.add("ToggleButton.margin");
        defaults.add(new InsetsUIResource(2, 14, 2, 14));
        defaults.add("ToggleButton.textIconGap");
        defaults.add(four);
        defaults.add("ToggleButton.textShiftOffset");
        defaults.add(zero);
        defaults.add("ToggleButton.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }));
        defaults.add("RadioButton.font");
        defaults.add(dialogPlainDefault);
        defaults.add("RadioButton.background");
        defaults.add(control);
        defaults.add("RadioButton.foreground");
        defaults.add(controlText);
        defaults.add("RadioButton.shadow");
        defaults.add(controlShadow);
        defaults.add("RadioButton.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("RadioButton.light");
        defaults.add(controlHighlight);
        defaults.add("RadioButton.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("RadioButton.border");
        defaults.add(radioButtonBorder);
        defaults.add("RadioButton.margin");
        defaults.add(twoInsets);
        defaults.add("RadioButton.textIconGap");
        defaults.add(four);
        defaults.add("RadioButton.textShiftOffset");
        defaults.add(zero);
        defaults.add("RadioButton.icon");
        defaults.add(radioButtonIcon);
        defaults.add("RadioButton.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released", "RETURN", "pressed" }));
        defaults.add("CheckBox.font");
        defaults.add(dialogPlainDefault);
        defaults.add("CheckBox.background");
        defaults.add(control);
        defaults.add("CheckBox.foreground");
        defaults.add(controlText);
        defaults.add("CheckBox.border");
        defaults.add(radioButtonBorder);
        defaults.add("CheckBox.margin");
        defaults.add(twoInsets);
        defaults.add("CheckBox.textIconGap");
        defaults.add(four);
        defaults.add("CheckBox.textShiftOffset");
        defaults.add(zero);
        defaults.add("CheckBox.icon");
        defaults.add(checkBoxIcon);
        defaults.add("CheckBox.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }));
        defaults.add("FileChooser.useSystemExtensionHiding");
        defaults.add(Boolean.FALSE);
        defaults.add("ColorChooser.font");
        defaults.add(dialogPlainDefault);
        defaults.add("ColorChooser.background");
        defaults.add(control);
        defaults.add("ColorChooser.foreground");
        defaults.add(controlText);
        defaults.add("ColorChooser.swatchesSwatchSize");
        defaults.add(new Dimension(10, 10));
        defaults.add("ColorChooser.swatchesRecentSwatchSize");
        defaults.add(new Dimension(10, 10));
        defaults.add("ColorChooser.swatchesDefaultRecentColor");
        defaults.add(control);
        defaults.add("ComboBox.font");
        defaults.add(sansSerifPlainDefault);
        defaults.add("ComboBox.background");
        defaults.add(window);
        defaults.add("ComboBox.foreground");
        defaults.add(textText);
        defaults.add("ComboBox.buttonBackground");
        defaults.add(control);
        defaults.add("ComboBox.buttonShadow");
        defaults.add(controlShadow);
        defaults.add("ComboBox.buttonDarkShadow");
        defaults.add(controlDkShadow);
        defaults.add("ComboBox.buttonHighlight");
        defaults.add(controlLtHighlight);
        defaults.add("ComboBox.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("ComboBox.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("ComboBox.disabledBackground");
        defaults.add(control);
        defaults.add("ComboBox.disabledForeground");
        defaults.add(textInactiveText);
        defaults.add("ComboBox.timeFactor");
        defaults.add(oneThousand);
        defaults.add("ComboBox.isEnterSelectablePopup");
        defaults.add(Boolean.FALSE);
        defaults.add("ComboBox.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "hidePopup", "PAGE_UP", "pageUpPassThrough", "PAGE_DOWN", "pageDownPassThrough", "HOME", "homePassThrough", "END", "endPassThrough", "ENTER", "enterPressed" }));
        defaults.add("FileChooser.newFolderIcon");
        defaults.add(newFolderIcon);
        defaults.add("FileChooser.upFolderIcon");
        defaults.add(upFolderIcon);
        defaults.add("FileChooser.homeFolderIcon");
        defaults.add(homeFolderIcon);
        defaults.add("FileChooser.detailsViewIcon");
        defaults.add(detailsViewIcon);
        defaults.add("FileChooser.listViewIcon");
        defaults.add(listViewIcon);
        defaults.add("FileChooser.readOnly");
        defaults.add(Boolean.FALSE);
        defaults.add("FileChooser.usesSingleFilePane");
        defaults.add(Boolean.FALSE);
        defaults.add("FileChooser.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "cancelSelection", "F5", "refresh" }));
        defaults.add("FileView.directoryIcon");
        defaults.add(directoryIcon);
        defaults.add("FileView.fileIcon");
        defaults.add(fileIcon);
        defaults.add("FileView.computerIcon");
        defaults.add(computerIcon);
        defaults.add("FileView.hardDriveIcon");
        defaults.add(hardDriveIcon);
        defaults.add("FileView.floppyDriveIcon");
        defaults.add(floppyDriveIcon);
        defaults.add("InternalFrame.titleFont");
        defaults.add(dialogBoldDefault);
        defaults.add("InternalFrame.borderColor");
        defaults.add(control);
        defaults.add("InternalFrame.borderShadow");
        defaults.add(controlShadow);
        defaults.add("InternalFrame.borderDarkShadow");
        defaults.add(controlDkShadow);
        defaults.add("InternalFrame.borderHighlight");
        defaults.add(controlLtHighlight);
        defaults.add("InternalFrame.borderLight");
        defaults.add(controlHighlight);
        defaults.add("InternalFrame.border");
        defaults.add(internalFrameBorder);
        defaults.add("InternalFrame.icon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/JavaCup16.png"));
        defaults.add("InternalFrame.maximizeIcon");
        defaults.add(new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "createEmptyFrameIcon"));
        defaults.add("InternalFrame.minimizeIcon");
        defaults.add(new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "createEmptyFrameIcon"));
        defaults.add("InternalFrame.iconifyIcon");
        defaults.add(new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "createEmptyFrameIcon"));
        defaults.add("InternalFrame.closeIcon");
        defaults.add(new SwingLazyValue("javax.swing.plaf.basic.BasicIconFactory", "createEmptyFrameIcon"));
        defaults.add("InternalFrame.closeSound");
        defaults.add(null);
        defaults.add("InternalFrame.maximizeSound");
        defaults.add(null);
        defaults.add("InternalFrame.minimizeSound");
        defaults.add(null);
        defaults.add("InternalFrame.restoreDownSound");
        defaults.add(null);
        defaults.add("InternalFrame.restoreUpSound");
        defaults.add(null);
        defaults.add("InternalFrame.activeTitleBackground");
        defaults.add(table.get("activeCaption"));
        defaults.add("InternalFrame.activeTitleForeground");
        defaults.add(table.get("activeCaptionText"));
        defaults.add("InternalFrame.inactiveTitleBackground");
        defaults.add(table.get("inactiveCaption"));
        defaults.add("InternalFrame.inactiveTitleForeground");
        defaults.add(table.get("inactiveCaptionText"));
        defaults.add("InternalFrame.windowBindings");
        defaults.add(new Object[] { "shift ESCAPE", "showSystemMenu", "ctrl SPACE", "showSystemMenu", "ESCAPE", "hideSystemMenu" });
        defaults.add("InternalFrameTitlePane.iconifyButtonOpacity");
        defaults.add(Boolean.TRUE);
        defaults.add("InternalFrameTitlePane.maximizeButtonOpacity");
        defaults.add(Boolean.TRUE);
        defaults.add("InternalFrameTitlePane.closeButtonOpacity");
        defaults.add(Boolean.TRUE);
        defaults.add("DesktopIcon.border");
        defaults.add(internalFrameBorder);
        defaults.add("Desktop.minOnScreenInsets");
        defaults.add(threeInsets);
        defaults.add("Desktop.background");
        defaults.add(table.get("desktop"));
        defaults.add("Desktop.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl F5", "restore", "ctrl F4", "close", "ctrl F7", "move", "ctrl F8", "resize", "RIGHT", "right", "KP_RIGHT", "right", "shift RIGHT", "shrinkRight", "shift KP_RIGHT", "shrinkRight", "LEFT", "left", "KP_LEFT", "left", "shift LEFT", "shrinkLeft", "shift KP_LEFT", "shrinkLeft", "UP", "up", "KP_UP", "up", "shift UP", "shrinkUp", "shift KP_UP", "shrinkUp", "DOWN", "down", "KP_DOWN", "down", "shift DOWN", "shrinkDown", "shift KP_DOWN", "shrinkDown", "ESCAPE", "escape", "ctrl F9", "minimize", "ctrl F10", "maximize", "ctrl F6", "selectNextFrame", "ctrl TAB", "selectNextFrame", "ctrl alt F6", "selectNextFrame", "shift ctrl alt F6", "selectPreviousFrame", "ctrl F12", "navigateNext", "shift ctrl F12", "navigatePrevious" }));
        defaults.add("Label.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Label.background");
        defaults.add(control);
        defaults.add("Label.foreground");
        defaults.add(controlText);
        defaults.add("Label.disabledForeground");
        defaults.add(white);
        defaults.add("Label.disabledShadow");
        defaults.add(controlShadow);
        defaults.add("Label.border");
        defaults.add(null);
        defaults.add("List.font");
        defaults.add(dialogPlainDefault);
        defaults.add("List.background");
        defaults.add(window);
        defaults.add("List.foreground");
        defaults.add(textText);
        defaults.add("List.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("List.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("List.focusCellHighlightBorder");
        defaults.add(focusCellHighlightBorder);
        defaults.add("List.cellNoFocusBorder");
        defaults.add(cellNoFocusBorder);
        defaults.add("List.dropLineColor");
        defaults.add(controlShadow);
        defaults.add("List.border");
        defaults.add(null);
        defaults.add("List.cellRenderer");
        defaults.add(listCellRendererActiveValue);
        defaults.add("List.timeFactor");
        defaults.add(oneThousand);
        defaults.add("List.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl C", "copy", "ctrl V", "paste", "ctrl X", "cut", "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "HOME", "selectFirstRow", "shift HOME", "selectFirstRowExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRowChangeLead", "END", "selectLastRow", "shift END", "selectLastRowExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRowChangeLead", "PAGE_UP", "scrollUp", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDown", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo" }));
        defaults.add("List.focusInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "LEFT", "selectNextColumn", "KP_LEFT", "selectNextColumn", "shift LEFT", "selectNextColumnExtendSelection", "shift KP_LEFT", "selectNextColumnExtendSelection", "ctrl shift LEFT", "selectNextColumnExtendSelection", "ctrl shift KP_LEFT", "selectNextColumnExtendSelection", "ctrl LEFT", "selectNextColumnChangeLead", "ctrl KP_LEFT", "selectNextColumnChangeLead", "RIGHT", "selectPreviousColumn", "KP_RIGHT", "selectPreviousColumn", "shift RIGHT", "selectPreviousColumnExtendSelection", "shift KP_RIGHT", "selectPreviousColumnExtendSelection", "ctrl shift RIGHT", "selectPreviousColumnExtendSelection", "ctrl shift KP_RIGHT", "selectPreviousColumnExtendSelection", "ctrl RIGHT", "selectPreviousColumnChangeLead", "ctrl KP_RIGHT", "selectPreviousColumnChangeLead" }));
        defaults.add("MenuBar.font");
        defaults.add(dialogPlainDefault);
        defaults.add("MenuBar.background");
        defaults.add(menu);
        defaults.add("MenuBar.foreground");
        defaults.add(menuText);
        defaults.add("MenuBar.shadow");
        defaults.add(controlShadow);
        defaults.add("MenuBar.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("MenuBar.border");
        defaults.add(menuBarBorder);
        defaults.add("MenuBar.windowBindings");
        defaults.add(new Object[] { "F10", "takeFocus" });
        defaults.add("MenuItem.font");
        defaults.add(dialogPlainDefault);
        defaults.add("MenuItem.acceleratorFont");
        defaults.add(dialogPlainDefault);
        defaults.add("MenuItem.background");
        defaults.add(menu);
        defaults.add("MenuItem.foreground");
        defaults.add(menuText);
        defaults.add("MenuItem.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("MenuItem.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("MenuItem.disabledForeground");
        defaults.add(null);
        defaults.add("MenuItem.acceleratorForeground");
        defaults.add(menuText);
        defaults.add("MenuItem.acceleratorSelectionForeground");
        defaults.add(textHighlightText);
        defaults.add("MenuItem.acceleratorDelimiter");
        defaults.add(menuItemAcceleratorDelimiter);
        defaults.add("MenuItem.border");
        defaults.add(marginBorder);
        defaults.add("MenuItem.borderPainted");
        defaults.add(Boolean.FALSE);
        defaults.add("MenuItem.margin");
        defaults.add(twoInsets);
        defaults.add("MenuItem.checkIcon");
        defaults.add(menuItemCheckIcon);
        defaults.add("MenuItem.arrowIcon");
        defaults.add(menuItemArrowIcon);
        defaults.add("MenuItem.commandSound");
        defaults.add(null);
        defaults.add("RadioButtonMenuItem.font");
        defaults.add(dialogPlainDefault);
        defaults.add("RadioButtonMenuItem.acceleratorFont");
        defaults.add(dialogPlainDefault);
        defaults.add("RadioButtonMenuItem.background");
        defaults.add(menu);
        defaults.add("RadioButtonMenuItem.foreground");
        defaults.add(menuText);
        defaults.add("RadioButtonMenuItem.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("RadioButtonMenuItem.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("RadioButtonMenuItem.disabledForeground");
        defaults.add(null);
        defaults.add("RadioButtonMenuItem.acceleratorForeground");
        defaults.add(menuText);
        defaults.add("RadioButtonMenuItem.acceleratorSelectionForeground");
        defaults.add(textHighlightText);
        defaults.add("RadioButtonMenuItem.border");
        defaults.add(marginBorder);
        defaults.add("RadioButtonMenuItem.borderPainted");
        defaults.add(Boolean.FALSE);
        defaults.add("RadioButtonMenuItem.margin");
        defaults.add(twoInsets);
        defaults.add("RadioButtonMenuItem.checkIcon");
        defaults.add(radioButtonMenuItemIcon);
        defaults.add("RadioButtonMenuItem.arrowIcon");
        defaults.add(menuItemArrowIcon);
        defaults.add("RadioButtonMenuItem.commandSound");
        defaults.add(null);
        defaults.add("CheckBoxMenuItem.font");
        defaults.add(dialogPlainDefault);
        defaults.add("CheckBoxMenuItem.acceleratorFont");
        defaults.add(dialogPlainDefault);
        defaults.add("CheckBoxMenuItem.background");
        defaults.add(menu);
        defaults.add("CheckBoxMenuItem.foreground");
        defaults.add(menuText);
        defaults.add("CheckBoxMenuItem.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("CheckBoxMenuItem.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("CheckBoxMenuItem.disabledForeground");
        defaults.add(null);
        defaults.add("CheckBoxMenuItem.acceleratorForeground");
        defaults.add(menuText);
        defaults.add("CheckBoxMenuItem.acceleratorSelectionForeground");
        defaults.add(textHighlightText);
        defaults.add("CheckBoxMenuItem.border");
        defaults.add(marginBorder);
        defaults.add("CheckBoxMenuItem.borderPainted");
        defaults.add(Boolean.FALSE);
        defaults.add("CheckBoxMenuItem.margin");
        defaults.add(twoInsets);
        defaults.add("CheckBoxMenuItem.checkIcon");
        defaults.add(checkBoxMenuItemIcon);
        defaults.add("CheckBoxMenuItem.arrowIcon");
        defaults.add(menuItemArrowIcon);
        defaults.add("CheckBoxMenuItem.commandSound");
        defaults.add(null);
        defaults.add("Menu.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Menu.acceleratorFont");
        defaults.add(dialogPlainDefault);
        defaults.add("Menu.background");
        defaults.add(menu);
        defaults.add("Menu.foreground");
        defaults.add(menuText);
        defaults.add("Menu.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("Menu.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("Menu.disabledForeground");
        defaults.add(null);
        defaults.add("Menu.acceleratorForeground");
        defaults.add(menuText);
        defaults.add("Menu.acceleratorSelectionForeground");
        defaults.add(textHighlightText);
        defaults.add("Menu.border");
        defaults.add(marginBorder);
        defaults.add("Menu.borderPainted");
        defaults.add(Boolean.FALSE);
        defaults.add("Menu.margin");
        defaults.add(twoInsets);
        defaults.add("Menu.checkIcon");
        defaults.add(menuItemCheckIcon);
        defaults.add("Menu.arrowIcon");
        defaults.add(menuArrowIcon);
        defaults.add("Menu.menuPopupOffsetX");
        defaults.add(new Integer(0));
        defaults.add("Menu.menuPopupOffsetY");
        defaults.add(new Integer(0));
        defaults.add("Menu.submenuPopupOffsetX");
        defaults.add(new Integer(0));
        defaults.add("Menu.submenuPopupOffsetY");
        defaults.add(new Integer(0));
        defaults.add("Menu.shortcutKeys");
        defaults.add(new int[] { KeyEvent.ALT_MASK });
        defaults.add("Menu.crossMenuMnemonic");
        defaults.add(Boolean.TRUE);
        defaults.add("PopupMenu.font");
        defaults.add(dialogPlainDefault);
        defaults.add("PopupMenu.background");
        defaults.add(menu);
        defaults.add("PopupMenu.foreground");
        defaults.add(menuText);
        defaults.add("PopupMenu.border");
        defaults.add(popupMenuBorder);
        defaults.add("PopupMenu.popupSound");
        defaults.add(null);
        defaults.add("PopupMenu.selectedWindowInputMapBindings");
        defaults.add(new Object[] { "ESCAPE", "cancel", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "LEFT", "selectParent", "KP_LEFT", "selectParent", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "ENTER", "return", "ctrl ENTER", "return", "SPACE", "return" });
        defaults.add("PopupMenu.selectedWindowInputMapBindings.RightToLeft");
        defaults.add(new Object[] { "LEFT", "selectChild", "KP_LEFT", "selectChild", "RIGHT", "selectParent", "KP_RIGHT", "selectParent" });
        defaults.add("PopupMenu.consumeEventOnClose");
        defaults.add(Boolean.FALSE);
        defaults.add("OptionPane.font");
        defaults.add(dialogPlainDefault);
        defaults.add("OptionPane.background");
        defaults.add(control);
        defaults.add("OptionPane.foreground");
        defaults.add(controlText);
        defaults.add("OptionPane.messageForeground");
        defaults.add(controlText);
        defaults.add("OptionPane.border");
        defaults.add(optionPaneBorder);
        defaults.add("OptionPane.messageAreaBorder");
        defaults.add(zeroBorder);
        defaults.add("OptionPane.buttonAreaBorder");
        defaults.add(optionPaneButtonAreaBorder);
        defaults.add("OptionPane.minimumSize");
        defaults.add(optionPaneMinimumSize);
        defaults.add("OptionPane.errorIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Error.gif"));
        defaults.add("OptionPane.informationIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Inform.gif"));
        defaults.add("OptionPane.warningIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Warn.gif"));
        defaults.add("OptionPane.questionIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/Question.gif"));
        defaults.add("OptionPane.windowBindings");
        defaults.add(new Object[] { "ESCAPE", "close" });
        defaults.add("OptionPane.errorSound");
        defaults.add(null);
        defaults.add("OptionPane.informationSound");
        defaults.add(null);
        defaults.add("OptionPane.questionSound");
        defaults.add(null);
        defaults.add("OptionPane.warningSound");
        defaults.add(null);
        defaults.add("OptionPane.buttonClickThreshhold");
        defaults.add(fiveHundred);
        defaults.add("Panel.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Panel.background");
        defaults.add(control);
        defaults.add("Panel.foreground");
        defaults.add(textText);
        defaults.add("ProgressBar.font");
        defaults.add(dialogPlainDefault);
        defaults.add("ProgressBar.foreground");
        defaults.add(textHighlight);
        defaults.add("ProgressBar.background");
        defaults.add(control);
        defaults.add("ProgressBar.selectionForeground");
        defaults.add(control);
        defaults.add("ProgressBar.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("ProgressBar.border");
        defaults.add(progressBarBorder);
        defaults.add("ProgressBar.cellLength");
        defaults.add(new Integer(1));
        defaults.add("ProgressBar.cellSpacing");
        defaults.add(zero);
        defaults.add("ProgressBar.repaintInterval");
        defaults.add(new Integer(50));
        defaults.add("ProgressBar.cycleTime");
        defaults.add(new Integer(3000));
        defaults.add("ProgressBar.horizontalSize");
        defaults.add(new DimensionUIResource(146, 12));
        defaults.add("ProgressBar.verticalSize");
        defaults.add(new DimensionUIResource(12, 146));
        defaults.add("Separator.shadow");
        defaults.add(controlShadow);
        defaults.add("Separator.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("Separator.background");
        defaults.add(controlLtHighlight);
        defaults.add("Separator.foreground");
        defaults.add(controlShadow);
        defaults.add("ScrollBar.background");
        defaults.add(scrollBarTrack);
        defaults.add("ScrollBar.foreground");
        defaults.add(control);
        defaults.add("ScrollBar.track");
        defaults.add(table.get("scrollbar"));
        defaults.add("ScrollBar.trackHighlight");
        defaults.add(controlDkShadow);
        defaults.add("ScrollBar.thumb");
        defaults.add(control);
        defaults.add("ScrollBar.thumbHighlight");
        defaults.add(controlLtHighlight);
        defaults.add("ScrollBar.thumbDarkShadow");
        defaults.add(controlDkShadow);
        defaults.add("ScrollBar.thumbShadow");
        defaults.add(controlShadow);
        defaults.add("ScrollBar.border");
        defaults.add(null);
        defaults.add("ScrollBar.minimumThumbSize");
        defaults.add(minimumThumbSize);
        defaults.add("ScrollBar.maximumThumbSize");
        defaults.add(maximumThumbSize);
        defaults.add("ScrollBar.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "positiveUnitIncrement", "KP_DOWN", "positiveUnitIncrement", "PAGE_DOWN", "positiveBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "negativeUnitIncrement", "KP_UP", "negativeUnitIncrement", "PAGE_UP", "negativeBlockIncrement", "HOME", "minScroll", "END", "maxScroll" }));
        defaults.add("ScrollBar.ancestorInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "negativeUnitIncrement", "KP_RIGHT", "negativeUnitIncrement", "LEFT", "positiveUnitIncrement", "KP_LEFT", "positiveUnitIncrement" }));
        defaults.add("ScrollBar.width");
        defaults.add(new Integer(20));
        defaults.add("ScrollPane.font");
        defaults.add(dialogPlainDefault);
        defaults.add("ScrollPane.background");
        defaults.add(control);
        defaults.add("ScrollPane.foreground");
        defaults.add(controlText);
        defaults.add("ScrollPane.border");
        defaults.add(textFieldBorder);
        defaults.add("ScrollPane.viewportBorder");
        defaults.add(null);
        defaults.add("ScrollPane.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "unitScrollRight", "KP_RIGHT", "unitScrollRight", "DOWN", "unitScrollDown", "KP_DOWN", "unitScrollDown", "LEFT", "unitScrollLeft", "KP_LEFT", "unitScrollLeft", "UP", "unitScrollUp", "KP_UP", "unitScrollUp", "PAGE_UP", "scrollUp", "PAGE_DOWN", "scrollDown", "ctrl PAGE_UP", "scrollLeft", "ctrl PAGE_DOWN", "scrollRight", "ctrl HOME", "scrollHome", "ctrl END", "scrollEnd" }));
        defaults.add("ScrollPane.ancestorInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl PAGE_UP", "scrollRight", "ctrl PAGE_DOWN", "scrollLeft" }));
        defaults.add("Viewport.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Viewport.background");
        defaults.add(control);
        defaults.add("Viewport.foreground");
        defaults.add(textText);
        defaults.add("Slider.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Slider.foreground");
        defaults.add(control);
        defaults.add("Slider.background");
        defaults.add(control);
        defaults.add("Slider.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("Slider.tickColor");
        defaults.add(Color.black);
        defaults.add("Slider.shadow");
        defaults.add(controlShadow);
        defaults.add("Slider.focus");
        defaults.add(controlDkShadow);
        defaults.add("Slider.border");
        defaults.add(null);
        defaults.add("Slider.horizontalSize");
        defaults.add(new Dimension(200, 21));
        defaults.add("Slider.verticalSize");
        defaults.add(new Dimension(21, 200));
        defaults.add("Slider.minimumHorizontalSize");
        defaults.add(new Dimension(36, 21));
        defaults.add("Slider.minimumVerticalSize");
        defaults.add(new Dimension(21, 36));
        defaults.add("Slider.focusInsets");
        defaults.add(sliderFocusInsets);
        defaults.add("Slider.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "negativeUnitIncrement", "KP_DOWN", "negativeUnitIncrement", "PAGE_DOWN", "negativeBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "positiveUnitIncrement", "KP_UP", "positiveUnitIncrement", "PAGE_UP", "positiveBlockIncrement", "HOME", "minScroll", "END", "maxScroll" }));
        defaults.add("Slider.focusInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "negativeUnitIncrement", "KP_RIGHT", "negativeUnitIncrement", "LEFT", "positiveUnitIncrement", "KP_LEFT", "positiveUnitIncrement" }));
        defaults.add("Spinner.font");
        defaults.add(monospacedPlainDefault);
        defaults.add("Spinner.background");
        defaults.add(control);
        defaults.add("Spinner.foreground");
        defaults.add(control);
        defaults.add("Spinner.border");
        defaults.add(textFieldBorder);
        defaults.add("Spinner.arrowButtonBorder");
        defaults.add(null);
        defaults.add("Spinner.arrowButtonInsets");
        defaults.add(null);
        defaults.add("Spinner.arrowButtonSize");
        defaults.add(new Dimension(16, 5));
        defaults.add("Spinner.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement" }));
        defaults.add("Spinner.editorBorderPainted");
        defaults.add(Boolean.FALSE);
        defaults.add("Spinner.editorAlignment");
        defaults.add(JTextField.TRAILING);
        defaults.add("SplitPane.background");
        defaults.add(control);
        defaults.add("SplitPane.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("SplitPane.shadow");
        defaults.add(controlShadow);
        defaults.add("SplitPane.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("SplitPane.border");
        defaults.add(splitPaneBorder);
        defaults.add("SplitPane.dividerSize");
        defaults.add(new Integer(7));
        defaults.add("SplitPaneDivider.border");
        defaults.add(splitPaneDividerBorder);
        defaults.add("SplitPaneDivider.draggingColor");
        defaults.add(darkGray);
        defaults.add("SplitPane.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "UP", "negativeIncrement", "DOWN", "positiveIncrement", "LEFT", "negativeIncrement", "RIGHT", "positiveIncrement", "KP_UP", "negativeIncrement", "KP_DOWN", "positiveIncrement", "KP_LEFT", "negativeIncrement", "KP_RIGHT", "positiveIncrement", "HOME", "selectMin", "END", "selectMax", "F8", "startResize", "F6", "toggleFocus", "ctrl TAB", "focusOutForward", "ctrl shift TAB", "focusOutBackward" }));
        defaults.add("TabbedPane.font");
        defaults.add(dialogPlainDefault);
        defaults.add("TabbedPane.background");
        defaults.add(control);
        defaults.add("TabbedPane.foreground");
        defaults.add(controlText);
        defaults.add("TabbedPane.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("TabbedPane.light");
        defaults.add(controlHighlight);
        defaults.add("TabbedPane.shadow");
        defaults.add(controlShadow);
        defaults.add("TabbedPane.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("TabbedPane.selected");
        defaults.add(null);
        defaults.add("TabbedPane.focus");
        defaults.add(controlText);
        defaults.add("TabbedPane.textIconGap");
        defaults.add(four);
        defaults.add("TabbedPane.tabsOverlapBorder");
        defaults.add(Boolean.FALSE);
        defaults.add("TabbedPane.tabInsets");
        defaults.add(tabbedPaneTabInsets);
        defaults.add("TabbedPane.selectedTabPadInsets");
        defaults.add(tabbedPaneTabPadInsets);
        defaults.add("TabbedPane.tabAreaInsets");
        defaults.add(tabbedPaneTabAreaInsets);
        defaults.add("TabbedPane.contentBorderInsets");
        defaults.add(tabbedPaneContentBorderInsets);
        defaults.add("TabbedPane.tabRunOverlay");
        defaults.add(new Integer(2));
        defaults.add("TabbedPane.tabsOpaque");
        defaults.add(Boolean.TRUE);
        defaults.add("TabbedPane.contentOpaque");
        defaults.add(Boolean.TRUE);
        defaults.add("TabbedPane.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "ctrl DOWN", "requestFocusForVisibleComponent", "ctrl KP_DOWN", "requestFocusForVisibleComponent" }));
        defaults.add("TabbedPane.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl PAGE_DOWN", "navigatePageDown", "ctrl PAGE_UP", "navigatePageUp", "ctrl UP", "requestFocus", "ctrl KP_UP", "requestFocus" }));
        defaults.add("Table.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Table.foreground");
        defaults.add(controlText);
        defaults.add("Table.background");
        defaults.add(window);
        defaults.add("Table.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("Table.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("Table.dropLineColor");
        defaults.add(controlShadow);
        defaults.add("Table.dropLineShortColor");
        defaults.add(black);
        defaults.add("Table.gridColor");
        defaults.add(gray);
        defaults.add("Table.focusCellBackground");
        defaults.add(window);
        defaults.add("Table.focusCellForeground");
        defaults.add(controlText);
        defaults.add("Table.focusCellHighlightBorder");
        defaults.add(focusCellHighlightBorder);
        defaults.add("Table.cellNoFocusBorder");
        defaults.add(cellNoFocusBorder);
        defaults.add("Table.scrollPaneBorder");
        defaults.add(loweredBevelBorder);
        defaults.add("Table.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl C", "copy", "ctrl V", "paste", "ctrl X", "cut", "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "HOME", "selectFirstColumn", "shift HOME", "selectFirstColumnExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRow", "END", "selectLastColumn", "shift END", "selectLastColumnExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRow", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollLeftExtendSelection", "ctrl PAGE_UP", "scrollLeftChangeSelection", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollRightExtendSelection", "ctrl PAGE_DOWN", "scrollRightChangeSelection", "TAB", "selectNextColumnCell", "shift TAB", "selectPreviousColumnCell", "ENTER", "selectNextRowCell", "shift ENTER", "selectPreviousRowCell", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ESCAPE", "cancel", "F2", "startEditing", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo", "F8", "focusHeader" }));
        defaults.add("Table.ancestorInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "selectPreviousColumn", "KP_RIGHT", "selectPreviousColumn", "shift RIGHT", "selectPreviousColumnExtendSelection", "shift KP_RIGHT", "selectPreviousColumnExtendSelection", "ctrl shift RIGHT", "selectPreviousColumnExtendSelection", "ctrl shift KP_RIGHT", "selectPreviousColumnExtendSelection", "shift RIGHT", "selectPreviousColumnChangeLead", "shift KP_RIGHT", "selectPreviousColumnChangeLead", "LEFT", "selectNextColumn", "KP_LEFT", "selectNextColumn", "shift LEFT", "selectNextColumnExtendSelection", "shift KP_LEFT", "selectNextColumnExtendSelection", "ctrl shift LEFT", "selectNextColumnExtendSelection", "ctrl shift KP_LEFT", "selectNextColumnExtendSelection", "ctrl LEFT", "selectNextColumnChangeLead", "ctrl KP_LEFT", "selectNextColumnChangeLead", "ctrl PAGE_UP", "scrollRightChangeSelection", "ctrl PAGE_DOWN", "scrollLeftChangeSelection", "ctrl shift PAGE_UP", "scrollRightExtendSelection", "ctrl shift PAGE_DOWN", "scrollLeftExtendSelection" }));
        defaults.add("Table.ascendingSortIcon");
        defaults.add(new SwingLazyValue("sun.swing.icon.SortArrowIcon", null, new Object[] { Boolean.TRUE, "Table.sortIconColor" }));
        defaults.add("Table.descendingSortIcon");
        defaults.add(new SwingLazyValue("sun.swing.icon.SortArrowIcon", null, new Object[] { Boolean.FALSE, "Table.sortIconColor" }));
        defaults.add("Table.sortIconColor");
        defaults.add(controlShadow);
        defaults.add("TableHeader.font");
        defaults.add(dialogPlainDefault);
        defaults.add("TableHeader.foreground");
        defaults.add(controlText);
        defaults.add("TableHeader.background");
        defaults.add(control);
        defaults.add("TableHeader.cellBorder");
        defaults.add(tableHeaderBorder);
        defaults.add("TableHeader.focusCellBackground");
        defaults.add(table.getColor("text"));
        defaults.add("TableHeader.focusCellForeground");
        defaults.add(null);
        defaults.add("TableHeader.focusCellBorder");
        defaults.add(null);
        defaults.add("TableHeader.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "SPACE", "toggleSortOrder", "LEFT", "selectColumnToLeft", "KP_LEFT", "selectColumnToLeft", "RIGHT", "selectColumnToRight", "KP_RIGHT", "selectColumnToRight", "alt LEFT", "moveColumnLeft", "alt KP_LEFT", "moveColumnLeft", "alt RIGHT", "moveColumnRight", "alt KP_RIGHT", "moveColumnRight", "alt shift LEFT", "resizeLeft", "alt shift KP_LEFT", "resizeLeft", "alt shift RIGHT", "resizeRight", "alt shift KP_RIGHT", "resizeRight", "ESCAPE", "focusTable" }));
        defaults.add("TextField.font");
        defaults.add(sansSerifPlainDefault);
        defaults.add("TextField.background");
        defaults.add(window);
        defaults.add("TextField.foreground");
        defaults.add(textText);
        defaults.add("TextField.shadow");
        defaults.add(controlShadow);
        defaults.add("TextField.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("TextField.light");
        defaults.add(controlHighlight);
        defaults.add("TextField.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("TextField.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("TextField.inactiveBackground");
        defaults.add(control);
        defaults.add("TextField.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("TextField.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("TextField.caretForeground");
        defaults.add(textText);
        defaults.add("TextField.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("TextField.border");
        defaults.add(textFieldBorder);
        defaults.add("TextField.margin");
        defaults.add(zeroInsets);
        defaults.add("FormattedTextField.font");
        defaults.add(sansSerifPlainDefault);
        defaults.add("FormattedTextField.background");
        defaults.add(window);
        defaults.add("FormattedTextField.foreground");
        defaults.add(textText);
        defaults.add("FormattedTextField.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("FormattedTextField.inactiveBackground");
        defaults.add(control);
        defaults.add("FormattedTextField.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("FormattedTextField.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("FormattedTextField.caretForeground");
        defaults.add(textText);
        defaults.add("FormattedTextField.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("FormattedTextField.border");
        defaults.add(textFieldBorder);
        defaults.add("FormattedTextField.margin");
        defaults.add(zeroInsets);
        defaults.add("FormattedTextField.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl C", DefaultEditorKit.copyAction, "ctrl V", DefaultEditorKit.pasteAction, "ctrl X", DefaultEditorKit.cutAction, "COPY", DefaultEditorKit.copyAction, "PASTE", DefaultEditorKit.pasteAction, "CUT", DefaultEditorKit.cutAction, "control INSERT", DefaultEditorKit.copyAction, "shift INSERT", DefaultEditorKit.pasteAction, "shift DELETE", DefaultEditorKit.cutAction, "shift LEFT", DefaultEditorKit.selectionBackwardAction, "shift KP_LEFT", DefaultEditorKit.selectionBackwardAction, "shift RIGHT", DefaultEditorKit.selectionForwardAction, "shift KP_RIGHT", DefaultEditorKit.selectionForwardAction, "ctrl LEFT", DefaultEditorKit.previousWordAction, "ctrl KP_LEFT", DefaultEditorKit.previousWordAction, "ctrl RIGHT", DefaultEditorKit.nextWordAction, "ctrl KP_RIGHT", DefaultEditorKit.nextWordAction, "ctrl shift LEFT", DefaultEditorKit.selectionPreviousWordAction, "ctrl shift KP_LEFT", DefaultEditorKit.selectionPreviousWordAction, "ctrl shift RIGHT", DefaultEditorKit.selectionNextWordAction, "ctrl shift KP_RIGHT", DefaultEditorKit.selectionNextWordAction, "ctrl A", DefaultEditorKit.selectAllAction, "HOME", DefaultEditorKit.beginLineAction, "END", DefaultEditorKit.endLineAction, "shift HOME", DefaultEditorKit.selectionBeginLineAction, "shift END", DefaultEditorKit.selectionEndLineAction, "BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "shift BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "ctrl H", DefaultEditorKit.deletePrevCharAction, "DELETE", DefaultEditorKit.deleteNextCharAction, "ctrl DELETE", DefaultEditorKit.deleteNextWordAction, "ctrl BACK_SPACE", DefaultEditorKit.deletePrevWordAction, "RIGHT", DefaultEditorKit.forwardAction, "LEFT", DefaultEditorKit.backwardAction, "KP_RIGHT", DefaultEditorKit.forwardAction, "KP_LEFT", DefaultEditorKit.backwardAction, "ENTER", JTextField.notifyAction, "ctrl BACK_SLASH", "unselect", "control shift O", "toggle-componentOrientation", "ESCAPE", "reset-field-edit", "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement" }));
        defaults.add("PasswordField.font");
        defaults.add(monospacedPlainDefault);
        defaults.add("PasswordField.background");
        defaults.add(window);
        defaults.add("PasswordField.foreground");
        defaults.add(textText);
        defaults.add("PasswordField.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("PasswordField.inactiveBackground");
        defaults.add(control);
        defaults.add("PasswordField.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("PasswordField.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("PasswordField.caretForeground");
        defaults.add(textText);
        defaults.add("PasswordField.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("PasswordField.border");
        defaults.add(textFieldBorder);
        defaults.add("PasswordField.margin");
        defaults.add(zeroInsets);
        defaults.add("PasswordField.echoChar");
        defaults.add('*');
        defaults.add("TextArea.font");
        defaults.add(monospacedPlainDefault);
        defaults.add("TextArea.background");
        defaults.add(window);
        defaults.add("TextArea.foreground");
        defaults.add(textText);
        defaults.add("TextArea.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("TextArea.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("TextArea.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("TextArea.caretForeground");
        defaults.add(textText);
        defaults.add("TextArea.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("TextArea.border");
        defaults.add(marginBorder);
        defaults.add("TextArea.margin");
        defaults.add(zeroInsets);
        defaults.add("TextPane.font");
        defaults.add(serifPlainDefault);
        defaults.add("TextPane.background");
        defaults.add(white);
        defaults.add("TextPane.foreground");
        defaults.add(textText);
        defaults.add("TextPane.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("TextPane.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("TextPane.caretForeground");
        defaults.add(textText);
        defaults.add("TextPane.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("TextPane.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("TextPane.border");
        defaults.add(marginBorder);
        defaults.add("TextPane.margin");
        defaults.add(editorMargin);
        defaults.add("EditorPane.font");
        defaults.add(serifPlainDefault);
        defaults.add("EditorPane.background");
        defaults.add(white);
        defaults.add("EditorPane.foreground");
        defaults.add(textText);
        defaults.add("EditorPane.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("EditorPane.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("EditorPane.caretForeground");
        defaults.add(textText);
        defaults.add("EditorPane.caretBlinkRate");
        defaults.add(caretBlinkRate);
        defaults.add("EditorPane.inactiveForeground");
        defaults.add(textInactiveText);
        defaults.add("EditorPane.border");
        defaults.add(marginBorder);
        defaults.add("EditorPane.margin");
        defaults.add(editorMargin);
        defaults.add("html.pendingImage");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/image-delayed.png"));
        defaults.add("html.missingImage");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/image-failed.png"));
        defaults.add("TitledBorder.font");
        defaults.add(dialogPlainDefault);
        defaults.add("TitledBorder.titleColor");
        defaults.add(controlText);
        defaults.add("TitledBorder.border");
        defaults.add(etchedBorder);
        defaults.add("ToolBar.font");
        defaults.add(dialogPlainDefault);
        defaults.add("ToolBar.background");
        defaults.add(control);
        defaults.add("ToolBar.foreground");
        defaults.add(controlText);
        defaults.add("ToolBar.shadow");
        defaults.add(controlShadow);
        defaults.add("ToolBar.darkShadow");
        defaults.add(controlDkShadow);
        defaults.add("ToolBar.light");
        defaults.add(controlHighlight);
        defaults.add("ToolBar.highlight");
        defaults.add(controlLtHighlight);
        defaults.add("ToolBar.dockingBackground");
        defaults.add(control);
        defaults.add("ToolBar.dockingForeground");
        defaults.add(red);
        defaults.add("ToolBar.floatingBackground");
        defaults.add(control);
        defaults.add("ToolBar.floatingForeground");
        defaults.add(darkGray);
        defaults.add("ToolBar.border");
        defaults.add(etchedBorder);
        defaults.add("ToolBar.separatorSize");
        defaults.add(toolBarSeparatorSize);
        defaults.add("ToolBar.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight" }));
        defaults.add("ToolTip.font");
        defaults.add(sansSerifPlainDefault);
        defaults.add("ToolTip.background");
        defaults.add(table.get("info"));
        defaults.add("ToolTip.foreground");
        defaults.add(table.get("infoText"));
        defaults.add("ToolTip.border");
        defaults.add(blackLineBorder);
        defaults.add("ToolTipManager.enableToolTipMode");
        defaults.add("allWindows");
        defaults.add("Tree.paintLines");
        defaults.add(Boolean.TRUE);
        defaults.add("Tree.lineTypeDashed");
        defaults.add(Boolean.FALSE);
        defaults.add("Tree.font");
        defaults.add(dialogPlainDefault);
        defaults.add("Tree.background");
        defaults.add(window);
        defaults.add("Tree.foreground");
        defaults.add(textText);
        defaults.add("Tree.hash");
        defaults.add(gray);
        defaults.add("Tree.textForeground");
        defaults.add(textText);
        defaults.add("Tree.textBackground");
        defaults.add(table.get("text"));
        defaults.add("Tree.selectionForeground");
        defaults.add(textHighlightText);
        defaults.add("Tree.selectionBackground");
        defaults.add(textHighlight);
        defaults.add("Tree.selectionBorderColor");
        defaults.add(black);
        defaults.add("Tree.dropLineColor");
        defaults.add(controlShadow);
        defaults.add("Tree.editorBorder");
        defaults.add(blackLineBorder);
        defaults.add("Tree.leftChildIndent");
        defaults.add(new Integer(7));
        defaults.add("Tree.rightChildIndent");
        defaults.add(new Integer(13));
        defaults.add("Tree.rowHeight");
        defaults.add(new Integer(16));
        defaults.add("Tree.scrollsOnExpand");
        defaults.add(Boolean.TRUE);
        defaults.add("Tree.openIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/TreeOpen.gif"));
        defaults.add("Tree.closedIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/TreeClosed.gif"));
        defaults.add("Tree.leafIcon");
        defaults.add(SwingUtilities2.makeIcon(getClass(), BasicLookAndFeel.class, "icons/TreeLeaf.gif"));
        defaults.add("Tree.expandedIcon");
        defaults.add(null);
        defaults.add("Tree.collapsedIcon");
        defaults.add(null);
        defaults.add("Tree.changeSelectionWithFocus");
        defaults.add(Boolean.TRUE);
        defaults.add("Tree.drawsFocusBorderAroundIcon");
        defaults.add(Boolean.FALSE);
        defaults.add("Tree.timeFactor");
        defaults.add(oneThousand);
        defaults.add("Tree.focusInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ctrl C", "copy", "ctrl V", "paste", "ctrl X", "cut", "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPrevious", "KP_UP", "selectPrevious", "shift UP", "selectPreviousExtendSelection", "shift KP_UP", "selectPreviousExtendSelection", "ctrl shift UP", "selectPreviousExtendSelection", "ctrl shift KP_UP", "selectPreviousExtendSelection", "ctrl UP", "selectPreviousChangeLead", "ctrl KP_UP", "selectPreviousChangeLead", "DOWN", "selectNext", "KP_DOWN", "selectNext", "shift DOWN", "selectNextExtendSelection", "shift KP_DOWN", "selectNextExtendSelection", "ctrl shift DOWN", "selectNextExtendSelection", "ctrl shift KP_DOWN", "selectNextExtendSelection", "ctrl DOWN", "selectNextChangeLead", "ctrl KP_DOWN", "selectNextChangeLead", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "LEFT", "selectParent", "KP_LEFT", "selectParent", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "HOME", "selectFirst", "shift HOME", "selectFirstExtendSelection", "ctrl shift HOME", "selectFirstExtendSelection", "ctrl HOME", "selectFirstChangeLead", "END", "selectLast", "shift END", "selectLastExtendSelection", "ctrl shift END", "selectLastExtendSelection", "ctrl END", "selectLastChangeLead", "F2", "startEditing", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ctrl LEFT", "scrollLeft", "ctrl KP_LEFT", "scrollLeft", "ctrl RIGHT", "scrollRight", "ctrl KP_RIGHT", "scrollRight", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo" }));
        defaults.add("Tree.focusInputMap.RightToLeft");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "selectParent", "KP_RIGHT", "selectParent", "LEFT", "selectChild", "KP_LEFT", "selectChild" }));
        defaults.add("Tree.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "cancel" }));
        defaults.add("RootPane.ancestorInputMap");
        defaults.add(new UIDefaults.LazyInputMap(new Object[] { "shift F10", "postPopup", "CONTEXT_MENU", "postPopup" }));
        defaults.add("RootPane.defaultButtonWindowKeyBindings");
        defaults.add(new Object[] { "ENTER", "press", "released ENTER", "release", "ctrl ENTER", "press", "ctrl released ENTER", "release" });
        table.putDefaults(defaults.toArray());
    }

    private void initStandardFont() {
        registerStandardFont("font/gentium/GenR102.TTF");
        registerStandardFont("font/gentium/GenI102.TTF");
    }

    private void registerStandardFont(String url) {
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(url));
            GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(font);
        } catch (Throwable xp) {
            log(Level.WARNING, xp, Text.get("Can''t register font ''{0}''.", url));
        }
    }
}
