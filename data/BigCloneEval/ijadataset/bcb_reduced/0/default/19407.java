import Plugin.chennaiEducationClass;
import Resultstat.EnterIntoDatabase;
import Resultstat.ResultSetTableModel;
import Resultstat.RetrieveFromDatabase;
import Resultstat.RetrieveSubjects;
import Resultstat.UrlInterface;
import java.awt.Desktop;
import java.sql.*;
import java.io.*;
import java.math.BigInteger;
import java.net.*;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.TableColumn;
import javax.swing.text.TableView.TableRow;

class ResultStatInput {

    /** Get URL Name **/
    static String URLName;
}

public class ResultStat extends javax.swing.JFrame {

    public Connection conn = null;

    public Connection tempConnection = null;

    public int progressValue;

    public ResultStat result = null;

    /** Creates new form ResultStat */
    public ResultStat() {
        initComponents();
        result = this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        From = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        To = new javax.swing.JTextField();
        RetriveUrl = new javax.swing.JButton();
        showDetails = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jProgressBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        Details = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        Result = new javax.swing.JButton();
        IndividualResult = new javax.swing.JButton();
        SubjectWiseFail = new javax.swing.JButton();
        SubjectWiseAverage = new javax.swing.JButton();
        SubjectWisePass = new javax.swing.JButton();
        Rank = new javax.swing.JButton();
        SubjectWiseRank = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Resultstat Retrieve Your Results");
        setName("");
        addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }

            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {}));
        jTable1.setMaximumSize(new java.awt.Dimension(500, 500));
        jTable1.setMinimumSize(new java.awt.Dimension(100, 100));
        jTable1.setRowHeight(32);
        jScrollPane2.setViewportView(jTable1);
        jPanel4.setLayout(new java.awt.GridLayout(1, 3, 8, 9));
        jPanel1.setLayout(new java.awt.GridLayout(3, 2));
        jLabel1.setText("From");
        jPanel1.add(jLabel1);
        From.setText("80706104001");
        jPanel1.add(From);
        jLabel2.setText("To");
        jPanel1.add(jLabel2);
        To.setText("80706104010");
        jPanel1.add(To);
        RetriveUrl.setText("Retrieve");
        RetriveUrl.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RetriveUrlMouseClicked(evt);
            }
        });
        jPanel1.add(RetriveUrl);
        showDetails.setText("Show Details");
        showDetails.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showDetailsMouseClicked(evt);
            }
        });
        jPanel1.add(showDetails);
        jPanel4.add(jPanel1);
        jPanel3.setLayout(new java.awt.BorderLayout());
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setEditable(false);
        jTextAreaLog.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLog);
        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        jProgressBar.setForeground(new java.awt.Color(255, 153, 0));
        jProgressBar.setName("ProgressBar");
        jPanel3.add(jProgressBar, java.awt.BorderLayout.PAGE_END);
        jPanel4.add(jPanel3);
        jPanel2.setLayout(new java.awt.GridLayout(3, 5));
        Details.setText("Details");
        Details.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DetailsMouseClicked(evt);
            }
        });
        jPanel2.add(Details);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));
        jComboBox1.setSelectedIndex(4);
        jPanel2.add(jComboBox1);
        Result.setText("Result");
        Result.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultMouseClicked(evt);
            }
        });
        jPanel2.add(Result);
        IndividualResult.setText("Individual result");
        IndividualResult.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndividualResultMouseClicked(evt);
            }
        });
        jPanel2.add(IndividualResult);
        SubjectWiseFail.setText("Subjectwise fail");
        SubjectWiseFail.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubjectWiseFailMouseClicked(evt);
            }
        });
        jPanel2.add(SubjectWiseFail);
        SubjectWiseAverage.setText("Subjectwise average");
        SubjectWiseAverage.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubjectWiseAverageMouseClicked(evt);
            }
        });
        jPanel2.add(SubjectWiseAverage);
        SubjectWisePass.setText("Subjectwise pass");
        SubjectWisePass.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubjectWisePassMouseClicked(evt);
            }
        });
        jPanel2.add(SubjectWisePass);
        Rank.setText("Rank");
        Rank.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RankMouseClicked(evt);
            }
        });
        jPanel2.add(Rank);
        SubjectWiseRank.setText("Subjectwise rank");
        SubjectWiseRank.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubjectWiseRankMouseClicked(evt);
            }
        });
        jPanel2.add(SubjectWiseRank);
        jPanel4.add(jPanel2);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE).addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 921, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(52, 52, 52).addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE).addContainerGap()));
        pack();
    }

    public void createDatabase() {
        String framework = "embedded";
        String driver = "org.apache.derby.jdbc.EmbeddedDriver";
        String protocol = "jdbc:derby:";
        Statement s = null;
        ResultSet rs = null;
        Properties props = new Properties();
        props.put("user", "suhaib");
        props.put("password", "suhaib");
        try {
            tempConnection = DriverManager.getConnection(protocol + "SubjectCodes" + ";create=true", props);
            JOptionPane.showMessageDialog(this, "Database connection established");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot connect to database server");
        }
        try {
            s = tempConnection.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            s.execute("CREATE TABLE  SubjectDetails(SubCode varchar(10) NOT NULL,SubName varchar(50) NOT NULL,Semester int NOT NULL, PRIMARY KEY  (SubCode))");
        } catch (SQLException e) {
            System.out.println("Table SubjectDetails already created");
        }
    }

    public void copyTheValues() {
        Statement s = null, s1 = null;
        ResultSet rs;
        String subcode = "", subname = "", semester = "";
        try {
            s1 = tempConnection.createStatement();
            s = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(DetailsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            rs = s1.executeQuery("SELECT * FROM SubjectDetails");
            while (rs.next()) {
                subcode = rs.getString("SubCode");
                subname = rs.getString("SubName");
                semester = rs.getString("Semester");
                s.executeUpdate("Insert into SubjectDetails values( '" + subcode + "' , '" + subname + "' ," + semester + ")");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        String framework = "embedded";
        String driver = "org.apache.derby.jdbc.EmbeddedDriver";
        String protocol = "jdbc:derby:";
        Statement s = null;
        ResultSet rs = null;
        Properties props = new Properties();
        props.put("user", "julius");
        props.put("password", "julius");
        do {
            ResultStatInput.URLName = (String) JOptionPane.showInputDialog(this, "Specify the URL to be used", "Name Required", JOptionPane.PLAIN_MESSAGE, null, null, "http://www.chennaieducation.net/results/annauniv/results.asp");
        } while (ResultStatInput.URLName.length() == 0);
        try {
            conn = DriverManager.getConnection(protocol + "ResultStat" + ";create=true", props);
            JOptionPane.showMessageDialog(this, "Database connection established");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot connect to database server");
        }
        try {
            s = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            s.execute("CREATE TABLE  MarkInfo ( RegNumber bigint NOT NULL, SubCode varchar(10) NOT NULL, Internal float NOT NULL, Extern float NOT NULL,Result varchar(10) NOT NULL,Semester int NOT NULL)");
        } catch (SQLException e) {
            System.out.println("Table MarkInfo already created");
        }
        try {
            s.execute("CREATE TABLE  StudentInfo(RegNumber bigint NOT NULL,Name varchar(50) NOT NULL, PRIMARY KEY  (RegNumber))");
        } catch (SQLException e) {
            System.out.println("Table StudentInfo already created");
        }
        createDatabase();
        try {
            s.execute("CREATE TABLE  SubjectDetails(SubCode varchar(10) NOT NULL,SubName varchar(50) NOT NULL,Semester int NOT NULL, PRIMARY KEY  (SubCode))");
            copyTheValues();
        } catch (SQLException e) {
            System.out.println("Table SubjectDetails already created");
        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
        if (conn != null) {
            try {
                DriverManager.getConnection("jdbc:derby:;shutdown=true");
            } catch (SQLException se) {
                if (((se.getErrorCode() == 50000) && ("XJ015".equals(se.getSQLState())))) {
                    System.out.println("Derby shut down normally");
                } else {
                    System.err.println("Derby did not shut down normally");
                }
            }
        }
    }

    private void RetriveUrlMouseClicked(java.awt.event.MouseEvent evt) {
        CollectData cData = new CollectData(this);
        cData.start();
    }

    private void showDetailsMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        try {
            rs = Rfd.SelecAllData();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "NAME", "NUMBER" };
        String tableColNames[] = { "RegNumber", "Name" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void ResultMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        try {
            rs = Rfd.Result();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "TOTAL", "AVERAGE", "CLEARED" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "TOTAL", "AVERAGE", "CLEARED" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void RankMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        try {
            rs = Rfd.Rank();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "TOTAL", "AVERAGE", "CLEARED" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "TOTAL", "AVERAGE", "CLEARED" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void IndividualResultMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        String rNumber = "";
        try {
            do {
                rNumber = (String) JOptionPane.showInputDialog(this, "Enter the register number", "Number Required", JOptionPane.PLAIN_MESSAGE, null, null, "80706104056");
            } while (rNumber.length() == 0);
            rs = Rfd.IndividualResult(new BigInteger(rNumber));
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "SUBCODE", "SUBNAME", "EXTERNAL", "INTERNAL", "TOTAL" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "SUBCODE", "SUBNAME", "INTERNAL", "EXTERN", "TOTAL" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void SubjectWisePassMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        String sCode = "";
        try {
            do {
                sCode = (String) JOptionPane.showInputDialog(this, "Enter the subject code", "subject code Required", JOptionPane.PLAIN_MESSAGE, null, null, "MA1256");
            } while (sCode.length() == 0);
            rs = Rfd.SubjectWisePass(sCode);
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERNAL", "TOTAL" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERN", "TOTAL" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void SubjectWiseFailMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        String sCode = "";
        try {
            do {
                sCode = (String) JOptionPane.showInputDialog(this, "Enter the subject code", "subject code Required", JOptionPane.PLAIN_MESSAGE, null, null, "MA1256");
            } while (sCode.length() == 0);
            rs = Rfd.SubjectWiseFail(sCode);
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERNAL", "TOTAL" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERN", "TOTAL" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void SubjectWiseAverageMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        try {
            rs = Rfd.SubjectWiseAverage();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "SUBCODE", "SUBJECT_NAME", "AVERAGE" };
        String tableColNames[] = { "SUBCODE", "SUBJECT_NAME", "AVERAGE" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void SubjectWiseRankMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        String sCode = "";
        try {
            do {
                sCode = (String) JOptionPane.showInputDialog(this, "Enter the subject code", "subject code Required", JOptionPane.PLAIN_MESSAGE, null, null, "MA1256");
            } while (sCode.length() == 0);
            rs = Rfd.SubjectWiseRank(sCode);
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSetTableModel Rstm = new ResultSetTableModel();
        String colNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERNAL", "TOTAL" };
        String tableColNames[] = { "REGISTER_NUMBER", "NAME", "SUBJECT_CODE", "INTERNAL", "EXTERN", "TOTAL" };
        Rstm.colNames = colNames;
        Rstm.tableColNames = tableColNames;
        Rstm.createResultSet(rs);
        jTable1.setModel(Rstm);
    }

    private void DetailsMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            DetailsForm dFrm = new DetailsForm(conn, tempConnection);
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class CollectData extends Thread {

        ResultStat allStat;

        CollectData(ResultStat myStat) {
            allStat = myStat;
        }

        public void run() {
            chennaiEducationClass acc = new chennaiEducationClass();
            UrlInterface access = acc;
            String Log = "Started..." + "\n";
            jTextAreaLog.setText(Log);
            jProgressBar.setValue(0);
            EnterIntoDatabase info = null;
            Integer i = 0, verify = 0, maxval;
            BigInteger n = new BigInteger(From.getText());
            BigInteger n1 = new BigInteger(To.getText());
            maxval = n1.subtract(n).intValue() + 1;
            BigInteger tmp = new BigInteger("0");
            Integer index = jComboBox1.getSelectedIndex() + 1;
            RetrieveSubjects rSubjects = new RetrieveSubjects(tempConnection, index);
            System.out.println("Now The Subjects Will Be Displayed");
            rSubjects.display();
            while (i < maxval) {
                BigInteger x = new BigInteger(i.toString());
                tmp = n.add(x);
                info = access.retriveData(ResultStatInput.URLName, tmp.toString(), index, rSubjects);
                if (!tmp.toString().equals(info.number) && verify < 5) {
                    i--;
                    verify++;
                } else {
                    if (verify == 5) {
                        Log += "Failed to retrieve " + tmp.toString() + "\n";
                        System.out.println("Failed to retrieve " + tmp.toString() + "\n");
                        JOptionPane.showMessageDialog(allStat, "Failed to retrieve " + tmp.toString());
                    } else {
                        Log += "Retrieved " + tmp.toString() + "\n";
                        System.out.println("Retrieved " + tmp.toString() + "\n");
                    }
                    verify = 0;
                    info.display();
                    try {
                        info.EnterDetailsIntoDatabase(conn);
                    } catch (SQLException ex) {
                        Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                progressValue = ((i + 1) * 100) / (maxval);
                jProgressBar.setValue(progressValue);
                jTextAreaLog.setText(Log);
                i++;
            }
            jTextAreaLog.setText(Log);
            this.stop();
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception e) {
                }
                new ResultStat().setVisible(true);
            }
        });
    }

    private javax.swing.JButton Details;

    private javax.swing.JTextField From;

    private javax.swing.JButton IndividualResult;

    private javax.swing.JButton Rank;

    private javax.swing.JButton Result;

    private javax.swing.JButton RetriveUrl;

    private javax.swing.JButton SubjectWiseAverage;

    private javax.swing.JButton SubjectWiseFail;

    private javax.swing.JButton SubjectWisePass;

    private javax.swing.JButton SubjectWiseRank;

    private javax.swing.JTextField To;

    private javax.swing.JComboBox jComboBox1;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JProgressBar jProgressBar;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JTable jTable1;

    private javax.swing.JTextArea jTextAreaLog;

    private javax.swing.JButton showDetails;
}
